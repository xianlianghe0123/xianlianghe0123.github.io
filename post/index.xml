<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 贺贤良</title>
    <link>https://xianlianghe0123.github.io/post/</link>
    <description>Recent content in Posts on 贺贤良</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <lastBuildDate>Sat, 15 Oct 2022 11:29:48 +0800</lastBuildDate><atom:link href="https://xianlianghe0123.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 1441. 用栈操作构建数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1441.-%E7%94%A8%E6%A0%88%E6%93%8D%E4%BD%9C%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 15 Oct 2022 11:29:48 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1441.-%E7%94%A8%E6%A0%88%E6%93%8D%E4%BD%9C%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode.cn/problems/build-an-array-with-stack-operations/
难度： 中等
题目描述 给你一个数组 target 和一个整数 n。每次迭代，需要从 list = { 1 , 2 , 3 ..., n } 中依次读取一个数字。
请使用下述操作来构建目标数组 target ：
&amp;quot;Push&amp;quot;：从 list 中读取一个新元素， 并将其推入数组中。 &amp;quot;Pop&amp;quot;：删除数组中的最后一个元素。 如果目标数组构建完成，就停止读取更多元素。 题目数据保证目标数组严格递增，并且只包含 1 到 n 之间的数字。
请返回构建目标数组所用的操作序列。如果存在多个可行方案，返回任一即可。
示例 1： 输入： target = [1,3], n = 3
输出： [&amp;ldquo;Push&amp;rdquo;,&amp;ldquo;Push&amp;rdquo;,&amp;ldquo;Pop&amp;rdquo;,&amp;ldquo;Push&amp;rdquo;]
解释：
读取 1 并自动推入数组 -&amp;gt; [1]
读取 2 并自动推入数组，然后删除它 -&amp;gt; [1]
读取 3 并自动推入数组 -&amp;gt; [1,3]
示例 2: 输入： target = [1,2,3], n = 3</description>
    </item>
    
    <item>
      <title>Leetcode 769. 最多能完成排序的块</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-769.-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97/</link>
      <pubDate>Thu, 13 Oct 2022 10:19:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-769.-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97/</guid>
      <description>链接： https://leetcode.cn/problems/max-chunks-to-make-sorted/
难度： 中等
题目描述 给定一个长度为 n 的整数数组 arr ，它表示在 [0, n - 1] 范围内的整数的排列。
我们将 arr 分割成若干 块 (即分区)，并对每个块单独排序。将它们连接起来后，使得连接的结果和按升序排序后的原数组相同。
返回数组能分成的最多块数量。
示例 1： 输入： arr = [4,3,2,1,0]
输出： 1
解释：
将数组分成2块或者更多块，都无法得到所需的结果。
例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。
示例 2： 输入： arr = [1,0,2,3,4]
输出： 4
解释：
我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。
然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。
提示： n == arr.length 1 &amp;lt;= n &amp;lt;= 10 0 &amp;lt;= arr[i] &amp;lt; n arr 中每个元素都 不同 解题思路 贪心 根据题目给定的数据范围，当排序完成后，其元素值和下标是相同的。</description>
    </item>
    
    <item>
      <title>Leetcode 817. 链表组件</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-817.-%E9%93%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 12 Oct 2022 10:26:31 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-817.-%E9%93%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>链接： https://leetcode.cn/problems/linked-list-components/
难度： 中等
题目描述 给定链表头结点 head，该链表上的每个结点都有一个 唯一的整型值 。同时给定列表 nums，该列表是上述链表中整型值的一个子集。
返回列表 nums 中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表 nums 中）构成的集合。
示例 1： 输入： head = [0,1,2,3], nums = [0,1,3]
输出： 2
解释： 链表中,0 和 1 是相连接的，且 nums 中不包含 2，所以 [0, 1] 是 nums 的一个组件，同理 [3] 也是一个组件，故返回 2。
示例 2： 输入： head = [0,1,2,3,4], nums = [0,3,1,4]
输出： 2
解释： 链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。
提示： 链表中节点数为 n 1 &amp;lt;= n &amp;lt;= 104 0 &amp;lt;= Node.</description>
    </item>
    
    <item>
      <title>Leetcode 1790. 仅执行一次字符串交换能否使两个字符串相等</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1790.-%E4%BB%85%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%A4%E6%8D%A2%E8%83%BD%E5%90%A6%E4%BD%BF%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89/</link>
      <pubDate>Wed, 12 Oct 2022 10:09:29 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1790.-%E4%BB%85%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%A4%E6%8D%A2%E8%83%BD%E5%90%A6%E4%BD%BF%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89/</guid>
      <description>链接： https://leetcode.cn/problems/check-if-one-string-swap-can-make-strings-equal/
难度： 简单
题目描述 给你长度相等的两个字符串 s1 和 s2 。一次 字符串交换 操作的步骤如下：选出某个字符串中的两个下标（不必不同），并交换这两个下标所对应的字符。
如果对 其中一个字符串 执行 最多一次字符串交换 就可以使两个字符串相等，返回 true ；否则，返回 false 。
示例 1： 输入： s1 = &amp;ldquo;bank&amp;rdquo;, s2 = &amp;ldquo;kanb&amp;rdquo;
输出： true
解释： 例如，交换 s2 中的第一个和最后一个字符可以得到 &amp;ldquo;bank&amp;rdquo;
示例 2： 输入： s1 = &amp;ldquo;attack&amp;rdquo;, s2 = &amp;ldquo;defend&amp;rdquo;
输出： false
解释： 一次字符串交换无法使两个字符串相等
示例 3： 输入： s1 = &amp;ldquo;kelb&amp;rdquo;, s2 = &amp;ldquo;kelb&amp;rdquo;
输出： true
解释： 两个字符串已经相等，所以不需要进行字符串交换
示例 4： 输入： s1 = &amp;ldquo;abcd&amp;rdquo;, s2 = &amp;ldquo;dcba&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 856. 括号的分数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-856.-%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%86%E6%95%B0/</link>
      <pubDate>Sun, 09 Oct 2022 10:29:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-856.-%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%86%E6%95%B0/</guid>
      <description>链接： https://leetcode.cn/problems/score-of-parentheses/
难度： 中等/font&amp;gt;
题目描述 给定一个平衡括号字符串 S，按下述规则计算该字符串的分数：
() 得 1 分。 AB 得 A + B 分，其中 A 和 B 是平衡括号字符串。 (A) 得 2 * A 分，其中 A 是平衡括号字符串。 示例 1： 输入： &amp;ldquo;()&amp;rdquo;
输出： 1
示例 2： 输入： &amp;ldquo;(())&amp;rdquo;
输出： 2
示例 3： 输入： &amp;ldquo;()()&amp;rdquo;
输出： 2
示例 4： 输入： &amp;ldquo;(()(()))&amp;rdquo;
输出： 6
提示： S 是平衡括号字符串，且只含有 ( 和 ) 。 2 &amp;lt;= S.length &amp;lt;= 50 解题思路 数学 通过分析不难发现，括号的嵌套深度决定了其分数，并且初始的分数产生于 &amp;quot;()&amp;quot;，深度每加1，则分数翻倍。
由于给定的字符串括号是匹配的，遍历并维护深度，当识别到 &amp;quot;()&amp;quot; 时，求得对应的分值并累加。</description>
    </item>
    
    <item>
      <title>Leetcode 870. 优势洗牌</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-870.-%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C/</link>
      <pubDate>Sun, 09 Oct 2022 10:10:49 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-870.-%E4%BC%98%E5%8A%BF%E6%B4%97%E7%89%8C/</guid>
      <description>链接： https://leetcode.cn/problems/advantage-shuffle/
难度： 中等
题目描述 给定两个大小相等的数组 nums1 和 nums2，nums1 相对于 nums2 的优势可以用满足 nums1[i] &amp;gt; nums2[i] 的索引 i 的数目来描述。
返回 nums1 的任意排列，使其相对于 nums2 的优势最大化。
示例 1： 输入： nums1 = [2,7,11,15], nums2 = [1,10,4,11]
输出： [2,11,7,15]
示例 2： 输入： nums1 = [12,24,8,32], nums2 = [13,25,32,11]
输出： [24,32,8,12]
提示： 1 &amp;lt;= nums1.length &amp;lt;= 105 nums2.length == nums1.length 0 &amp;lt;= nums1[i], nums2[i] &amp;lt;= 109 解题思路 贪心 为使得优势最大，需尝试从 nums1 中找出比 nums2 中较小的那部分数字更大，可以采用田忌赛马策略。
首先将两个数组排序，分别从头开始遍历（不妨设下标指针分别 i 和 j）：</description>
    </item>
    
    <item>
      <title>Leetcode 1800. 最大升序子数组和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1800.-%E6%9C%80%E5%A4%A7%E5%8D%87%E5%BA%8F%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</link>
      <pubDate>Fri, 07 Oct 2022 16:54:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1800.-%E6%9C%80%E5%A4%A7%E5%8D%87%E5%BA%8F%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</guid>
      <description>链接： https://leetcode.cn/problems/maximum-ascending-subarray-sum/
难度： 简单
题目描述 给你一个正整数组成的数组 nums ，返回 nums 中一个 升序 子数组的最大可能元素和。
子数组是数组中的一个连续数字序列。
已知子数组 [numsl, numsl+1, &amp;hellip;, numsr-1, numsr] ，若对所有 i（l &amp;lt;= i &amp;lt; r），numsi &amp;lt; numsi+1 都成立，则称这一子数组为 升序 子数组。注意，大小为 1 的子数组也视作 升序 子数组。
示例 1： 输入： nums = [10,20,30,5,10,50]
输出： 65
解释： [5,10,50] 是元素和最大的升序子数组，最大元素和为 65 。
示例 2： 输入： nums = [10,20,30,40,50]
输出： 150
解释： [10,20,30,40,50] 是元素和最大的升序子数组，最大元素和为 150 。
示例 3： 输入： nums = [12,17,15,13,10,11,12]
输出： 33
解释： [10,11,12] 是元素和最大的升序子数组，最大元素和为 33 。</description>
    </item>
    
    <item>
      <title>Leetcode 811. 子域名访问计数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-811.-%E5%AD%90%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0/</link>
      <pubDate>Wed, 05 Oct 2022 10:37:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-811.-%E5%AD%90%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E8%AE%A1%E6%95%B0/</guid>
      <description>链接： https://leetcode.cn/problems/subdomain-visit-count/
难度： 中等
题目描述 网站域名 &amp;quot;discuss.leetcode.com&amp;quot; 由多个子域名组成。顶级域名为 &amp;quot;com&amp;quot; ，二级域名为 &amp;quot;leetcode.com&amp;quot; ，最低一级为 &amp;quot;discuss.leetcode.com&amp;quot; 。当访问域名 &amp;quot;discuss.leetcode.com&amp;quot; 时，同时也会隐式访问其父域名 &amp;quot;leetcode.com&amp;quot; 以及 &amp;quot;com&amp;quot; 。
计数配对域名 是遵循 &amp;quot;rep d1.d2.d3&amp;quot; 或 &amp;quot;rep d1.d2&amp;quot; 格式的一个域名表示，其中 rep 表示访问域名的次数，d1.d2.d3 为域名本身。
例如，&amp;quot;9001 discuss.leetcode.com&amp;quot; 就是一个 计数配对域名 ，表示 discuss.leetcode.com 被访问了 9001 次。 给你一个 计数配对域名 组成的数组 cpdomains ，解析得到输入中每个子域名对应的 计数配对域名 ，并以数组形式返回。可以按 任意顺序 返回答案。
示例 1： 输入： cpdomains = [&amp;ldquo;9001 discuss.leetcode.com&amp;rdquo;]
输出： [&amp;ldquo;9001 leetcode.com&amp;rdquo;,&amp;ldquo;9001 discuss.leetcode.com&amp;rdquo;,&amp;ldquo;9001 com&amp;rdquo;]
解释： 例子中仅包含一个网站域名：&amp;ldquo;discuss.leetcode.com&amp;rdquo;。
按照前文描述，子域名 &amp;ldquo;leetcode.com&amp;rdquo; 和 &amp;ldquo;com&amp;rdquo; 都会被访问，所以它们都被访问了 9001 次。</description>
    </item>
    
    <item>
      <title>Leetcode 921. 使括号有效的最少添加</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-921.-%E4%BD%BF%E6%8B%AC%E5%8F%B7%E6%9C%89%E6%95%88%E7%9A%84%E6%9C%80%E5%B0%91%E6%B7%BB%E5%8A%A0/</link>
      <pubDate>Tue, 04 Oct 2022 10:52:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-921.-%E4%BD%BF%E6%8B%AC%E5%8F%B7%E6%9C%89%E6%95%88%E7%9A%84%E6%9C%80%E5%B0%91%E6%B7%BB%E5%8A%A0/</guid>
      <description>链接： https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/
难度： 中等
题目描述 只有满足下面几点之一，括号字符串才是有效的：
它是一个空字符串，或者 它可以被写成 AB （A 与 B 连接）, 其中 A 和 B 都是有效字符串，或者 它可以被写作 (A)，其中 A 是有效字符串。 给定一个括号字符串 s ，移动 N 次，你就可以在字符串的任何位置插入一个括号。
例如，如果 s = &amp;quot;()))&amp;quot; ，你可以插入一个开始括号为 &amp;quot;(()))&amp;quot; 或结束括号为 &amp;quot;())))&amp;quot; 。 返回 为使结果字符串 s 有效而必须添加的最少括号数。
示例 1： 输入： s = &amp;ldquo;())&amp;rdquo;
输出： 1
示例 2： 输入： s = &amp;ldquo;(((&amp;rdquo;
输出： 3
提示： 1 &amp;lt;= s.length &amp;lt;= 1000 s 只包含 &#39;(&#39; 和 &#39;)&#39; 字符。 解题思路 贪心 当每个 &#39;(&#39; 右侧存在 &#39;)&#39; 时，其必然是可以完成匹配的。所以有两种情况需要补足：</description>
    </item>
    
    <item>
      <title>Leetcode 1784. 检查二进制字符串字段</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1784.-%E6%A3%80%E6%9F%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5/</link>
      <pubDate>Mon, 03 Oct 2022 10:27:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1784.-%E6%A3%80%E6%9F%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5/</guid>
      <description>链接： https://leetcode.cn/problems/check-if-binary-string-has-at-most-one-segment-of-ones/
难度： 简单
题目描述 给你一个二进制字符串 s ，该字符串 不含前导零 。
如果 s 包含 零个或一个由连续的 &#39;1&#39; 组成的字段 ，返回 true​​​ 。否则，返回 false 。
如果 s 中 由连续若干个 &#39;1&#39; 组成的字段 数量不超过 1，返回 true​​​ 。否则，返回 false 。
示例 1： 输入： s = &amp;ldquo;1001&amp;rdquo;
输出： false
解释： 由连续若干个 &amp;lsquo;1&amp;rsquo; 组成的字段数量为 2，返回 false
示例 2： 输入： s = &amp;ldquo;110&amp;rdquo;
输出： true
提示： 1 &amp;lt;= s.length &amp;lt;= 100 s[i]​​​​ 为 &#39;0&#39; 或 &#39;1&#39; s[0] 为 &#39;1&#39; 解题思路 遍历 由于首个字符必然是 1，则其后若有 0 出现，此后不能再出现 1。</description>
    </item>
    
    <item>
      <title>Leetcode 1694. 重新格式化电话号码</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1694.-%E9%87%8D%E6%96%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/</link>
      <pubDate>Sat, 01 Oct 2022 11:22:02 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1694.-%E9%87%8D%E6%96%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/</guid>
      <description>链接： https://leetcode.cn/problems/reformat-phone-number/
难度： 简单
题目描述 给你一个字符串形式的电话号码 number 。number 由数字、空格 &#39; &#39;、和破折号 &#39;-&#39; 组成。
请你按下述方式重新格式化电话号码。
首先，删除 所有的空格和破折号。 其次，将数组从左到右 每 3 个一组 分块，直到 剩下 4 个或更少数字。剩下的数字将按下述规定再分块： 2 个数字：单个含 2 个数字的块。 3 个数字：单个含 3 个数字的块。 4 个数字：两个分别含 2 个数字的块。 最后用破折号将这些块连接起来。注意，重新格式化过程中 不应该 生成仅含 1 个数字的块，并且 最多 生成两个含 2 个数字的块。
返回格式化后的电话号码。
示例 1： 输入： number = &amp;ldquo;1-23-45 6&amp;rdquo;
输出： &amp;ldquo;123-456&amp;rdquo;
解释： 数字是 &amp;ldquo;123456&amp;rdquo;
步骤 1：共有超过 4 个数字，所以先取 3 个数字分为一组。第 1 个块是 &amp;ldquo;123&amp;rdquo; 。
步骤 2：剩下 3 个数字，将它们放入单个含 3 个数字的块。第 2 个块是 &amp;ldquo;456&amp;rdquo; 。</description>
    </item>
    
    <item>
      <title>面试题 01.08. 零矩阵</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-01.08.-%E9%9B%B6%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Fri, 30 Sep 2022 10:01:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-01.08.-%E9%9B%B6%E7%9F%A9%E9%98%B5/</guid>
      <description>链接： https://leetcode.cn/problems/zero-matrix-lcci/
难度： 中等
题目描述 编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。
示例 1： 输入： [ [1,1,1], [1,0,1], [1,1,1] ] 输出： [ [1,0,1], [0,0,0], [1,0,1] ]
示例 2： 输入： [ [0,1,2,0], [3,4,5,2], [1,3,1,5] ] 输出： [ [0,0,0,0], [0,4,5,0], [0,3,1,0] ]
解题思路 哈希 遍历整个矩阵，使用哈希表记录每个元素为 0 的行和列，最后将记录的所有行列中的元素置为 0。
func setZeroes(matrix [][]int) { rows := make(map[int]struct{}) cols := make(map[int]struct{}) for i, line := range matrix { for j, cell := range line { if cell == 0 { rows[i] = struct{}{} cols[j] = struct{}{} } } } for r := range rows { for j := 0; j &amp;lt; len(matrix[0]); j++ { matrix[r][j] = 0 } } for c := range cols { for i := 0; i &amp;lt; len(matrix); i++ { matrix[i][c] = 0 } } } 复杂度 时间复杂度：$ O(MN) $ 空间复杂度：$ O(M+N) $ </description>
    </item>
    
    <item>
      <title>面试题 01.09. 字符串轮转</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-01.09.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AE%E8%BD%AC/</link>
      <pubDate>Thu, 29 Sep 2022 10:11:03 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-01.09.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AE%E8%BD%AC/</guid>
      <description>链接： https://leetcode.cn/problems/check-permutation-lcci/
难度： 简单
题目描述 字符串轮转。给定两个字符串 s1 和 s2，请编写代码检查 s2 是否为 s1 旋转而成（比如，waterbottle 是 erbottlewat 旋转后的字符串）。
示例 1： 输入： s1 = &amp;ldquo;waterbottle&amp;rdquo;, s2 = &amp;ldquo;erbottlewat&amp;rdquo;
输出： True
示例 2： 输入： s1 = &amp;ldquo;aa&amp;rdquo;, s2 = &amp;ldquo;aba&amp;rdquo;
输出： False
提示 字符串长度在 [0, 100000] 范围内。 说明 你能只调用一次检查子串的方法吗？ 解题思路 枚举 s1 能旋转为 s2 一个充分条件为字符串长度一致，首先针对长度初步判断。
当长度一致时，需找到一个分隔点，前后两个字串分别是 s2 的后缀和前缀，方可以通过旋转得到。
遍历整个 s1 ，通过枚举寻找。
func isFlipedString(s1 string, s2 string) bool { if len(s1) != len(s2) { return false } for i := 0; i &amp;lt;= len(s1); i++ { if strings.</description>
    </item>
    
    <item>
      <title>面试题 17.09. 第 k 个数</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.09.-%E7%AC%AC-k-%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Wed, 28 Sep 2022 10:15:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.09.-%E7%AC%AC-k-%E4%B8%AA%E6%95%B0/</guid>
      <description>链接： https://leetcode.cn/problems/get-kth-magic-number-lcci/
难度： 中等
题目描述 有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素因子。例如，前几个数按顺序应该是 1，3，5，7，9，15，21。
示例： 输入： k = 5
输出： 9
解题思路 哈希 &amp;amp; 堆 使用小顶堆，维护最小元素，初始堆中元素只有 1。
每次弹出最小元素，依次和因子 3、5、7 想乘，利用哈希表去重，添加到堆中。不断重复该操作，第 k 次弹出的堆顶元素即为有序排列的第 k 个数。
type minHeap struct { sort.IntSlice } func (m *minHeap) Push(x interface{}) { m.IntSlice = append(m.IntSlice, x.(int)) } func (m *minHeap) Pop() interface{} { x := m.IntSlice[len(m.IntSlice)-1] m.IntSlice = m.IntSlice[:len(m.IntSlice)-1] return x } func getKthMagicNumber(k int) int { minHeap := &amp;amp;minHeap{ IntSlice: []int{1}, } exist := map[int]struct{}{ 1: {}, } for i := 1; i &amp;lt; k; i++ { cur := heap.</description>
    </item>
    
    <item>
      <title>面试题 01.02. 判定是否互为字符重排</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-01.02.-%E5%88%A4%E5%AE%9A%E6%98%AF%E5%90%A6%E4%BA%92%E4%B8%BA%E5%AD%97%E7%AC%A6%E9%87%8D%E6%8E%92/</link>
      <pubDate>Tue, 27 Sep 2022 10:11:44 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-01.02.-%E5%88%A4%E5%AE%9A%E6%98%AF%E5%90%A6%E4%BA%92%E4%B8%BA%E5%AD%97%E7%AC%A6%E9%87%8D%E6%8E%92/</guid>
      <description>链接： https://leetcode.cn/problems/check-permutation-lcci/
难度： 简单
题目描述 给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。
示例 1： 输入： s1 = &amp;ldquo;abc&amp;rdquo;, s2 = &amp;ldquo;bca&amp;rdquo;
输出： true
示例 2： 输入： s1 = &amp;ldquo;abc&amp;rdquo;, s2 = &amp;ldquo;bad&amp;rdquo;
输出： false
说明 0 &amp;lt;= len(s1) &amp;lt;= 100 0 &amp;lt;= len(s2) &amp;lt;= 100 解题思路 哈希 两个字符串互为重排，要求两个字符串的每种字符的数量完全一致。
首先用长度做初步判断，不同则直接返回 false
然后使用哈希表统计其中一个字符串每种字母的数量，然后遍历另一个字符串，将对应的字符从哈希表中删除。最后哈希表为空则为 true，否则 false。
func CheckPermutation(s1 string, s2 string) bool { if len(s1) != len(s2) { return false } cnt := make(map[byte]int) for i := range s1 { cnt[s1[i]]++ } for i := range s2 { cnt[s2[i]]-- if cnt[s2[i]] &amp;lt; 0 { return false } if cnt[s2[i]] == 0 { delete(cnt, s2[i]) } } return len(cnt) == 0 } 复杂度 时间复杂度：$ O(N), N = len(s1) $ 空间复杂度：$ O(N) $ </description>
    </item>
    
    <item>
      <title>Leetcode 788. 旋转数字</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-788.-%E6%97%8B%E8%BD%AC%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sun, 25 Sep 2022 10:05:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-788.-%E6%97%8B%E8%BD%AC%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode.cn/problems/rotated-digits/
难度： 中等
题目描述 我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。
如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方（在这种情况下，它们以不同的方向旋转，换句话说，2 和 5 互为镜像）；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。
现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？
示例： 输入： 10
输出： 4
解释：
在[1, 10]中有四个好数： 2, 5, 6, 9。
注意 1 和 10 不是好数, 因为他们在旋转之后不变。
提示： N 的取值范围是 [1, 10000]。 解题思路 枚举 好数的条件是仅包含 {0,1,2,5,6,8,9} 这7个数，且至少包含 {2,5,6,9} 中的一个。
依次枚举进行判断
func valid(n int) bool { same := true for ; n &amp;gt; 0; n /= 10 { switch n % 10 { case 3, 4, 7: return false case 2, 5, 6, 9: same = false } } return !</description>
    </item>
    
    <item>
      <title>Leetcode 1652. 拆炸弹</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1652.-%E6%8B%86%E7%82%B8%E5%BC%B9/</link>
      <pubDate>Sat, 24 Sep 2022 06:58:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1652.-%E6%8B%86%E7%82%B8%E5%BC%B9/</guid>
      <description>链接： https://leetcode.cn/problems/defuse-the-bomb/
难度： 简单
题目描述 你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。
为了获得正确的密码，你需要替换掉每一个数字。所有数字会 同时 被替换。
如果 k &amp;gt; 0 ，将第 i 个数字用 接下来 k 个数字之和替换。 如果 k &amp;lt; 0 ，将第 i 个数字用 之前 k 个数字之和替换。 如果 k == 0 ，将第 i 个数字用 0 替换。 由于 code 是循环的， code[n-1] 下一个元素是 code[0] ，且 code[0] 前一个元素是 code[n-1] 。
给你 循环 数组 code 和整数密钥 k ，请你返回解密后的结果来拆除炸弹！
示例 1： 输入： code = [5,7,1,4], k = 3</description>
    </item>
    
    <item>
      <title>Leetcode 707. 设计链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-707.-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 23 Sep 2022 10:14:17 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-707.-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode.cn/problems/design-linked-list/
难度： 中等
题目描述 设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。
在链表类中实现这些功能：
get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。 addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。 addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。 addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果 index 小于 0，则在头部插入节点。 deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。 示例： MyLinkedList linkedList = new MyLinkedList(); linkedList.addAtHead(1); linkedList.addAtTail(3); linkedList.addAtIndex(1,2); //链表变为1-&amp;gt; 2-&amp;gt; 3 linkedList.get(1); //返回2 linkedList.deleteAtIndex(1); //现在链表是1-&amp;gt; 3 linkedList.get(1); //返回3 提示： 所有 val 值都在 [1, 1000] 之内。 操作次数将在 [1, 1000] 之内。 请不要使用内置的 LinkedList 库。 解题思路 单向链表 type node struct { val int next *node } type MyLinkedList struct { head *node length int } func Constructor() MyLinkedList { return MyLinkedList{ head: new(node), length: 0, } } func (this *MyLinkedList) Get(index int) int { if index &amp;lt; -1 || index &amp;gt;= this.</description>
    </item>
    
    <item>
      <title>Leetcode 1640. 能否连接形成数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1640.-%E8%83%BD%E5%90%A6%E8%BF%9E%E6%8E%A5%E5%BD%A2%E6%88%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 22 Sep 2022 20:18:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1640.-%E8%83%BD%E5%90%A6%E8%BF%9E%E6%8E%A5%E5%BD%A2%E6%88%90%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode.cn/problems/check-array-formation-through-concatenation/submissions/
难度： 简单
题目描述 给你一个整数数组 arr ，数组中的每个整数 互不相同 。另有一个由整数数组构成的数组 pieces，其中的整数也 互不相同 。请你以 任意顺序 连接 pieces 中的数组以形成 arr 。但是，不允许 对每个数组 pieces[i] 中的整数重新排序。
如果可以连接 pieces 中的数组形成 arr ，返回 true ；否则，返回 false 。
示例 1： 输入： arr = [15,88], pieces = [[88],[15]]
输出： true
解释： 依次连接 [15] 和 [88]
示例 2： 输入： arr = [49,18,16], pieces = [[16,18,49]]
输出： false
解释： 即便数字相符，也不能重新排列 pieces[0]
示例 3： 输入： arr = [91,4,64,78], pieces = [[78],[4,64],[91]]</description>
    </item>
    
    <item>
      <title>Leetcode 1636. 按照频率将数组升序排序</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1636.-%E6%8C%89%E7%85%A7%E9%A2%91%E7%8E%87%E5%B0%86%E6%95%B0%E7%BB%84%E5%8D%87%E5%BA%8F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 19 Sep 2022 10:04:58 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1636.-%E6%8C%89%E7%85%A7%E9%A2%91%E7%8E%87%E5%B0%86%E6%95%B0%E7%BB%84%E5%8D%87%E5%BA%8F%E6%8E%92%E5%BA%8F/</guid>
      <description>链接： https://leetcode.cn/problems/sort-array-by-increasing-frequency/
难度： 简单
题目描述 给你一个整数数组 nums ，请你将数组按照每个值的频率 升序 排序。如果有多个值的频率相同，请你按照数值本身将它们 降序 排序。
请你返回排序后的数组。
示例 1： 输入： nums = [1,1,2,2,2,3]
输出： [3,1,1,2,2,2]
解释： &amp;lsquo;3&amp;rsquo; 频率为 1，&amp;lsquo;1&amp;rsquo; 频率为 2，&amp;lsquo;2&amp;rsquo; 频率为 3 。
示例 2： 输入： nums = [2,3,1,3,2]
输出： [1,3,3,2,2]
解释： &amp;lsquo;2&amp;rsquo; 和 &amp;lsquo;3&amp;rsquo; 频率都为 2 ，所以它们之间按照数值本身降序排序。
示例 3： 输入： nums = [-1,1,-6,4,5,-6,1,4,1]
输出： [5,-1,4,4,-6,-6,1,1,1]
提示： 1 &amp;lt;= nums.length &amp;lt;= 100 -100 &amp;lt;= nums[i] &amp;lt;= 100 解题思路 哈希 + 自定义排序 首先使用哈希表统计每个数出现的频数，然后自定义 compare 函数实现排序。</description>
    </item>
    
    <item>
      <title>Leetcode 827. 最大人工岛</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-827.-%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B/</link>
      <pubDate>Sun, 18 Sep 2022 11:04:03 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-827.-%E6%9C%80%E5%A4%A7%E4%BA%BA%E5%B7%A5%E5%B2%9B/</guid>
      <description>链接： https://leetcode.cn/problems/making-a-large-island/
难度： 困难
题目描述 给你一个大小为 n x n 二进制矩阵 grid 。最多 只能将一格 0 变成 1 。
返回执行此操作后，grid 中最大的岛屿面积是多少？
岛屿 由一组上、下、左、右四个方向相连的 1 形成。
示例 1： 输入： grid = [[1, 0], [0, 1]]
输出： 3
解释： 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。
示例 2： 输入： grid = [[1, 1], [1, 0]]
输出： 4
解释： 将一格0变成1，岛屿的面积扩大为 4。
示例 3： 输入： grid = [[1, 1], [1, 1]]
输出： 4
解释： 没有0可以让我们变成1，面积依然为 4。
提示： n == grid.length n == grid[i].</description>
    </item>
    
    <item>
      <title>Leetcode 1624. 两个相同字符之间的最长子字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1624.-%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sat, 17 Sep 2022 11:21:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1624.-%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode.cn/problems/largest-substring-between-two-equal-characters/
难度： 简单
题目描述 给你一个字符串 s，请你返回 两个相同字符之间的最长子字符串的长度 ，计算长度时不含这两个字符。如果不存在这样的子字符串，返回 -1 。
子字符串 是字符串中的一个连续字符序列。
示例 1： 输入： s = &amp;ldquo;aa&amp;rdquo;
输出： 0
解释： 最优的子字符串是两个 &amp;lsquo;a&amp;rsquo; 之间的空子字符串。
示例 2： 输入： s = &amp;ldquo;abca&amp;rdquo;
输出： 2
解释： 最优的子字符串是 &amp;ldquo;bc&amp;rdquo; 。
示例 3： 输入： s = &amp;ldquo;cbzxy&amp;rdquo;
输出： -1
解释： s 中不存在出现出现两次的字符，所以返回 -1 。
示例 4： 输入： s = &amp;ldquo;cabbac&amp;rdquo;
输出： 4
解释： 最优的子字符串是 &amp;ldquo;abba&amp;rdquo; ，其他的非最优解包括 &amp;ldquo;bb&amp;rdquo; 和 &amp;quot;&amp;quot; 。
提示： 1 &amp;lt;= s.length &amp;lt;= 300 s 只含小写英文字母 解题思路 哈希 遍历字符串，记录每个字符出现的最左位置，后续再次遍历到相同字符时即求得与最左侧字符之间的长度。</description>
    </item>
    
    <item>
      <title>Leetcode 1619. 删除某些元素后的数组均值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1619.-%E5%88%A0%E9%99%A4%E6%9F%90%E4%BA%9B%E5%85%83%E7%B4%A0%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84%E5%9D%87%E5%80%BC/</link>
      <pubDate>Wed, 14 Sep 2022 20:20:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1619.-%E5%88%A0%E9%99%A4%E6%9F%90%E4%BA%9B%E5%85%83%E7%B4%A0%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84%E5%9D%87%E5%80%BC/</guid>
      <description>链接： https://leetcode.cn/problems/mean-of-array-after-removing-some-elements/
难度： 简单
题目描述 给你一个整数数组 arr ，请你删除最小 5% 的数字和最大 5% 的数字后，剩余数字的平均值。
与 标准答案 误差在 10-5 的结果都被视为正确结果。
示例 1： 输入： arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
输出： 2.00000
解释： 删除数组中最大和最小的元素后，所有元素都等于 2，所以平均值为 2 。
示例 2： 输入： arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
输出： 4.00000
示例 3： 输入： arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
输出： 4.77778
示例 4： 输入： arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]
输出： 5.27778
示例 5： 输入： arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]
输出： 5.29167
提示： 20 &amp;lt;= arr.length &amp;lt;= 1000 arr.length 是 20 的 倍数 0 &amp;lt;= arr[i] &amp;lt;= 105 解题思路 排序 将整个数组从小到大排序，去掉两侧各 arr.</description>
    </item>
    
    <item>
      <title>Leetcode 670. 最大交换</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-670.-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</link>
      <pubDate>Tue, 13 Sep 2022 10:16:14 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-670.-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</guid>
      <description>链接： https://leetcode.cn/problems/maximum-swap/
难度： 中等
题目描述 给定一个非负整数，你至多可以交换一次数字中的任意两位。返回你能得到的最大值。
示例 1： 输入： 2736
输出： 7236
解释： 交换数字2和数字7。
示例 2： 输入： 9973
输出： 9973
解释： 不需要交换。
注意： 给定数字的范围是 [0, 108] 解题思路 单调栈 为使得交换后的数字最大，需要将尽量靠右的较大数位与左侧较小的数位交换。
识别出该数字的每一位，使用哈希表记录每个数最靠右出现的位置。
顺序遍历该数字，当哈希表中存在的在该数右侧的最大数字比该数大时，进行交换。
func maximumSwap(num int) int { digits := []byte(strconv.Itoa(num)) swapIdxes := make([]int, 0) maxIdx := len(digits) - 1 // 倒序遍历 for i := len(digits) - 1; i &amp;gt;= 0; i-- { // 当前数最大 if digits[maxIdx] &amp;lt; digits[i] { maxIdx = i continue } // 右侧存在更大的数，可以交换 if digits[maxIdx] &amp;gt; digits[i] { swapIdxes = []int{maxIdx, i} } } if len(swapIdxes) &amp;gt; 0 { digits[swapIdxes[0]], digits[swapIdxes[1]] = digits[swapIdxes[1]], digits[swapIdxes[0]] num, _ = strconv.</description>
    </item>
    
    <item>
      <title>Leetcode 1608. 特殊数组的特征值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1608.-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/</link>
      <pubDate>Mon, 12 Sep 2022 10:00:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1608.-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/</guid>
      <description>链接： https://leetcode.cn/problems/special-array-with-x-elements-greater-than-or-equal-x/
难度： 简单
题目描述 给你一个非负整数数组 nums 。如果存在一个数 x ，使得 nums 中恰好有 x 个元素 大于或者等于 x ，那么就称 nums 是一个 特殊数组 ，而 x 是该数组的 特征值 。
注意： x 不必 是 nums 的中的元素。
如果数组 nums 是一个 特殊数组 ，请返回它的特征值 x 。否则，返回 -1 。可以证明的是，如果 nums 是特殊数组，那么其特征值 x 是 唯一的 。
示例 1： 输入： nums = [3,5]
输出： 2
解释： 有 2 个元素（3 和 5）大于或等于 2 。
示例 2： 输入： nums = [0,0]
输出： -1</description>
    </item>
    
    <item>
      <title>Leetcode 669. 修剪二叉搜索树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-669.-%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Sat, 10 Sep 2022 08:36:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-669.-%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>链接： https://leetcode.cn/problems/trim-a-binary-search-tree/
难度： 中等
题目描述 给你二叉搜索树的根节点 root ，同时给定最小边界 low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在 [low, high] 中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。
所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。
示例 1： 输入： root = [1,0,2], low = 1, high = 2
输出： [1,null,2]
示例 2： 输入： root = [3,0,4,null,2,null,null,1], low = 1, high = 3
输出： [3,2,null,1]
提示： 树中节点数在范围 [1, 104] 内 0 &amp;lt;= Node.val &amp;lt;= 104 树中每个节点的值都是 唯一 的 题目数据保证输入是一棵有效的二叉搜索树 0 &amp;lt;= low &amp;lt;= high &amp;lt;= 104 解题思路 递归 对于树的每个节点而言，有三种情况：</description>
    </item>
    
    <item>
      <title>Leetcode 1598. 文件夹操作日志搜集器</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1598.-%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/</link>
      <pubDate>Fri, 09 Sep 2022 19:53:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1598.-%E6%96%87%E4%BB%B6%E5%A4%B9%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86%E5%99%A8/</guid>
      <description>链接： https://leetcode.cn/problems/crawler-log-folder/
难度： 简单
题目描述 每当用户执行变更文件夹操作时，LeetCode 文件系统都会保存一条日志记录。
下面给出对变更操作的说明：
&amp;quot;../&amp;quot; ：移动到当前文件夹的父文件夹。如果已经在主文件夹下，则 继续停留在当前文件夹 。 &amp;quot;./&amp;quot; ：继续停留在当前文件夹。 &amp;quot;x/&amp;quot; ：移动到名为 x 的子文件夹中。题目数据 保证总是存在文件夹 x 。 给你一个字符串列表 logs ，其中 logs[i] 是用户在 ith 步执行的操作。
文件系统启动时位于主文件夹，然后执行 logs 中的操作。
执行完所有变更文件夹操作后，请你找出 返回主文件夹所需的最小步数 。
示例 1： 输入： logs = [&amp;ldquo;d1/&amp;rdquo;,&amp;ldquo;d2/&amp;rdquo;,&amp;quot;../&amp;quot;,&amp;ldquo;d21/&amp;rdquo;,&amp;quot;./&amp;quot;]
输出： 2
解释： 执行 &amp;ldquo;../&amp;rdquo; 操作变更文件夹 2 次，即可回到主文件夹
示例 2： 输入： logs = [&amp;ldquo;d1/&amp;rdquo;,&amp;ldquo;d2/&amp;rdquo;,&amp;quot;./&amp;quot;,&amp;ldquo;d3/&amp;rdquo;,&amp;quot;../&amp;quot;,&amp;ldquo;d31/&amp;rdquo;]
输出： 3
示例 3： 输入： logs = [&amp;ldquo;d1/&amp;rdquo;,&amp;quot;../&amp;quot;,&amp;quot;../&amp;quot;,&amp;quot;../&amp;quot;]
输出： 0
提示： 1 &amp;lt;= logs.length &amp;lt;= 103 2 &amp;lt;= logs[i].</description>
    </item>
    
    <item>
      <title>Leetcode 667. 优美的排列 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-667.-%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97-ii/</link>
      <pubDate>Thu, 08 Sep 2022 10:23:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-667.-%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97-ii/</guid>
      <description>链接： https://leetcode.cn/problems/beautiful-arrangement-ii/
难度： 中等
题目描述 给你两个整数 n 和 k ，请你构造一个答案列表 answer ，该列表应当包含从 1 到 n 的 n 个不同正整数，并同时满足下述条件：
假设该列表是 answer = [a1, a2, a3, &amp;hellip; , an] ，那么列表 [|a1 - a2|, |a2 - a3|, |a3 - a4|, &amp;hellip; , |an-1 - an|] 中应该有且仅有 k 个不同整数。 返回列表 answer 。如果存在多种答案，只需返回其中 任意一种 。
示例 1： 输入： n = 3, k = 1
输出： [1, 2, 3]
解释： [1, 2, 3] 包含 3 个范围在 1-3 的不同整数，并且 [1, 1] 中有且仅有 1 个不同整数：1</description>
    </item>
    
    <item>
      <title>Leetcode 1592. 重新排列单词间的空格</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1592.-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/</link>
      <pubDate>Wed, 07 Sep 2022 19:44:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1592.-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E5%8D%95%E8%AF%8D%E9%97%B4%E7%9A%84%E7%A9%BA%E6%A0%BC/</guid>
      <description>链接： https://leetcode.cn/problems/rearrange-spaces-between-words/
难度： 简单
题目描述 给你一个字符串 text ，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。题目测试用例保证 text 至少包含一个单词 。
请你重新排列空格，使每对相邻单词之间的空格数目都 相等 ，并尽可能 最大化 该数目。如果不能重新平均分配所有空格，请 将多余的空格放置在字符串末尾 ，这也意味着返回的字符串应当与原 text 字符串的长度相等。
返回 重新排列空格后的字符串 。
示例 1： 输入： text = &amp;quot; this is a sentence &amp;quot;
输出： &amp;ldquo;this is a sentence&amp;rdquo;
解释： 总共有 9 个空格和 4 个单词。可以将 9 个空格平均分配到相邻单词之间，相邻单词间空格数为：9 / (4-1) = 3 个。
示例 2： 输入： text = &amp;quot; practice makes perfect&amp;quot;
输出： &amp;ldquo;practice makes perfect &amp;quot;
解释： 总共有 7 个空格和 3 个单词。7 / (3-1) = 3 个空格加上 1 个多余的空格。多余的空格需要放在字符串的末尾。</description>
    </item>
    
    <item>
      <title>Leetcode 652. 寻找重复的子树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-652.-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E6%A0%91/</link>
      <pubDate>Mon, 05 Sep 2022 10:09:31 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-652.-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E6%A0%91/</guid>
      <description>链接： https://leetcode.cn/problems/find-duplicate-subtrees/
难度： 中等
题目描述 给定一棵二叉树 root，返回所有重复的子树。
对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。
如果两棵树具有相同的结构和相同的结点值，则它们是重复的。
示例 1： 输入： root = [1,2,3,4,null,2,4,null,null,4]
输出： [[2,4],[4]]
示例 2： 输入： root = [2,1,1]
输出： [[1]]
示例 3： 输入： root = [2,2,2,3,null,3,null] 输出： [[2,3],[3]]
提示： 树中的结点数在 [1,104]范围内。 -200 &amp;lt;= Node.val &amp;lt;= 200 解题思路 先序遍历 + 哈希 使用 ()x() 的字符串唯一的标识一颗子树，并通过哈希表记录相同子树的出现次数。
每当出现两次时，将当前子树根节点加入到结果队列中。
func findDuplicateSubtrees(root *TreeNode) []*TreeNode { ans := make([]*TreeNode, 0, 1) exist := make(map[string]int) var dfs func(node *TreeNode) string dfs = func(node *TreeNode) string { if node == nil { return &amp;#34;&amp;#34; } s := fmt.</description>
    </item>
    
    <item>
      <title>Leetcode 1582. 二进制矩阵中的特殊位置</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1582.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Sun, 04 Sep 2022 09:43:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1582.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E4%BD%8D%E7%BD%AE/</guid>
      <description>链接： https://leetcode.cn/problems/special-positions-in-a-binary-matrix/
难度： 简单
题目描述 给你一个大小为 rows x cols 的矩阵 mat，其中 mat[i][j] 是 0 或 1，请返回 矩阵 mat 中特殊位置的数目 。
特殊位置 定义：如果 mat[i][j] == 1 并且第 i 行和第 j 列中的所有其他元素均为 0（行和列的下标均 从 0 开始 ），则位置 (i, j) 被称为特殊位置。
示例 1： 输入： mat = [[1,0,0],
[0,0,1],
[1,0,0]]
输出： 1
解释： (1,2) 是一个特殊位置，因为 mat[1][2] == 1 且所处的行和列上所有其他元素都是 0
示例 2： 输入： mat = [[1,0,0],
[0,1,0],
[0,0,1]]
输出： 3
解释： (0,0), (1,1) 和 (2,2) 都是特殊位置</description>
    </item>
    
    <item>
      <title>Leetcode 646. 最长数对链</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-646.-%E6%9C%80%E9%95%BF%E6%95%B0%E5%AF%B9%E9%93%BE/</link>
      <pubDate>Sat, 03 Sep 2022 09:17:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-646.-%E6%9C%80%E9%95%BF%E6%95%B0%E5%AF%B9%E9%93%BE/</guid>
      <description>链接： https://leetcode.cn/problems/maximum-length-of-pair-chain/
难度： 中等
题目描述 给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。
现在，我们定义一种跟随关系，当且仅当 b &amp;lt; c 时，数对 (c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。
给定一个数对集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。
示例： 输入： [[1,2], [2,3], [3,4]]
输出： 2
解释： 最长的数对链是 [1,2] -&amp;gt; [3,4]
提示： 给出数对的个数在 [1, 1000] 范围内。 解题思路 排序 + 贪心 为使得链长度更大，应选择第二个数字尽量小的数对。
以数对第二个数字的大小关系进行排序。遍历整个数组，当数对第一个数字比当前链表尾部数对的第二个数字更大时，添加到链表末尾，继续处理直到遍历到数组尾。
func findLongestChain(pairs [][]int) int { sort.Slice(pairs, func(i, j int) bool { return pairs[i][1] &amp;lt; pairs[j][1] }) ans := 0 i := math.MinInt for _, p := range pairs { if i &amp;lt; p[0] { i = p[1] ans++ } } return ans } 复杂度 时间复杂度：$ O(N\log{N}), N = len(pairs) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>Leetcode 687. 最长同值路径</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-687.-%E6%9C%80%E9%95%BF%E5%90%8C%E5%80%BC%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Fri, 02 Sep 2022 19:49:50 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-687.-%E6%9C%80%E9%95%BF%E5%90%8C%E5%80%BC%E8%B7%AF%E5%BE%84/</guid>
      <description>链接： https://leetcode.cn/problems/longest-univalue-path/
难度： 中等
题目描述 给定一个二叉树的 root ，返回 最长的路径的长度 ，这个路径中的 每个节点具有相同值 。 这条路径可以经过也可以不经过根节点。
两个节点之间的路径长度 由它们之间的边数表示。
示例 1： 输入： root = [5,4,5,1,1,5]
输出： 2
示例 2： 输入： root = [1,4,5,4,4,5]
输出： 2
提示： 树的节点数的范围是 [0, 104] -1000 &amp;lt;= Node.val &amp;lt;= 1000 树的深度将不超过 1000 解题思路 深度优先搜索 对于一棵树的根节点而言，搜索以根节点为起始的的 左侧 最长路径和 右侧 最长路径，求和即可得到关联到 当前根节点 的最长路径。
对于树中每个节点执行上述搜索，最终得到 全局 最长路径。
func longestUnivaluePath(root *TreeNode) int { // 判空 if root == nil { return 0 } max := 0 // 最大路径 var dfs func(node *TreeNode, val int) int dfs = func(node *TreeNode, val int) int { // 遍历结束 if node == nil { return 0 } // 当前节点和父节点不同，父节点相关路径搜索结束，搜索该子树的路径 if node.</description>
    </item>
    
    <item>
      <title>Leetcode 1475. 商品折扣后的最终价格</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1475.-%E5%95%86%E5%93%81%E6%8A%98%E6%89%A3%E5%90%8E%E7%9A%84%E6%9C%80%E7%BB%88%E4%BB%B7%E6%A0%BC/</link>
      <pubDate>Thu, 01 Sep 2022 10:08:48 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1475.-%E5%95%86%E5%93%81%E6%8A%98%E6%89%A3%E5%90%8E%E7%9A%84%E6%9C%80%E7%BB%88%E4%BB%B7%E6%A0%BC/</guid>
      <description>链接： https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop/
难度： 简单
题目描述 给你一个数组 prices ，其中 prices[i] 是商店里第 i 件商品的价格。
商店里正在进行促销活动，如果你要买第 i 件商品，那么你可以得到与 prices[j] 相等的折扣，其中 j 是满足 j &amp;gt; i 且 prices[j] &amp;lt;= prices[i] 的 最小下标 ，如果没有满足条件的 j ，你将没有任何折扣。
请你返回一个数组，数组中第 i 个元素是折扣后你购买商品 i 最终需要支付的价格。
示例 1： 输入： prices = [8,4,6,2,3]
输出： [4,2,4,2,3]
解释：
商品 0 的价格为 price[0]=8 ，你将得到 prices[1]=4 的折扣，所以最终价格为 8 - 4 = 4 。
商品 1 的价格为 price[1]=4 ，你将得到 prices[3]=2 的折扣，所以最终价格为 4 - 2 = 2 。</description>
    </item>
    
    <item>
      <title>Leetcode 946. 验证栈序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-946.-%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/</link>
      <pubDate>Wed, 31 Aug 2022 11:52:09 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-946.-%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode.cn/problems/validate-stack-sequences/
难度： 中等
题目描述 给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 true；否则，返回 false 。
示例 1： 输入： pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
输出： true
解释： 我们可以按以下顺序执行：
push(1), push(2), push(3), push(4), pop() -&amp;gt; 4,
push(5), pop() -&amp;gt; 5, pop() -&amp;gt; 3, pop() -&amp;gt; 2, pop() -&amp;gt; 1
示例 2： 输入： pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
输出： false
解释： 1 不能在 2 之前弹出。
提示： 1 &amp;lt;= pushed.</description>
    </item>
    
    <item>
      <title>Leetcode 998. 最大二叉树 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-998.-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91-ii/</link>
      <pubDate>Tue, 30 Aug 2022 10:09:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-998.-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91-ii/</guid>
      <description>链接： https://leetcode.cn/problems/maximum-binary-tree-ii/
难度： 中等
题目描述 最大树 定义：一棵树，并满足：其中每个节点的值都大于其子树中的任何其他值。
给你最大树的根节点 root 和一个整数 val 。
就像 之前的问题 那样，给定的树是利用 Construct(a) 例程从列表 a（root = Construct(a)） 递归地构建的：
如果 a 为空，返回 null 。 否则，令 a[i] 作为 a 的最大元素。创建一个值为 a[i] 的根节点 root 。 root 的左子树将被构建为 Construct([a[0], a[1], ..., a[i - 1]]) 。 root 的右子树将被构建为 Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]) 。 返回 root 。 请注意，题目没有直接给出 a ，只是给出一个根节点 root = Construct(a) 。
假设 b 是 a 的副本，并在末尾附加值 val。题目数据保证 b 中的值互不相同。</description>
    </item>
    
    <item>
      <title>Leetcode 1470. 重新排列数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1470.-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 29 Aug 2022 10:08:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1470.-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode.cn/problems/shuffle-the-array/
难度： 简单
题目描述 给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,...,xn,y1,y2,...,yn] 的格式排列。
请你将数组按 [x1,y1,x2,y2,...,xn,yn] 格式重新排列，返回重排后的数组。
示例 1： 输入： nums = [2,5,1,3,4,7], n = 3
输出： [2,3,5,4,1,7]
解释： 由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]
示例 2： 输入： nums = [1,2,3,4,4,3,2,1], n = 4
输出： [1,4,2,3,3,2,4,1]
示例 3： 输入： nums = [1,1,2,2], n = 2
输出： [1,2,1,2]
提示： 1 &amp;lt;= n &amp;lt;= 500 nums.length == 2n 1 &amp;lt;= nums[i] &amp;lt;= 103 解题思路 模拟 按照顺序从前 n 个和后 n 个元素中交替去除元素，依次添加到结果队列中。</description>
    </item>
    
    <item>
      <title>Leetcode 793. 阶乘函数后 K 个零</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-793.-%E9%98%B6%E4%B9%98%E5%87%BD%E6%95%B0%E5%90%8E-k-%E4%B8%AA%E9%9B%B6/</link>
      <pubDate>Sun, 28 Aug 2022 08:05:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-793.-%E9%98%B6%E4%B9%98%E5%87%BD%E6%95%B0%E5%90%8E-k-%E4%B8%AA%E9%9B%B6/</guid>
      <description>链接： https://leetcode.cn/problems/preimage-size-of-factorial-zeroes-function/
难度： 困难
题目描述 f(x) 是 x! 末尾是 0 的数量。回想一下 x! = 1 * 2 * 3 * ... * x，且 0! = 1 。
例如， f(3) = 0 ，因为 3! = 6 的末尾没有 0 ；而 f(11) = 2 ，因为 11!= 39916800 末端有 2 个 0 。 给定 k，找出返回能满足 f(x) = k 的非负整数 x 的数量。
示例 1： 输入： k = 0
输出： 5
解释： 0!, 1!, 2!, 3!, 和 4!</description>
    </item>
    
    <item>
      <title>Leetcode 662. 二叉树最大宽度</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-662.-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E5%AE%BD%E5%BA%A6/</link>
      <pubDate>Sat, 27 Aug 2022 10:57:48 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-662.-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E5%AE%BD%E5%BA%A6/</guid>
      <description>链接： https://leetcode.cn/problems/maximum-width-of-binary-tree/
难度： 中等
题目描述 给你一棵二叉树的根节点 root ，返回树的 最大宽度 。
树的 最大宽度 是所有层中最大的 宽度 。
每一层的 宽度 被定义为该层最左和最右的非空节点（即，两个端点）之间的长度。将这个二叉树视作与满二叉树结构相同，两端点间会出现一些延伸到这一层的 null 节点，这些 null 节点也计入长度。
题目数据保证答案将会在 32 位 带符号整数范围内。
示例 1： 输入： root = [1,3,2,5,3,null,9]
输出： 4
解释： 最大宽度出现在树的第 3 层，宽度为 4 (5,3,null,9) 。
示例 2： 输入： root = [1,3,2,5,null,null,9,6,null,7]
输出： 7
解释： 最大宽度出现在树的第 4 层，宽度为 7 (6,null,null,null,null,null,7) 。
示例 3： 输入： root = [1,3,2,5]
输出： 2
解释： 最大宽度出现在树的第 2 层，宽度为 2 (3,2) 。</description>
    </item>
    
    <item>
      <title>Leetcode 1464. 数组中两元素的最大乘积</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1464.-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</link>
      <pubDate>Fri, 26 Aug 2022 10:01:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1464.-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</guid>
      <description>链接： https://leetcode.cn/problems/maximum-product-of-two-elements-in-an-array/
难度： 简单
题目描述 给你一个整数数组 nums，请你选择数组的两个不同下标 i 和 j，使 (nums[i]-1)*(nums[j]-1) 取得最大值。
请你计算并返回该式的最大值。
示例 1： 输入： nums = [3,4,5,2]
输出： 12
解释： 如果选择下标 i=1 和 j=2（下标从 0 开始），则可以获得最大值，(nums[1]-1)(nums[2]-1) = (4-1)(5-1) = 3*4 = 12 。
示例 2： 输入： nums = [1,5,4,5]
输出： 16
解释： 选择下标 i=1 和 j=3（下标从 0 开始），则可以获得最大值 (5-1)*(5-1) = 16 。
示例 3： 输入： nums = [3,7]
输出： 12
提示： 2 &amp;lt;= nums.length &amp;lt;= 500 1 &amp;lt;= nums[i] &amp;lt;= 103 解题思路 枚举 枚举所有的二元组，求得积的最大值。</description>
    </item>
    
    <item>
      <title>Leetcode 658. 找到 K 个最接近的元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-658.-%E6%89%BE%E5%88%B0-k-%E4%B8%AA%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E5%85%83%E7%B4%A0/</link>
      <pubDate>Thu, 25 Aug 2022 10:08:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-658.-%E6%89%BE%E5%88%B0-k-%E4%B8%AA%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode.cn/problems/find-k-closest-elements/
难度： 中等
题目描述 给定一个 排序好 的数组 arr ，两个整数 k 和 x ，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。
整数 a 比整数 b 更接近 x 需要满足：
|a - x| &amp;lt; |b - x| 或者 |a - x| == |b - x| 且 a &amp;lt; b 示例 1： 输入： arr = [1,2,3,4,5], k = 4, x = 3
输出： [1,2,3,4]
示例 2： 输入： arr = [1,2,3,4,5], k = 4, x = -1
输出： [1,2,3,4]</description>
    </item>
    
    <item>
      <title>Leetcode 1460. 通过翻转子数组使两个数组相等</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1460.-%E9%80%9A%E8%BF%87%E7%BF%BB%E8%BD%AC%E5%AD%90%E6%95%B0%E7%BB%84%E4%BD%BF%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/</link>
      <pubDate>Wed, 24 Aug 2022 10:00:21 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1460.-%E9%80%9A%E8%BF%87%E7%BF%BB%E8%BD%AC%E5%AD%90%E6%95%B0%E7%BB%84%E4%BD%BF%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9B%B8%E7%AD%89/</guid>
      <description>链接： https://leetcode.cn/problems/make-two-arrays-equal-by-reversing-sub-arrays/
难度： 简单
题目描述 给你两个长度相同的整数数组 target 和 arr 。每一步中，你可以选择 arr 的任意 非空子数组 并将它翻转。你可以执行此过程任意次。
如果你能让 arr 变得与 target 相同，返回 True；否则，返回 False 。
示例 1： 输入： target = [1,2,3,4], arr = [2,4,1,3]
输出： true
解释： 你可以按照如下步骤使 arr 变成 target：
1- 翻转子数组 [2,4,1] ，arr 变成 [1,4,2,3]
2- 翻转子数组 [4,2] ，arr 变成 [1,2,4,3]
3- 翻转子数组 [4,3] ，arr 变成 [1,2,3,4]
上述方法并不是唯一的，还存在多种将 arr 变成 target 的方法。
示例 2： 输入： target = [7], arr = [7]</description>
    </item>
    
    <item>
      <title>Leetcode 655. 输出二叉树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-655.-%E8%BE%93%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Mon, 22 Aug 2022 10:08:19 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-655.-%E8%BE%93%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>链接： https://leetcode.cn/problems/print-binary-tree/
难度： 中等
题目描述 给你一棵二叉树的根节点 root ，请你构造一个下标从 0 开始、大小为 m x n 的字符串矩阵 res ，用以表示树的 格式化布局 。构造此格式化布局矩阵需要遵循以下规则：
树的 高度 为 height ，矩阵的行数 m 应该等于 height + 1 。 矩阵的列数 n 应该等于 2height+1 - 1 。 根节点 需要放置在 顶行 的 正中间 ，对应位置为 res[0][(n-1)/2] 。 对于放置在矩阵中的每个节点，设对应位置为 res[r][c] ，将其左子节点放置在 res[r+1][c-2height-r-1] ，右子节点放置在 res[r+1][c+2height-r-1] 。 继续这一过程，直到树中的所有节点都妥善放置。 任意空单元格都应该包含空字符串 &amp;quot;&amp;quot; 。 返回构造得到的矩阵 res 。
示例 1： 输入： root = [1,2]
输出：
[[&amp;quot;&amp;quot;,&amp;ldquo;1&amp;rdquo;,&amp;quot;&amp;quot;],
[&amp;ldquo;2&amp;rdquo;,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;]]
示例 2： 输入： root = [1,2,3,null,4]</description>
    </item>
    
    <item>
      <title>Leetcode 1455. 检查单词是否为句中其他单词的前缀</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1455.-%E6%A3%80%E6%9F%A5%E5%8D%95%E8%AF%8D%E6%98%AF%E5%90%A6%E4%B8%BA%E5%8F%A5%E4%B8%AD%E5%85%B6%E4%BB%96%E5%8D%95%E8%AF%8D%E7%9A%84%E5%89%8D%E7%BC%80/</link>
      <pubDate>Sun, 21 Aug 2022 09:25:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1455.-%E6%A3%80%E6%9F%A5%E5%8D%95%E8%AF%8D%E6%98%AF%E5%90%A6%E4%B8%BA%E5%8F%A5%E4%B8%AD%E5%85%B6%E4%BB%96%E5%8D%95%E8%AF%8D%E7%9A%84%E5%89%8D%E7%BC%80/</guid>
      <description>链接： https://leetcode.cn/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/
难度： 简单
题目描述 给你一个字符串 sentence 作为句子并指定检索词为 searchWord ，其中句子由若干用 单个空格 分隔的单词组成。请你检查检索词 searchWord 是否为句子 sentence 中任意单词的前缀。
如果 searchWord 是某一个单词的前缀，则返回句子 sentence 中该单词所对应的下标（下标从 1 开始）。如果 searchWord 是多个单词的前缀，则返回匹配的第一个单词的下标（最小下标）。如果 searchWord 不是任何单词的前缀，则返回 -1 。
字符串 s 的 前缀 是 s 的任何前导连续子字符串。
示例 1： 输入： sentence = &amp;ldquo;i love eating burger&amp;rdquo;, searchWord = &amp;ldquo;burg&amp;rdquo;
输出： 4
解释： &amp;ldquo;burg&amp;rdquo; 是 &amp;ldquo;burger&amp;rdquo; 的前缀，而 &amp;ldquo;burger&amp;rdquo; 是句子中第 4 个单词。
示例 2： 输入： sentence = &amp;ldquo;this problem is an easy problem&amp;rdquo;, searchWord = &amp;ldquo;pro&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 654. 最大二叉树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-654.-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sat, 20 Aug 2022 08:56:50 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-654.-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/2-keys-keyboard/
难度： 中等
题目描述 给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建:
创建一个根节点，其值为 nums 中的最大值。 递归地在最大值 左边 的 子数组前缀上 构建左子树。 递归地在最大值 右边 的 子数组后缀上 构建右子树。 返回 nums 构建的 最大二叉树 。
示例 1： 输入： nums = [3,2,1,6,0,5]
输出： [6,3,5,null,2,0,null,null,1]
解释： 递归调用如下所示：
[3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。 [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。 空数组，无子节点。 [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。 空数组，无子节点。 只有一个元素，所以子节点是一个值为 1 的节点。 [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。 只有一个元素，所以子节点是一个值为 0 的节点。 空数组，无子节点。 示例 2： 输入： nums = [3,2,1]</description>
    </item>
    
    <item>
      <title>Leetcode 1450. 在既定时间做作业的学生人数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1450.-%E5%9C%A8%E6%97%A2%E5%AE%9A%E6%97%B6%E9%97%B4%E5%81%9A%E4%BD%9C%E4%B8%9A%E7%9A%84%E5%AD%A6%E7%94%9F%E4%BA%BA%E6%95%B0/</link>
      <pubDate>Fri, 19 Aug 2022 10:10:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1450.-%E5%9C%A8%E6%97%A2%E5%AE%9A%E6%97%B6%E9%97%B4%E5%81%9A%E4%BD%9C%E4%B8%9A%E7%9A%84%E5%AD%A6%E7%94%9F%E4%BA%BA%E6%95%B0/</guid>
      <description>链接： https://leetcode.cn/problems/number-of-students-doing-homework-at-a-given-time/
难度： 简单
题目描述 给你两个整数数组 startTime（开始时间）和 endTime（结束时间），并指定一个整数 queryTime 作为查询时间。
已知，第 i 名学生在 startTime[i] 时开始写作业并于 endTime[i] 时完成作业。
请返回在查询时间 queryTime 时正在做作业的学生人数。形式上，返回能够使 queryTime 处于区间 [startTime[i], endTime[i]]（含）的学生人数。
示例 1： 输入： startTime = [1,2,3], endTime = [3,2,7], queryTime = 4
输出： 1
解释： 一共有 3 名学生。
第一名学生在时间 1 开始写作业，并于时间 3 完成作业，在时间 4 没有处于做作业的状态。
第二名学生在时间 2 开始写作业，并于时间 2 完成作业，在时间 4 没有处于做作业的状态。
第三名学生在时间 3 开始写作业，预计于时间 7 完成作业，这是是唯一一名在时间 4 时正在做作业的学生。
示例 2： 输入： startTime = [4], endTime = [4], queryTime = 4</description>
    </item>
    
    <item>
      <title>Leetcode 1302. 层数最深叶子节点的和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1302.-%E5%B1%82%E6%95%B0%E6%9C%80%E6%B7%B1%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E5%92%8C/</link>
      <pubDate>Wed, 17 Aug 2022 10:17:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1302.-%E5%B1%82%E6%95%B0%E6%9C%80%E6%B7%B1%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E5%92%8C/</guid>
      <description>链接： https://leetcode.cn/problems/deepest-leaves-sum/
难度： 中等
题目描述 给你一棵二叉树的根节点 root ，请你返回 层数最深的叶子节点的和 。
示例 1： 输入： root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
输出： 15
示例 2： 输入： root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
输出： 19
提示： 树中节点数目在范围 [1, 104] 之间。 1 &amp;lt;= Node.val &amp;lt;= 100 解题思路 深度优先搜索 先序遍历整个二叉树，将深度信息向下传递，同时记录最大深度。
当遇到同一深度的节点时，累加和。当遇到更深的节点时，累加和清空，重新计算。
以上累加时，由于深度最深的点一定是叶节点，故不用区分是否为叶节点。
func deepestLeavesSum(root *TreeNode) int { maxDepth := 0 sum := 0 var dfs func(node *TreeNode, depth int) dfs = func(node *TreeNode, depth int) { if node == nil { return } if maxDepth == depth { sum += node.</description>
    </item>
    
    <item>
      <title>Leetcode 1656. 设计有序流</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1656.-%E8%AE%BE%E8%AE%A1%E6%9C%89%E5%BA%8F%E6%B5%81/</link>
      <pubDate>Tue, 16 Aug 2022 10:04:04 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1656.-%E8%AE%BE%E8%AE%A1%E6%9C%89%E5%BA%8F%E6%B5%81/</guid>
      <description>链接： https://leetcode.cn/problems/design-an-ordered-stream/
难度： 简单
题目描述 有 n 个 (id, value) 对，其中 id 是 1 到 n 之间的一个整数，value 是一个字符串。不存在 id 相同的两个 (id, value) 对。
设计一个流，以 任意 顺序获取 n 个 (id, value) 对，并在多次调用时 按 id 递增的顺序 返回一些值。
实现 OrderedStream 类：
OrderedStream(int n) 构造一个能接收 n 个值的流，并将当前指针 ptr 设为 1 。 String[] insert(int id, String value) 向流中存储新的 (id, value) 对。存储后： 如果流存储有 id = ptr 的 (id, value) 对，则找出从 id = ptr 开始的 最长 id 连续递增序列 ，并 按顺序 返回与这些 id 关联的值的列表。然后，将 ptr 更新为最后那个 id + 1 。 否则，返回一个空列表。 示例： 输入</description>
    </item>
    
    <item>
      <title>Leetcode 641. 设计循环双端队列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-641.-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 15 Aug 2022 10:03:04 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-641.-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</guid>
      <description>链接： https://leetcode.cn/problems/design-circular-deque/
难度： 中等
题目描述 设计实现双端队列。
实现 MyCircularDeque 类:
MyCircularDeque(int k) ：构造函数,双端队列最大为 k 。 boolean insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true ，否则返回 false 。 boolean insertLast() ：将一个元素添加到双端队列尾部。如果操作成功返回 true ，否则返回 false 。 boolean deleteFront() ：从双端队列头部删除一个元素。 如果操作成功返回 true ，否则返回 false 。 boolean deleteLast() ：从双端队列尾部删除一个元素。如果操作成功返回 true ，否则返回 false 。 int getFront() ：从双端队列头部获得一个元素。如果双端队列为空，返回 -1 。 int getRear() ：获得双端队列的最后一个元素。 如果双端队列为空，返回 -1 。 boolean isEmpty() ：若双端队列为空，则返回 true ，否则返回 false 。 boolean isFull() ：若双端队列满了，则返回 true ，否则返回 false 。 示例： 输入：</description>
    </item>
    
    <item>
      <title>Leetcode 1422. 分割字符串的最大得分</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1422.-%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BE%97%E5%88%86/</link>
      <pubDate>Sun, 14 Aug 2022 10:43:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1422.-%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BE%97%E5%88%86/</guid>
      <description>链接： https://leetcode.cn/problems/maximum-score-after-splitting-a-string/
难度： 简单
题目描述 给你一个由若干 0 和 1 组成的字符串 s ，请你计算并返回将该字符串分割成两个 非空 子字符串（即 左 子字符串和 右 子字符串）所能获得的最大得分。
「分割字符串的得分」为 左 子字符串中 0 的数量加上 右 子字符串中 1 的数量。
示例 1： 输入： s = &amp;ldquo;011101&amp;rdquo;
输出： 5
解释：
将字符串 s 划分为两个非空子字符串的可行方案有： 左子字符串 = &amp;ldquo;0&amp;rdquo; 且 右子字符串 = &amp;ldquo;11101&amp;rdquo;，得分 = 1 + 4 = 5
左子字符串 = &amp;ldquo;01&amp;rdquo; 且 右子字符串 = &amp;ldquo;1101&amp;rdquo;，得分 = 1 + 3 = 4
左子字符串 = &amp;ldquo;011&amp;rdquo; 且 右子字符串 = &amp;ldquo;101&amp;rdquo;，得分 = 1 + 2 = 3</description>
    </item>
    
    <item>
      <title>Leetcode 768. 最多能完成排序的块 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-768.-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97-ii/</link>
      <pubDate>Sat, 13 Aug 2022 10:13:18 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-768.-%E6%9C%80%E5%A4%9A%E8%83%BD%E5%AE%8C%E6%88%90%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9D%97-ii/</guid>
      <description>链接： https://leetcode.cn/problems/max-chunks-to-make-sorted-ii/
难度： 困难
题目描述 这个问题和 “最多能完成排序的块” 相似，但给定数组中的元素可以重复，输入数组最大长度为 2000，其中的元素最大为108。
arr 是一个可能包含 重复元素 的整数数组，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。
我们最多能将数组分成多少块？
示例 1： 输入： arr = [5,4,3,2,1]
输出： 1
解释：
将数组分成2块或者更多块，都无法得到所需的结果。
例如，分成 [5, 4], [3, 2, 1] 的结果是 [4, 5, 1, 2, 3]，这不是有序的数组。
示例 2： 输入： arr = [2,1,3,4,4]
输出： 4
解释：
我们可以把它分成两块，例如 [2, 1], [3, 4, 4]。
然而，分成 [2, 1], [3], [4], [4] 可以得到最多的块数。
提示： arr 的长度在 [1, 2000] 之间。 arr[i] 的大小在 [0, 108]之间。 解题思路 排序 + 哈希 要使得分块后排序的结果和整体排序后的结果相同，则每一块内的元素必须和整体排序后对应的元素除顺序外保持相同。</description>
    </item>
    
    <item>
      <title>Leetcode 1282. 用户分组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1282.-%E7%94%A8%E6%88%B7%E5%88%86%E7%BB%84/</link>
      <pubDate>Fri, 12 Aug 2022 09:57:09 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1282.-%E7%94%A8%E6%88%B7%E5%88%86%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/
难度： 困难
题目描述 有 n 个人被分成数量未知的组。每个人都被标记为一个从 0 到 n - 1 的 唯一ID 。
给定一个整数数组 groupSizes ，其中 groupSizes[i] 是第 i 个人所在的组的大小。例如，如果 groupSizes[1] = 3 ，则第 1 个人必须位于大小为 3 的组中。
返回一个组列表，使每个人 i 都在一个大小为 groupSizes[i] 的组中。
每个人应该 恰好只 出现在 一个组 中，并且每个人必须在一个组中。如果有多个答案，返回其中 任何 一个。可以 保证 给定输入 至少有一个 有效的解。
示例 1： 输入： groupSizes = [3,3,3,3,3,1,3]
输出： [[5],[0,1,2],[3,4,6]]
解释：
第一组是 [5]，大小为 1，groupSizes[5] = 1。
第二组是 [0,1,2]，大小为 3，groupSizes[0] = groupSizes[1] = groupSizes[2] = 3。</description>
    </item>
    
    <item>
      <title>Leetcode 1417. 重新格式化字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1417.-%E9%87%8D%E6%96%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 11 Aug 2022 10:45:39 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1417.-%E9%87%8D%E6%96%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode.cn/problems/reformat-the-string/
难度： 简单
题目描述 给你一个混合了数字和字母的字符串 s，其中的字母均为小写英文字母。
请你将该字符串重新格式化，使得任意两个相邻字符的类型都不同。也就是说，字母后面应该跟着数字，而数字后面应该跟着字母。
请你返回 重新格式化后 的字符串；如果无法按要求重新格式化，则返回一个 空字符串 。
示例 1： 输入： s = &amp;ldquo;a0b1c2&amp;rdquo;
输出： &amp;ldquo;0a1b2c&amp;rdquo;
解释： &amp;ldquo;0a1b2c&amp;rdquo; 中任意两个相邻字符的类型都不同。 &amp;ldquo;a0b1c2&amp;rdquo;, &amp;ldquo;0a1b2c&amp;rdquo;, &amp;ldquo;0c2a1b&amp;rdquo; 也是满足题目要求的答案。
示例 2： 输入： s = &amp;ldquo;leetcode&amp;rdquo;
输出： &amp;quot;&amp;quot;
解释： &amp;ldquo;leetcode&amp;rdquo; 中只有字母，所以无法满足重新格式化的条件。
示例 3： 输入： s = &amp;ldquo;1229857369&amp;rdquo;
输出： &amp;quot;&amp;quot;
解释： &amp;ldquo;1229857369&amp;rdquo; 中只有数字，所以无法满足重新格式化的条件。
示例 4： 输入： s = &amp;ldquo;covid2019&amp;rdquo;
输出： &amp;ldquo;c2o0v1i9d&amp;rdquo;
示例 5： 输入： s = &amp;ldquo;ab123&amp;rdquo;
输出： &amp;ldquo;1a2b3&amp;rdquo;
提示： 1 &amp;lt;= s.length &amp;lt;= 500 s 仅由小写英文字母和/或数字组成。 解题思路 模拟 统计字母和数字的数量，当且仅当二者的差值小于1时，可以格式化。</description>
    </item>
    
    <item>
      <title>Leetcode 640. 求解方程</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-640.-%E6%B1%82%E8%A7%A3%E6%96%B9%E7%A8%8B/</link>
      <pubDate>Wed, 10 Aug 2022 09:57:21 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-640.-%E6%B1%82%E8%A7%A3%E6%96%B9%E7%A8%8B/</guid>
      <description>链接： https://leetcode.cn/problems/solve-the-equation/
难度： 中等
题目描述 求解一个给定的方程，将 x 以字符串 &amp;quot;x=#value&amp;quot; 的形式返回。该方程仅包含 &#39;+&#39; ， &#39;-&#39; 操作，变量 x 和其对应系数。
如果方程没有解，请返回 &amp;quot;No solution&amp;quot; 。如果方程有无限解，则返回 &amp;quot;Infinite solutions&amp;quot; 。
题目保证，如果方程中只有一个解，则 &#39;x&#39; 的值是一个整数。
示例 1： 输入： equation = &amp;ldquo;x+5-3+x=6+x-2&amp;rdquo;
输出： &amp;ldquo;x=2&amp;rdquo;
示例 2： 输入： equation = &amp;ldquo;x=x&amp;rdquo;
输出： &amp;ldquo;Infinite solutions&amp;rdquo;
示例 3： 输入： equation = &amp;ldquo;2x=x&amp;rdquo;
输出： &amp;ldquo;x=0&amp;rdquo;
提示： 3 &amp;lt;= equation.length &amp;lt;= 1000 equation 只有一个 &#39;=&#39;. equation 方程由整数组成，其绝对值在 [0, 100] 范围内，不含前导零和变量 &#39;x&#39; 。 解题思路 模拟 解析字符串，并进行移项，得到形如 a*x + b = 0 的形式。</description>
    </item>
    
    <item>
      <title>Leetcode 1413. 逐步求和得到正数的最小值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1413.-%E9%80%90%E6%AD%A5%E6%B1%82%E5%92%8C%E5%BE%97%E5%88%B0%E6%AD%A3%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</link>
      <pubDate>Tue, 09 Aug 2022 09:49:56 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1413.-%E9%80%90%E6%AD%A5%E6%B1%82%E5%92%8C%E5%BE%97%E5%88%B0%E6%AD%A3%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</guid>
      <description>链接： https://leetcode.cn/problems/minimum-value-to-get-positive-step-by-step-sum/
难度： 简单
题目描述 给你一个整数数组 nums 。你可以选定任意的 正数 startValue 作为初始值。
你需要从左到右遍历 nums 数组，并将 startValue 依次累加上 nums 数组中的值。
请你在确保累加和始终大于等于 1 的前提下，选出一个最小的 正数 作为 startValue 。
示例 1： 输入： nums = [-3,2,-3,4,2]
输出： 5
解释： 如果你选择 startValue = 4，在第三次累加时，和小于 1 。
累加求和 startValue = 4 startValue = 5 nums (4 -3 ) = 1 (5 -3 ) = 2 -3 (1 +2 ) = 3 (2 +2 ) = 4 2 (3 -3 ) = 0 (4 -3 ) = 1 -3 (0 +4 ) = 4 (1 +4 ) = 5 4 (4 +2 ) = 6 (5 +2 ) = 7 2 示例 2： 输入： nums = [1,2]</description>
    </item>
    
    <item>
      <title>Leetcode 636. 函数的独占时间</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-636.-%E5%87%BD%E6%95%B0%E7%9A%84%E7%8B%AC%E5%8D%A0%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sun, 07 Aug 2022 09:30:44 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-636.-%E5%87%BD%E6%95%B0%E7%9A%84%E7%8B%AC%E5%8D%A0%E6%97%B6%E9%97%B4/</guid>
      <description>链接： https://leetcode.cn/problems/exclusive-time-of-functions/
难度： 中等
题目描述 有一个 单线程 CPU 正在运行一个含有 n 道函数的程序。每道函数都有一个位于 0 和 n-1 之间的唯一标识符。
函数调用 存储在一个 调用栈 上 ：当一个函数调用开始时，它的标识符将会推入栈中。而当一个函数调用结束时，它的标识符将会从栈中弹出。标识符位于栈顶的函数是 当前正在执行的函数 。每当一个函数开始或者结束时，将会记录一条日志，包括函数标识符、是开始还是结束、以及相应的时间戳。
给你一个由日志组成的列表 logs ，其中 logs[i] 表示第 i 条日志消息，该消息是一个按 &amp;quot;{function_id}:{&amp;quot;start&amp;quot; | &amp;quot;end&amp;quot;}:{timestamp}&amp;quot; 进行格式化的字符串。例如，&amp;quot;0:start:3&amp;quot; 意味着标识符为 0 的函数调用在时间戳 3 的 起始开始执行 ；而 &amp;quot;1:end:2&amp;quot; 意味着标识符为 1 的函数调用在时间戳 2 的 末尾结束执行。注意，函数可以 调用多次，可能存在递归调用 。
函数的 独占时间 定义是在这个函数在程序所有函数调用中执行时间的总和，调用其他函数花费的时间不算该函数的独占时间。例如，如果一个函数被调用两次，一次调用执行 2 单位时间，另一次调用执行 1 单位时间，那么该函数的 独占时间 为 2 + 1 = 3 。
以数组形式返回每个函数的 独占时间 ，其中第 i 个下标对应的值表示标识符 i 的函数的独占时间。</description>
    </item>
    
    <item>
      <title>Leetcode 1408. 数组中的字符串匹配</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1408.-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Sat, 06 Aug 2022 18:19:05 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1408.-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</guid>
      <description>链接： https://leetcode.cn/problems/string-matching-in-an-array/
难度： 中等
题目描述 给你一个字符串数组 words ，数组中的每个字符串都可以看作是一个单词。请你按 任意 顺序返回 words 中是其他单词的子字符串的所有单词。
如果你可以删除 words[j] 最左侧和/或最右侧的若干字符得到 word[i] ，那么字符串 words[i] 就是 words[j] 的一个子字符串。
示例 1： 输入： words = [&amp;ldquo;mass&amp;rdquo;,&amp;ldquo;as&amp;rdquo;,&amp;ldquo;hero&amp;rdquo;,&amp;ldquo;superhero&amp;rdquo;]
输出： [&amp;ldquo;as&amp;rdquo;,&amp;ldquo;hero&amp;rdquo;]
解释： &amp;ldquo;as&amp;rdquo; 是 &amp;ldquo;mass&amp;rdquo; 的子字符串，&amp;ldquo;hero&amp;rdquo; 是 &amp;ldquo;superhero&amp;rdquo; 的子字符串。
[&amp;ldquo;hero&amp;rdquo;,&amp;ldquo;as&amp;rdquo;] 也是有效的答案。
示例 2： 输入： words = [&amp;ldquo;leetcode&amp;rdquo;,&amp;ldquo;et&amp;rdquo;,&amp;ldquo;code&amp;rdquo;]
输出： [&amp;ldquo;et&amp;rdquo;,&amp;ldquo;code&amp;rdquo;]
解释： &amp;ldquo;et&amp;rdquo; 和 &amp;ldquo;code&amp;rdquo; 都是 &amp;ldquo;leetcode&amp;rdquo; 的子字符串。
示例 3： 输入： words = [&amp;ldquo;blue&amp;rdquo;,&amp;ldquo;green&amp;rdquo;,&amp;ldquo;bu&amp;rdquo;]
输出： []
提示： 1 &amp;lt;= words.length &amp;lt;= 100 1 &amp;lt;= words[i].</description>
    </item>
    
    <item>
      <title>Leetcode 623. 在二叉树中增加一行</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-623.-%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%A2%9E%E5%8A%A0%E4%B8%80%E8%A1%8C/</link>
      <pubDate>Fri, 05 Aug 2022 09:55:14 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-623.-%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%A2%9E%E5%8A%A0%E4%B8%80%E8%A1%8C/</guid>
      <description>链接： https://leetcode.cn/problems/add-one-row-to-tree/
难度： 中等
题目描述 给定一个二叉树的根 root 和两个整数 val 和 depth ，在给定的深度 depth 处添加一个值为 val 的节点行。
注意，根节点 root 位于深度 1 。
加法规则如下:
给定整数 depth，对于深度为 depth - 1 的每个非空树节点 cur ，创建两个值为 val 的树节点作为 cur 的左子树根和右子树根。 cur 原来的左子树应该是新的左子树根的左子树。 cur 原来的右子树应该是新的右子树根的右子树。 如果 depth == 1 意味着 depth - 1 根本没有深度，那么创建一个树节点，值 val 作为整个原始树的新根，而原始树就是新根的左子树。 示例 1： 输入： root = [4,2,6,3,1,5], val = 1, depth = 2
输出： [4,1,1,2,null,null,6,3,1,5]
示例 2： 输入： root = [4,2,null,3,1], val = 1, depth = 3</description>
    </item>
    
    <item>
      <title>Leetcode 1403. 非递增顺序的最小子序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1403.-%E9%9D%9E%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Thu, 04 Aug 2022 10:04:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1403.-%E9%9D%9E%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode.cn/problems/minimum-subsequence-in-non-increasing-order/
难度： 简单
题目描述 给你一个数组 nums，请你从中抽取一个子序列，满足该子序列的元素之和 严格 大于未包含在该子序列中的各元素之和。
如果存在多个解决方案，只需返回 长度最小 的子序列。如果仍然有多个解决方案，则返回 元素之和最大 的子序列。
与子数组不同的地方在于，「数组的子序列」不强调元素在原数组中的连续性，也就是说，它可以通过从数组中分离一些（也可能不分离）元素得到。
注意，题目数据保证满足所有约束条件的解决方案是 唯一 的。同时，返回的答案应当按 非递增顺序 排列。
示例 1： 输入： nums = [4,3,10,9,8]
输出： [10,9]
解释： 子序列 [10,9] 和 [10,8] 是最小的、满足元素之和大于其他各元素之和的子序列。但是 [10,9] 的元素之和最大。 示例 2： 输入： nums = [4,4,7,6,7]
输出： [7,7,6]
解释： 子序列 [7,7] 的和为 14 ，不严格大于剩下的其他元素之和（14 = 4 + 4 + 6）。因此，[7,6,7] 是满足题意的最小子序列。注意，元素按非递增顺序返回。
示例 3： 输入： nums = [6]
输出： [6]
提示： 1 &amp;lt;= nums.length &amp;lt;= 500 1 &amp;lt;= nums[i] &amp;lt;= 100 解题思路 贪心（排序） 为使得子序列的长度最小，优先挑选值比较大的元素。</description>
    </item>
    
    <item>
      <title>Leetcode 899. 有序队列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-899.-%E6%9C%89%E5%BA%8F%E9%98%9F%E5%88%97/</link>
      <pubDate>Thu, 04 Aug 2022 09:52:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-899.-%E6%9C%89%E5%BA%8F%E9%98%9F%E5%88%97/</guid>
      <description>链接： https://leetcode.cn/problems/orderly-queue/
难度： 困难
题目描述 给定一个字符串 s 和一个整数 k 。你可以从 s 的前 k 个字母中选择一个，并把它加到字符串的末尾。
返回 在应用上述步骤的任意数量的移动后，字典上最小的字符串 。
示例 1： 输入： s = &amp;ldquo;cba&amp;rdquo;, k = 1
输出： &amp;ldquo;acb&amp;rdquo;
解释：
在第一步中，我们将第一个字符（“c”）移动到最后，获得字符串 “bac”。
在第二步中，我们将第一个字符（“b”）移动到最后，获得最终结果 “acb”。
示例 2： 输入： s = &amp;ldquo;baaca&amp;rdquo;, k = 3
输出： &amp;ldquo;aaabc&amp;rdquo;
解释：
在第一步中，我们将第一个字符（“b”）移动到最后，获得字符串 “aacab”。
在第二步中，我们将第三个字符（“c”）移动到最后，获得最终结果 “aaabc”。
提示： 1 &amp;lt;= k &amp;lt;= S.length &amp;lt;= 1000 s 只由小写字母组成。 解题思路 分类讨论 对于 k = 1 的情况，将字符串首尾连接组成环，每个字符的相对位置不会改变，所以需要找寻某个位置开始绕环一周的最小字符串。
对于 k &amp;gt; 1 的情况，可以将某个字符移动到任意相对位置，故总可以将其变为升序，返回排序后的结果即可。</description>
    </item>
    
    <item>
      <title>Leetcode 622. 设计循环队列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-622.-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Tue, 02 Aug 2022 09:54:57 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-622.-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</guid>
      <description>链接： https://leetcode.cn/problems/design-circular-queue/
难度： 中等
题目描述 设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。
循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。
你的实现应该支持如下操作：
MyCircularQueue(k): 构造器，设置队列长度为 k 。 Front: 从队首获取元素。如果队列为空，返回 -1 。 Rear: 获取队尾元素。如果队列为空，返回 -1 。 enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。 deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。 isEmpty(): 检查循环队列是否为空。 isFull(): 检查循环队列是否已满。 示例： MyCircularQueue circularQueue = new MyCircularQueue(3); // 设置长度为 3 circularQueue.enQueue(1); // 返回 true circularQueue.enQueue(2); // 返回 true circularQueue.enQueue(3); // 返回 true circularQueue.enQueue(4); // 返回 false，队列已满 circularQueue.Rear(); // 返回 3 circularQueue.isFull(); // 返回 true circularQueue.deQueue(); // 返回 true circularQueue.enQueue(4); // 返回 true circularQueue.</description>
    </item>
    
    <item>
      <title>Leetcode 1374. 生成每种字符都是奇数个的字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1374.-%E7%94%9F%E6%88%90%E6%AF%8F%E7%A7%8D%E5%AD%97%E7%AC%A6%E9%83%BD%E6%98%AF%E5%A5%87%E6%95%B0%E4%B8%AA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Aug 2022 09:40:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1374.-%E7%94%9F%E6%88%90%E6%AF%8F%E7%A7%8D%E5%AD%97%E7%AC%A6%E9%83%BD%E6%98%AF%E5%A5%87%E6%95%B0%E4%B8%AA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode.cn/problems/generate-a-string-with-characters-that-have-odd-counts/
难度： 简单
题目描述 给你一个整数 n，请你返回一个含 n 个字符的字符串，其中每种字符在该字符串中都恰好出现 奇数次 。
返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。
示例 1： 输入： n = 4
输出： &amp;ldquo;pppz&amp;rdquo;
解释： &amp;ldquo;pppz&amp;rdquo; 是一个满足题目要求的字符串，因为 &amp;lsquo;p&amp;rsquo; 出现 3 次，且 &amp;lsquo;z&amp;rsquo; 出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&amp;ldquo;ohhh&amp;rdquo; 和 &amp;ldquo;love&amp;rdquo;。
示例 2： 输入： n = 2
输出： &amp;ldquo;xy&amp;rdquo;
解释： &amp;ldquo;xy&amp;rdquo; 是一个满足题目要求的字符串，因为 &amp;lsquo;x&amp;rsquo; 和 &amp;lsquo;y&amp;rsquo; 各出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&amp;ldquo;ag&amp;rdquo; 和 &amp;ldquo;ur&amp;rdquo;。
示例 3： 输入： n = 7
输出： &amp;ldquo;holasss&amp;rdquo;
提示： 1 &amp;lt;= n &amp;lt;= 500 解题思路 分类讨论 当 n 为奇数时，全部用同一个字母 a；若为偶数时，前 n - 1 个字母为 a ，最后跟一个 b。</description>
    </item>
    
    <item>
      <title>Leetcode 1161. 最大层内元素和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1161.-%E6%9C%80%E5%A4%A7%E5%B1%82%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C/</link>
      <pubDate>Sun, 31 Jul 2022 09:39:44 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1161.-%E6%9C%80%E5%A4%A7%E5%B1%82%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C/</guid>
      <description>链接： https://leetcode.cn/problems/maximum-level-sum-of-a-binary-tree/
难度： 中等
题目描述 给你一个二叉树的根节点 root。设根节点位于二叉树的第 1 层，而根节点的子节点位于第 2 层，依此类推。
请返回层内元素之和 最大 的那几层（可能只有一层）的层号，并返回其中 最小 的那个。
示例 1： 输入： root = [1,7,0,7,-8,null,null]
输出： 2
解释：
第 1 层各元素之和为 1，
第 2 层各元素之和为 7 + 0 = 7，
第 3 层各元素之和为 7 + -8 = -1，
所以我们返回第 2 层的层号，它的层内元素之和最大。
示例 2： 输入： root = [989,null,10250,98693,-89388,null,null,null,-32127]
输出： 2
提示： 树中的节点数在 [1, 104] 范围内 -105 &amp;lt;= Node.val &amp;lt;= 105 解题思路 层序遍历 层序遍历，求得每层节点元素和，找出最大的那一层。
func maxLevelSum(root *TreeNode) int { q := list.</description>
    </item>
    
    <item>
      <title>Leetcode 952. 按公因数计算最大组件大小</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-952.-%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Sat, 30 Jul 2022 13:52:50 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-952.-%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F/</guid>
      <description>链接： https://leetcode.cn/problems/largest-component-size-by-common-factor/
难度： 困难
题目描述 给定一个由不同正整数的组成的非空数组 nums ，考虑下面的图：
有 nums.length 个节点，按从 nums[0] 到 nums[nums.length - 1] 标记； 只有当 nums[i] 和 nums[j] 共用一个大于 1 的公因数时，nums[i] 和 nums[j] 之间才有一条边。 返回 图中最大连通组件的大小 。
示例 1： 输入： nums = [4,6,15,35]
输出： 4
示例 2： 输入： nums = [20,50,9,63]
输出： 2
示例 3： 输入： nums = [2,3,6,7,4,12,21,39]
输出： 8
提示： 1 &amp;lt;= nums.length &amp;lt;= 2 * 104 1 &amp;lt;= nums[i] &amp;lt;= 105 nums 中所有值都 不同 解题思路 并查集 a 和 b 连通，则与 a 连通的所有元素和与 c 连通的所有元素均处于一个连通集中，典型的并查集题目。</description>
    </item>
    
    <item>
      <title>Leetcode 593. 有效的正方形</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-593.-%E6%9C%89%E6%95%88%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2/</link>
      <pubDate>Fri, 29 Jul 2022 10:02:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-593.-%E6%9C%89%E6%95%88%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2/</guid>
      <description>链接： https://leetcode.cn/problems/valid-square/
难度： 中等
题目描述 给定2D空间中四个点的坐标 p1, p2, p3 和 p4，如果这四个点构成一个正方形，则返回 true 。
点的坐标 pi 表示为 [xi, yi] 。输入 不是 按任何顺序给出的。
一个 有效的正方形 有四条等边和四个等角(90度角)。
示例 1： 输入： p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
输出： True
示例 2： 输入： p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]
输出： false
示例 3： 输入： p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]</description>
    </item>
    
    <item>
      <title>Leetcode 1331. 数组序号转换</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1331.-%E6%95%B0%E7%BB%84%E5%BA%8F%E5%8F%B7%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Thu, 28 Jul 2022 09:45:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1331.-%E6%95%B0%E7%BB%84%E5%BA%8F%E5%8F%B7%E8%BD%AC%E6%8D%A2/</guid>
      <description>链接： https://leetcode.cn/problems/rank-transform-of-an-array/
难度： 简单
题目描述 给你一个整数数组 arr ，请你将数组中的每个元素替换为它们排序后的序号。
序号代表了一个元素有多大。序号编号的规则如下：
序号从 1 开始编号。 一个元素越大，那么序号越大。如果两个元素相等，那么它们的序号相同。 每个数字的序号都应该尽可能地小。 示例 1： 输入： arr = [40,10,20,30]
输出： [4,1,2,3]
解释： 40 是最大的元素。 10 是最小的元素。 20 是第二小的数字。 30 是第三小的数字。
示例 2： 输入： arr = [100,100,100]
输出： [1,1,1]
解释： 所有元素有相同的序号。
示例 3： 输入： arr = [37,12,28,9,100,56,80,5,12]
输出： [5,3,4,2,8,6,7,1,3]
提示： 0 &amp;lt;= arr.length &amp;lt;= 105 -109 &amp;lt;= arr[i] &amp;lt;= 109 解题思路 排序 &amp;amp; 哈希 按照元素大小进行一轮排序，然后使用哈希表去重并记录元素的序号。
最后按照原来的元素顺序查表得到结果。
func arrayRankTransform(arr []int) []int { ans := make([]int, len(arr)) copy(ans, arr) sort.</description>
    </item>
    
    <item>
      <title>Leetcode 592. 分数加减运算</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-592.-%E5%88%86%E6%95%B0%E5%8A%A0%E5%87%8F%E8%BF%90%E7%AE%97/</link>
      <pubDate>Wed, 27 Jul 2022 10:06:50 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-592.-%E5%88%86%E6%95%B0%E5%8A%A0%E5%87%8F%E8%BF%90%E7%AE%97/</guid>
      <description>链接： https://leetcode.cn/problems/fraction-addition-and-subtraction/
难度： 中等
题目描述 给定一个表示分数加减运算的字符串 expression ，你需要返回一个字符串形式的计算结果。 这个结果应该是不可约分的分数，即最简分数。 如果最终结果是一个整数，例如 2，你需要将它转换成分数形式，其分母为 1。所以在上述例子中, 2 应该被转换为 2/1。
示例 1： 输入： expression = &amp;ldquo;-1/2+1/2&amp;rdquo;
输出： &amp;ldquo;0/1&amp;rdquo;
示例 2： 输入： expression = &amp;ldquo;-1/2+1/2+1/3&amp;rdquo;
输出： &amp;ldquo;1/3&amp;rdquo;
示例 3： 输入： expression = &amp;ldquo;1/3-1/2&amp;rdquo;
输出： &amp;ldquo;-1/6&amp;rdquo;
提示： 输入和输出字符串只包含 &#39;0&#39; 到 &#39;9&#39; 的数字，以及 &#39;/&#39;, &#39;+&#39; 和 &#39;-&#39;。 输入和输出分数格式均为 ±分子/分母。如果输入的第一个分数或者输出的分数是正数，则 &#39;+&#39; 会被省略掉。 输入只包含合法的最简分数，每个分数的分子与分母的范围是 [1,10]。 如果分母是 1，意味着这个分数实际上是一个整数。 输入的分数个数范围是 [1,10]。 最终结果的分子与分母保证是 32 位整数范围内的有效整数。 解题思路 模拟 识别出每个分数的分子和分母，做累计求和运算，每次运算后进行约分。
func fractionAddition(expression string) string { sum := &amp;amp;frac{ numerator: 0, denominator: 1, } for i := 0; i &amp;lt; len(expression); { newFrac := new(frac) // 识别分子 j := i for ; j &amp;lt; len(expression) &amp;amp;&amp;amp; (expression[j] &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; expression[j] &amp;lt;= &amp;#39;9&amp;#39; || expression[j] == &amp;#39;+&amp;#39; || expression[j] == &amp;#39;-&amp;#39;); j++ { } newFrac.</description>
    </item>
    
    <item>
      <title>Leetcode 1206. 设计跳表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1206.-%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8/</link>
      <pubDate>Tue, 26 Jul 2022 20:06:39 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1206.-%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8/</guid>
      <description>链接： https://leetcode.cn/problems/design-skiplist/
难度： 困难
题目描述 不使用任何库函数，设计一个 跳表 。
跳表 是在 O(log(n)) 时间内完成增加、删除、搜索操作的数据结构。跳表相比于树堆与红黑树，其功能与性能相当，并且跳表的代码长度相较下更短，其设计思想与链表相似。
例如，一个跳表包含 [30, 40, 50, 60, 70, 90] ，然后增加 80、45 到跳表中，以下图的方式操作：
Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons
跳表中有很多层，每一层是一个短的链表。在第一层的作用下，增加、删除和搜索操作的时间复杂度不超过 O(n)。跳表的每一个操作的平均时间复杂度是 O(log(n))，空间复杂度是 O(n)。
了解更多 : https://en.wikipedia.org/wiki/Skip_list
在本题中，你的设计应该要包含这些函数：
bool search(int target): 返回 target 是否存在于跳表中。 void add(int num): 插入一个元素到跳表。 bool erase(int num): 在跳表中删除一个值，如果 num 不存在，直接返回 false. 如果存在多个 num ，删除其中任意一个即可。 注意，跳表中可能存在多个相同的值，你的代码需要处理这种情况。
示例： 输入
[&amp;ldquo;Skiplist&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;search&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;search&amp;rdquo;, &amp;ldquo;erase&amp;rdquo;, &amp;ldquo;erase&amp;rdquo;, &amp;ldquo;search&amp;rdquo;]</description>
    </item>
    
    <item>
      <title>Leetcode 919. 完全二叉树插入器</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-919.-%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E6%8F%92%E5%85%A5%E5%99%A8/</link>
      <pubDate>Mon, 25 Jul 2022 20:31:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-919.-%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E6%8F%92%E5%85%A5%E5%99%A8/</guid>
      <description>链接： https://leetcode.cn/problems/complete-binary-tree-inserter/
难度： 简单
题目描述 完全二叉树 是每一层（除最后一层外）都是完全填充（即，节点数达到最大）的，并且所有的节点都尽可能地集中在左侧。
设计一种算法，将一个新节点插入到一个完整的二叉树中，并在插入后保持其完整。
实现 CBTInserter 类:
CBTInserter(TreeNode root) 使用头节点为 root 的给定树初始化该数据结构； CBTInserter.insert(int v) 向树中插入一个值为 Node.val == val 的新节点 TreeNode。使树保持完全二叉树的状态，并返回插入节点 TreeNode 的父节点的值； CBTInserter.get_root() 将返回树的头节点。 示例： 输入：
[&amp;ldquo;CBTInserter&amp;rdquo;, &amp;ldquo;insert&amp;rdquo;, &amp;ldquo;insert&amp;rdquo;, &amp;ldquo;get_root&amp;rdquo;]
[[[1, 2]], [3], [4], []]
输出：
[null, 1, 2, [1, 2, 3, 4]]
解释：
CBTInserter cBTInserter = new CBTInserter([1, 2]);
cBTInserter.insert(3); // 返回 1
cBTInserter.insert(4); // 返回 2
cBTInserter.get_root(); // 返回 [1, 2, 3, 4]
提示： 树中节点数量范围为 [1, 1000] 0 &amp;lt;= Node.</description>
    </item>
    
    <item>
      <title>Leetcode 1184. 公交站间的距离</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1184.-%E5%85%AC%E4%BA%A4%E7%AB%99%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB/</link>
      <pubDate>Sun, 24 Jul 2022 12:04:02 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1184.-%E5%85%AC%E4%BA%A4%E7%AB%99%E9%97%B4%E7%9A%84%E8%B7%9D%E7%A6%BB/</guid>
      <description>链接： https://leetcode.cn/problems/distance-between-bus-stops/
难度： 简单
题目描述 环形公交路线上有 n 个站，按次序从 0 到 n - 1 进行编号。我们已知每一对相邻公交站之间的距离，distance[i] 表示编号为 i 的车站和编号为 (i + 1) % n 的车站之间的距离。
环线上的公交车都可以按顺时针和逆时针的方向行驶。
返回乘客从出发点 start 到目的地 destination 之间的最短距离。
示例 1： 输入： distance = [1,2,3,4], start = 0, destination = 1
输出： 1
解释： 公交站 0 和 1 之间的距离是 1 或 9，最小值是 1。
示例 2： 输入： distance = [1,2,3,4], start = 0, destination = 2
输出： 3
解释： 公交站 0 和 2 之间的距离是 3 或 7，最小值是 3。</description>
    </item>
    
    <item>
      <title>剑指 Offer II 115. 重建序列</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-115.-%E9%87%8D%E5%BB%BA%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sat, 23 Jul 2022 10:39:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-115.-%E9%87%8D%E5%BB%BA%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode.cn/problems/ur2n8P/
难度： 中等
题目描述 给定一个长度为 n 的整数数组 nums ，其中 nums 是范围为 [1，n] 的整数的排列。还提供了一个 2D 整数数组 sequences ，其中 sequences[i] 是 nums 的子序列。
检查 nums 是否是唯一的最短 超序列 。最短 超序列 是 长度最短 的序列，并且所有序列 sequences[i] 都是它的子序列。对于给定的数组 sequences ，可能存在多个有效的 超序列 。
例如，对于 sequences = [[1,2],[1,3]] ，有两个最短的 超序列 ，[1,2,3] 和 [1,3,2] 。 而对于 sequences = [[1,2],[1,3],[1,2,3]] ，唯一可能的最短 超序列 是 [1,2,3] 。[1,2,3,4] 是可能的超序列，但不是最短的。 如果 nums 是序列的唯一最短 超序列 ，则返回 true ，否则返回 false 。
子序列 是一个可以通过从另一个序列中删除一些元素或不删除任何元素，而不改变其余元素的顺序的序列。
示例 1： 输入： nums = [1,2,3], sequences = [[1,2],[1,3]]</description>
    </item>
    
    <item>
      <title>Leetcode 814. 二叉树剪枝</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-814.-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/</link>
      <pubDate>Thu, 21 Jul 2022 10:04:18 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-814.-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/</guid>
      <description>链接： https://leetcode.cn/problems/binary-tree-pruning/
难度： 中等
题目描述 给你二叉树的根结点 root ，此外树的每个结点的值要么是 0 ，要么是 1 。
返回移除了所有不包含 1 的子树的原二叉树。
节点 node 的子树为 node 本身加上所有 node 的后代。
示例 1： 输入： root = [1,null,0,0,1]
输出： [1,null,0,null,1]
解释：
只有红色节点满足条件“所有不包含 1 的子树”。 右图为返回的答案。
示例 2： 输入： root = [1,0,1,0,0,0,1]
输出： [1,null,1,null,1]
示例 3： 输入： root = [1,1,0,1,1,0,1,0]
输出： [1,1,0,1,1,null,1]
提示： 树中节点的数目在范围 [1, 200] 内 Node.val 为 0 或 1 解题思路 递归 不包含 1 的子树，换言之就是子树中所有节点的值全部为 0，则不断删除值为 0 的叶结点即可。
func pruneTree(root *TreeNode) *TreeNode { if root == nil { return nil } root.</description>
    </item>
    
    <item>
      <title>Leetcode 1260. 二维网格迁移</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1260.-%E4%BA%8C%E7%BB%B4%E7%BD%91%E6%A0%BC%E8%BF%81%E7%A7%BB/</link>
      <pubDate>Wed, 20 Jul 2022 09:39:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1260.-%E4%BA%8C%E7%BB%B4%E7%BD%91%E6%A0%BC%E8%BF%81%E7%A7%BB/</guid>
      <description>链接： https://leetcode.cn/problems/shift-2d-grid/
难度： 简单
题目描述 给你一个 m 行 n 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。
每次「迁移」操作将会引发下述活动：
位于 grid[i][j] 的元素将会移动到 grid[i][j + 1]。 位于 grid[i][n - 1] 的元素将会移动到 grid[i + 1][0]。 位于 grid[m - 1][n - 1] 的元素将会移动到 grid[0][0]。 请你返回 k 次迁移操作后最终得到的 二维网格。
示例 1： 输入： grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
输出： [[9,1,2],[3,4,5],[6,7,8]]
示例 2： 输入： grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
输出： [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]
示例 3： 输入： grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9</description>
    </item>
    
    <item>
      <title>Leetcode 731. 我的日程安排表 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-731.-%E6%88%91%E7%9A%84%E6%97%A5%E7%A8%8B%E5%AE%89%E6%8E%92%E8%A1%A8-ii/</link>
      <pubDate>Tue, 19 Jul 2022 09:20:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-731.-%E6%88%91%E7%9A%84%E6%97%A5%E7%A8%8B%E5%AE%89%E6%8E%92%E8%A1%A8-ii/</guid>
      <description>链接： https://leetcode.cn/problems/my-calendar-ii/
难度： 中等
题目描述 实现一个 MyCalendar 类来存放你的日程安排。如果要添加的时间内不会导致三重预订时，则可以存储这个新的日程安排。
MyCalendar 有一个 book(int start, int end) 方法。它意味着在 start 到 end 时间内增加一个日程安排，注意，这里的时间是半开区间，即 [start, end), 实数 x 的范围为, start &amp;lt;= x &amp;lt; end 。
当三个日程安排有一些时间上的交叉时（例如三个日程安排都在同一时间内），就会产生三重预订。
每次调用 MyCalendar.book 方法时，如果可以将日程安排成功添加到日历中而不会导致三重预订，返回 true。否则，返回 false 并且不要将该日程安排添加到日历中。
请按照以下步骤调用 MyCalendar 类: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)
示例： MyCalendar();
MyCalendar.book(10, 20); // returns true
MyCalendar.book(50, 60); // returns true
MyCalendar.book(10, 40); // returns true
MyCalendar.book(5, 15); // returns false
MyCalendar.book(5, 10); // returns true</description>
    </item>
    
    <item>
      <title>Leetcode 565. 数组嵌套</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-565.-%E6%95%B0%E7%BB%84%E5%B5%8C%E5%A5%97/</link>
      <pubDate>Sun, 17 Jul 2022 09:17:02 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-565.-%E6%95%B0%E7%BB%84%E5%B5%8C%E5%A5%97/</guid>
      <description>链接： https://leetcode.cn/problems/array-nesting/
难度： 简单
题目描述 索引从 0 开始长度为 N 的数组 A，包含 0 到 N - 1 的所有整数。找到最大的集合 S 并返回其大小，其中 S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } 且遵守以下的规则。
假设选择索引为 i 的元素 A[i] 为 S 的第一个元素，S 的下一个元素应该是 A[A[i]]，之后是 A[A[A[i]]]... 以此类推，不断添加直到 S 出现重复的元素。
示例： 输入： A = [5,4,0,3,1,6,2]
输出： 4
解释：
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.
其中一种最长的 S[K]:</description>
    </item>
    
    <item>
      <title>剑指 Offer II 041. 滑动窗口的平均值</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-041.-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E5%B9%B3%E5%9D%87%E5%80%BC/</link>
      <pubDate>Sat, 16 Jul 2022 10:23:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-041.-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E5%B9%B3%E5%9D%87%E5%80%BC/</guid>
      <description>链接： https://leetcode.cn/problems/qIsx9U/
难度： 简单
题目描述 给定一个整数数据流和一个窗口大小，根据该滑动窗口的大小，计算滑动窗口里所有数字的平均值。
实现 MovingAverage 类：
MovingAverage(int size) 用窗口大小 size 初始化对象。 double next(int val) 成员函数 next 每次调用的时候都会往滑动窗口增加一个整数，请计算并返回数据流中最后 size 个值的移动平均值，即滑动窗口里所有数字的平均值。 示例： 输入：
inputs = [&amp;ldquo;MovingAverage&amp;rdquo;, &amp;ldquo;next&amp;rdquo;, &amp;ldquo;next&amp;rdquo;, &amp;ldquo;next&amp;rdquo;, &amp;ldquo;next&amp;rdquo;]
inputs = [[3], [1], [10], [3], [5]]
输出：
[null, 1.0, 5.5, 4.66667, 6.0]
解释：
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // 返回 1.0 = 1 / 1
movingAverage.next(10); // 返回 5.5 = (1 + 10) / 2
movingAverage.next(3); // 返回 4.</description>
    </item>
    
    <item>
      <title>Leetcode 558. 四叉树交集</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-558.-%E5%9B%9B%E5%8F%89%E6%A0%91%E4%BA%A4%E9%9B%86/</link>
      <pubDate>Fri, 15 Jul 2022 10:17:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-558.-%E5%9B%9B%E5%8F%89%E6%A0%91%E4%BA%A4%E9%9B%86/</guid>
      <description>链接： https://leetcode.cn/problems/logical-or-of-two-binary-grids-represented-as-quad-trees/
难度： 中等
题目描述 二进制矩阵中的所有元素不是 0 就是 1 。
给你两个四叉树，quadTree1 和 quadTree2。其中 quadTree1 表示一个 n * n 二进制矩阵，而 quadTree2 表示另一个 n * n 二进制矩阵。
请你返回一个表示 n * n 二进制矩阵的四叉树，它是 quadTree1 和 quadTree2 所表示的两个二进制矩阵进行 按位逻辑或运算 的结果。
注意，当 isLeaf 为 False 时，你可以把 True 或者 False 赋值给节点，两种值都会被判题机制 接受 。
四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：
val：储存叶子结点所代表的区域的值。1 对应 True，0 对应 False； isLeaf: 当这个节点是一个叶子结点时为 True，如果它有 4 个子节点则为 False 。 class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; } 我们可以按以下步骤为二维区域构建四叉树：</description>
    </item>
    
    <item>
      <title>Leetcode 745. 前缀和后缀搜索</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-745.-%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Thu, 14 Jul 2022 10:11:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-745.-%E5%89%8D%E7%BC%80%E5%92%8C%E5%90%8E%E7%BC%80%E6%90%9C%E7%B4%A2/</guid>
      <description>链接： https://leetcode.cn/problems/prefix-and-suffix-search/
难度： 困难
题目描述 设计一个包含一些单词的特殊词典，并能够通过前缀和后缀来检索单词。
实现 WordFilter 类： WordFilter(string[] words) 使用词典中的单词 words 初始化对象。 f(string pref, string suff) 返回词典中具有前缀 prefix 和后缀 suff 的单词的下标。如果存在不止一个满足要求的下标，返回其中 最大的下标 。如果不存在这样的单词，返回 -1 。 示例 1： 输入：
[&amp;ldquo;WordFilter&amp;rdquo;, &amp;ldquo;f&amp;rdquo;]
[[[&amp;ldquo;apple&amp;rdquo;]], [&amp;ldquo;a&amp;rdquo;, &amp;ldquo;e&amp;rdquo;]]
输出：
[null, 0]
解释：
WordFilter wordFilter = new WordFilter([&amp;ldquo;apple&amp;rdquo;]);
wordFilter.f(&amp;ldquo;a&amp;rdquo;, &amp;ldquo;e&amp;rdquo;); // 返回 0 ，因为下标为 0 的单词：前缀 prefix = &amp;ldquo;a&amp;rdquo; 且 后缀 suff = &amp;ldquo;e&amp;rdquo; 。
提示： 2 &amp;lt;= letters.length &amp;lt;= 104 letters[i] 是一个小写字母 letters 按非递减顺序排序 letters 最少包含两个不同的字母 target 是一个小写字母 解题思路 哈希 由于字符串的长度很小，可以解析出所有能与之匹配的前后缀模式串，并记录该模式串对应的下标最大值到哈希表中。</description>
    </item>
    
    <item>
      <title>Leetcode 735. 行星碰撞</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-735.-%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E/</link>
      <pubDate>Wed, 13 Jul 2022 21:10:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-735.-%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E/</guid>
      <description>链接： https://leetcode.cn/problems/asteroid-collision/
难度： 中等
题目描述 给定一个整数数组 asteroids，表示在同一行的行星。
对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示向左移动）。每一颗行星以相同的速度移动。
找出碰撞后剩下的所有行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。
示例 1： 输入： asteroids = [5,10,-5]
输出： [5,10]
解释： 10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。
示例 2： 输入： asteroids = [8,-8]
输出： []
解释： 8 和 -8 碰撞后，两者都发生爆炸。
示例 3： 输入： asteroids = [10,2,-5]
输出： [10]
解释： 2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。
提示： 2 &amp;lt;= asteroids.length &amp;lt;= 104 -1000 &amp;lt;= asteroids[i] &amp;lt;= 1000 asteroids[i] !</description>
    </item>
    
    <item>
      <title>Leetcode 1252. 奇数值单元格的数目</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1252.-%E5%A5%87%E6%95%B0%E5%80%BC%E5%8D%95%E5%85%83%E6%A0%BC%E7%9A%84%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Tue, 12 Jul 2022 20:58:51 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1252.-%E5%A5%87%E6%95%B0%E5%80%BC%E5%8D%95%E5%85%83%E6%A0%BC%E7%9A%84%E6%95%B0%E7%9B%AE/</guid>
      <description>链接： https://leetcode.cn/problems/cells-with-odd-values-in-a-matrix/
难度： 简单
题目描述 给你一个 m x n 的矩阵，最开始的时候，每个单元格中的值都是 0。
另有一个二维索引数组 indices，indices[i] = [ri, ci] 指向矩阵中的某个位置，其中 ri 和 ci 分别表示指定的行和列（从 0 开始编号）。
对 indices[i] 所指向的每个位置，应同时执行下述增量操作：
ri 行上的所有单元格，加 1 。 ci 列上的所有单元格，加 1 。 给你 m、n 和 indices 。请你在执行完所有 indices 指定的增量操作后，返回矩阵中 奇数值单元格 的数目。
示例 1： 输入： m = 2, n = 3, indices = [[0,1],[1,1]]
输出： 6
解释： 最开始的矩阵是 [[0,0,0],[0,0,0]]。
第一次增量操作后得到 [[1,2,1],[0,1,0]]。
最后的矩阵是 [[1,3,1],[1,3,1]]，里面有 6 个奇数。
示例 2： 输入： m = 2, n = 2, indices = [[1,1],[0,0]]</description>
    </item>
    
    <item>
      <title>Leetcode 676. 实现一个魔法字典</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-676.-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AD%94%E6%B3%95%E5%AD%97%E5%85%B8/</link>
      <pubDate>Mon, 11 Jul 2022 10:03:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-676.-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%AD%94%E6%B3%95%E5%AD%97%E5%85%B8/</guid>
      <description>链接： https://leetcode.cn/problems/implement-magic-dictionary/
难度： 中等
题目描述 设计一个使用单词列表进行初始化的数据结构，单词列表中的单词 互不相同 。 如果给出一个单词，请判定能否只将这个单词中一个字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。
实现 MagicDictionary 类：
MagicDictionary() 初始化对象 void buildDict(String[] dictionary) 使用字符串数组 dictionary 设定该数据结构，dictionary 中的字符串互不相同 bool search(String searchWord) 给定一个字符串 searchWord ，判定能否只将字符串中 一个 字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回 true ；否则，返回 false 。 示例： 输入：
[&amp;ldquo;MagicDictionary&amp;rdquo;, &amp;ldquo;buildDict&amp;rdquo;, &amp;ldquo;search&amp;rdquo;, &amp;ldquo;search&amp;rdquo;, &amp;ldquo;search&amp;rdquo;, &amp;ldquo;search&amp;rdquo;]
[[], [[&amp;ldquo;hello&amp;rdquo;, &amp;ldquo;leetcode&amp;rdquo;]], [&amp;ldquo;hello&amp;rdquo;], [&amp;ldquo;hhllo&amp;rdquo;], [&amp;ldquo;hell&amp;rdquo;], [&amp;ldquo;leetcoded&amp;rdquo;]]
输出：
[null, null, false, true, false, false]
解释：
MagicDictionary magicDictionary = new MagicDictionary();
magicDictionary.buildDict([&amp;ldquo;hello&amp;rdquo;, &amp;ldquo;leetcode&amp;rdquo;]);
magicDictionary.search(&amp;ldquo;hello&amp;rdquo;); // 返回 False
magicDictionary.search(&amp;ldquo;hhllo&amp;rdquo;); // 将第二个 &amp;lsquo;h&amp;rsquo; 替换为 &amp;rsquo;e&amp;rsquo; 可以匹配 &amp;ldquo;hello&amp;rdquo; ，所以返回 True</description>
    </item>
    
    <item>
      <title>Leetcode 873. 最长的斐波那契子序列的长度</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-873.-%E6%9C%80%E9%95%BF%E7%9A%84%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Sat, 09 Jul 2022 09:42:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-873.-%E6%9C%80%E9%95%BF%E7%9A%84%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E9%95%BF%E5%BA%A6/</guid>
      <description>链接： https://leetcode.cn/problems/length-of-longest-fibonacci-subsequence/
难度： 中等
题目描述 如果序列 X_1, X_2, ..., X_n 满足下列条件，就说它是 斐波那契式 的：
n &amp;gt;= 3 对于所有 i + 2 &amp;lt;= n，都有 X_i + X_{i+1} = X_{i+2} 给定一个 严格递增 的正整数数组形成序列 arr ，找到 arr 中最长的斐波那契式的子序列的长度。如果一个不存在，返回 0 。
（回想一下，子序列是从原序列 arr 中派生出来的，它从 arr 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， [3, 5, 8] 是 [3, 4, 5, 6, 7, 8] 的一个子序列）
示例 1： 输入： arr = [1,2,3,4,5,6,7,8]
输出： 5
解释： 最长的斐波那契式子序列为 [1,2,3,5,8] 。
示例 2： 输入： arr = [1,3,7,11,12,14,18]</description>
    </item>
    
    <item>
      <title>Leetcode 1217. 玩筹码</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1217.-%E7%8E%A9%E7%AD%B9%E7%A0%81/</link>
      <pubDate>Fri, 08 Jul 2022 10:33:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1217.-%E7%8E%A9%E7%AD%B9%E7%A0%81/</guid>
      <description>链接： https://leetcode.cn/problems/minimum-absolute-difference/
难度： 简单
题目描述 有 n 个筹码。第 i 个筹码的位置是 position[i] 。
我们需要把所有筹码移到同一个位置。在一步中，我们可以将第 i 个筹码的位置从 position[i] 改变为:
position[i] + 2 或 position[i] - 2 ，此时 cost = 0 position[i] + 1 或 position[i] - 1 ，此时 cost = 1 返回将所有筹码移动到同一位置上所需要的 最小代价 。
示例 1： 输入： position = [1,2,3]
输出： 1
解释： 第一步:将位置3的筹码移动到位置1，成本为0。
第二步:将位置2的筹码移动到位置1，成本= 1。
总成本是1。
示例 2： 输入： position = [2,2,2,3,3]
输出： 2
解释： 我们可以把位置3的两个筹码移到位置2。每一步的成本为1。总成本= 2。
示例 3： 输入： position = [1,1000000000]</description>
    </item>
    
    <item>
      <title>Leetcode 648. 单词替换</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-648.-%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2/</link>
      <pubDate>Thu, 07 Jul 2022 10:14:37 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-648.-%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2/</guid>
      <description>链接： https://leetcode.cn/problems/replace-words/
难度： 中等
题目描述 在英语中，我们有一个叫做 词根(root) 的概念，可以词根后面添加其他一些词组成另一个较长的单词——我们称这个词为 继承词(successor)。例如，词根 an，跟随着单词 other (其他)，可以形成新的单词 another (另一个)。
现在，给定一个由许多词根组成的词典 dictionary 和一个用空格分隔单词形成的句子 sentence。你需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。
你需要输出替换之后的句子。
示例 1： 输入： dictionary = [&amp;ldquo;cat&amp;rdquo;,&amp;ldquo;bat&amp;rdquo;,&amp;ldquo;rat&amp;rdquo;], sentence = &amp;ldquo;the cattle was rattled by the battery&amp;rdquo;
输出： &amp;ldquo;the cat was rat by the bat&amp;rdquo;
示例 2： 输入： dictionary = [&amp;ldquo;a&amp;rdquo;,&amp;ldquo;b&amp;rdquo;,&amp;ldquo;c&amp;rdquo;], sentence = &amp;ldquo;aadsfasf absbs bbab cadsfafs&amp;rdquo;
输出： &amp;ldquo;a a b c&amp;rdquo;
提示： 1 &amp;lt;= dictionary.length &amp;lt;= 1000 1 &amp;lt;= dictionary[i].length &amp;lt;= 100 dictionary[i] 仅由小写字母组成。 1 &amp;lt;= sentence.</description>
    </item>
    
    <item>
      <title>Leetcode 736. Lisp 语法解析</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-736.-lisp-%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 06 Jul 2022 19:31:29 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-736.-lisp-%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90/</guid>
      <description>链接： https://leetcode.cn/problems/parse-lisp-expression/
难度： 困难
题目描述 给你一个类似 Lisp 语句的字符串表达式 expression，求出其计算结果。
表达式语法如下所示:
表达式可以为整数，let 表达式，add 表达式，mult 表达式，或赋值的变量。表达式的结果总是一个整数。 (整数可以是正整数、负整数、0) let 表达式采用 &amp;quot;(let v1 e1 v2 e2 ... vn en expr)&amp;quot; 的形式，其中 let 总是以字符串 &amp;quot;let&amp;quot; 来表示，接下来会跟随一对或多对交替的变量和表达式，也就是说，第一个变量 v1 被分配为表达式 e1 的值，第二个变量 v2 被分配为表达式 e2 的值，依次类推；最终 let 表达式的值为 expr 表达式的值。 add 表达式表示为 &amp;quot;(add e1 e2)&amp;quot; ，其中 add 总是以字符串 &amp;quot;add&amp;quot; 来表示，该表达式总是包含两个表达式 e1、e2 ，最终结果是 e1 表达式的值与 e2 表达式的值之 和 。 mult 表达式表示为 &amp;quot;(mult e1 e2)&amp;quot; ，其中 mult 总是以字符串 &amp;quot;mult&amp;quot; 表示，该表达式总是包含两个表达式 e1、e2，最终结果是 e1 表达式的值与 e2 表达式的值之 积 。 在该题目中，变量名以小写字符开始，之后跟随 0 个或多个小写字符或数字。为了方便，&amp;quot;add&amp;quot; ，&amp;quot;let&amp;quot; ，&amp;quot;mult&amp;quot; 会被定义为 &amp;ldquo;关键字&amp;rdquo; ，不会用作变量名。 最后，要说一下作用域的概念。计算变量名所对应的表达式时，在计算上下文中，首先检查最内层作用域（按括号计），然后按顺序依次检查外部作用域。测试用例中每一个表达式都是合法的。有关作用域的更多详细信息，请参阅示例。 示例 1： 输入： expression = &amp;ldquo;(let x 2 (mult x (let x 3 y 4 (add x y))))&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 729. 我的日程安排表 I</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-729.-%E6%88%91%E7%9A%84%E6%97%A5%E7%A8%8B%E5%AE%89%E6%8E%92%E8%A1%A8-i/</link>
      <pubDate>Tue, 05 Jul 2022 14:25:31 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-729.-%E6%88%91%E7%9A%84%E6%97%A5%E7%A8%8B%E5%AE%89%E6%8E%92%E8%A1%A8-i/</guid>
      <description>链接： https://leetcode.cn/problems/my-calendar-i/
难度： 中等
题目描述 实现一个 MyCalendar 类来存放你的日程安排。如果要添加的日程安排不会造成 重复预订 ，则可以存储这个新的日程安排。
当两个日程安排有一些时间上的交叉时（例如两个日程安排都在同一时间内），就会产生 重复预订 。
日程可以用一对整数 start 和 end 表示，这里的时间是半开区间，即 [start, end), 实数 x 的范围为， start &amp;lt;= x &amp;lt; end 。
实现 MyCalendar 类：
MyCalendar() 初始化日历对象。 boolean book(int start, int end) 如果可以将日程安排成功添加到日历中而不会导致重复预订，返回 true 。否则，返回 false 并且不要将该日程安排添加到日历中。 示例： 输入：
[&amp;ldquo;MyCalendar&amp;rdquo;, &amp;ldquo;book&amp;rdquo;, &amp;ldquo;book&amp;rdquo;, &amp;ldquo;book&amp;rdquo;]
[[], [10, 20], [15, 25], [20, 30]]
输出：
[null, true, false, true]
解释：
MyCalendar myCalendar = new MyCalendar();
myCalendar.book(10, 20); // return True</description>
    </item>
    
    <item>
      <title>Leetcode 1200. 最小绝对差</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1200.-%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/</link>
      <pubDate>Mon, 04 Jul 2022 10:17:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1200.-%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/</guid>
      <description>链接： https://leetcode.cn/problems/minimum-absolute-difference/
难度： 简单
题目描述 给你个整数数组 arr，其中每个元素都 不相同。
请你找到所有具有最小绝对差的元素对，并且按升序的顺序返回。
示例 1： 输入： arr = [4,2,1,3]
输出： [[1,2],[2,3],[3,4]]
示例 2： 输入： arr = [1,3,6,10,15]
输出： [[1,3]]
示例 3： 输入： arr = [3,8,-10,23,19,-4,-14,27]
输出： [[-14,-10],[19,23],[23,27]]
提示： 2 &amp;lt;= arr.length &amp;lt;= 105 -106 &amp;lt;= arr[i] &amp;lt;= 106 解题思路 排序 将原数组从小到大排序，则最小差值一定出现在两个相邻的元素之间，依次遍历判断寻找：
当当前差值大于最小差值时，忽略； 当当前差值等于最小差值时，加入到结果数组中； 当当前差值小于最小差值时，之前保留的结果无效，进行清空，并将当前元素对加入到结果数组中； func minimumAbsDifference(arr []int) [][]int { sort.Ints(arr) ans := make([][]int, 0, len(arr)) minDiff := math.MaxInt for i := 1; i &amp;lt; len(arr); i++ { diff := arr[i] - arr[i-1] if minDiff &amp;lt; diff { continue } if minDiff &amp;gt; diff { minDiff = diff ans = ans[:0] } ans = append(ans, []int{arr[i-1], arr[i]}) } return ans } 复杂度 时间复杂度：$ O(N\log{N}), N = len(arr) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>Leetcode 241. 为运算表达式设计优先级</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-241.-%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Fri, 01 Jul 2022 10:16:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-241.-%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>链接： https://leetcode.cn/problems/different-ways-to-add-parentheses/
难度： 中等
题目描述 给你一个由数字和运算符组成的字符串 expression ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 按任意顺序 返回答案。
生成的测试用例满足其对应输出值符合 32 位整数范围，不同结果的数量不超过 104 。
示例 1： 输入： expression = &amp;ldquo;2-1-1&amp;rdquo;
输出： [0,2]
解释：
((2-1)-1) = 0
(2-(1-1)) = 2
示例 2： 输入： expression = &amp;ldquo;2*3-4*5&amp;rdquo;
输出： [-34,-14,-10,-10,10]
解释：
(2*(3-(45))) = -34
((23)-(45)) = -14
((2(3-4))5) = -10
(2((3-4)5)) = -10
(((23)-4)*5) = 10
提示： 1 &amp;lt;= expression.length &amp;lt;= 20 expression 由数字和算符 &#39;+&#39;、&#39;-&#39; 和 &#39;*&#39; 组成。 输入表达式中的所有整数值在范围 [0, 99] 解题思路 分治 两个表达式进行运算，若其计算结果分别有 x 和 y 种，则最终的计算结果将 x 和 y 中所有结果的两两组合进行运算即可。</description>
    </item>
    
    <item>
      <title>Leetcode 1175. 质数排列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1175.-%E8%B4%A8%E6%95%B0%E6%8E%92%E5%88%97/</link>
      <pubDate>Thu, 30 Jun 2022 10:15:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1175.-%E8%B4%A8%E6%95%B0%E6%8E%92%E5%88%97/</guid>
      <description>链接： https://leetcode.cn/problems/prime-arrangements/
难度： 简单
题目描述 请你帮忙给从 1 到 n 的数设计排列方案，使得所有的「质数」都应该被放在「质数索引」（索引从 1 开始）上；你需要返回可能的方案总数。
让我们一起来回顾一下「质数」：质数一定是大于 1 的，并且不能用两个小于它的正整数的乘积来表示。
由于答案可能会很大，所以请你返回答案 模 mod 109 + 7 之后的结果即可。
示例 1： 输入： n = 5
输出： 12
解释： 举个例子，[1,2,5,4,3] 是一个有效的排列，但 [5,2,3,4,1] 不是，因为在第二种情况里质数 5 被错误地放在索引为 1 的位置上。
示例 2： 输入： n = 100
输出： 682289015
提示： 1 &amp;lt;= n &amp;lt;= 100 解题思路 排列 不妨设 [1, n] 区间内的质数数量为 x，对应的质数下标数量也为 x。
需要将这 x 个下标置于对应 x 个下标位置上，则有 x! 种方案。
并且将其余的 n-x 个数置于其余位置上，有 (n-x)!</description>
    </item>
    
    <item>
      <title>Leetcode 535. TinyURL 的加密与解密</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-535.-tinyurl-%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Wed, 29 Jun 2022 10:17:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-535.-tinyurl-%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</guid>
      <description>链接： https://leetcode.cn/problems/k-diff-pairs-in-an-array/
难度： 中等
题目描述 TinyURL 是一种 URL 简化服务， 比如：当你输入一个 URL https://leetcode.com/problems/design-tinyurl 时，它将返回一个简化的URL http://tinyurl.com/4e9iAk 。请你设计一个类来加密与解密 TinyURL 。
加密和解密算法如何设计和运作是没有限制的，你只需要保证一个 URL 可以被加密成一个 TinyURL ，并且这个 TinyURL 可以用解密方法恢复成原本的 URL 。
实现 Solution 类：
Solution() 初始化 TinyURL 系统对象。 String encode(String longUrl) 返回 longUrl 对应的 TinyURL 。 String decode(String shortUrl) 返回 shortUrl 原本的 URL 。题目数据保证给定的 shortUrl 是由同一个系统对象加密的。 示例： 输入： url = &amp;ldquo;https://leetcode.com/problems/design-tinyurl&#34;
输出： &amp;ldquo;https://leetcode.com/problems/design-tinyurl&#34;
解释：
Solution obj = new Solution();
string tiny = obj.encode(url); // 返回加密后得到的 TinyURL 。</description>
    </item>
    
    <item>
      <title>Leetcode 324. 摆动排序 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-324.-%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8F-ii/</link>
      <pubDate>Tue, 28 Jun 2022 10:11:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-324.-%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8F-ii/</guid>
      <description>链接： https://leetcode.cn/problems/wiggle-sort-ii/
难度： 中等
题目描述 给你一个整数数组 nums，将它重新排列成 nums[0] &amp;lt; nums[1] &amp;gt; nums[2] &amp;lt; nums[3]... 的顺序。
你可以假设所有输入数组都可以得到满足题目要求的结果。
示例 1： 输入： nums = [1,5,1,1,6,4]
输出： [1,6,1,5,1,4]
解释： [1,4,1,5,1,6] 同样是符合题目要求的结果，可以被判题程序接受。
示例 2： 输入： nums = [1,3,2,2,3,1]
输出： [2,3,1,3,1,2]
提示： 1 &amp;lt;= nums.length &amp;lt;= 5 * 104 0 &amp;lt;= nums[i] &amp;lt;= 5000 题目数据保证，对于给定的输入 nums ，总能产生满足题目要求的结果 进阶： 你能用 $O(n)$ 时间复杂度和 / 或原地 $O(1)$ 额外空间来实现吗？
解题思路 排序 由于输入一定会满足要求，则相同的元素数量一定不会超过 (len(nums)+1)/2，对于排序后的元素，从中间切分为较小和较大的两部分倒。为规避相同元素相邻，倒序写入。
func wiggleSort(nums []int) { dup := make([]int, len(nums)) copy(dup, nums) sort.</description>
    </item>
    
    <item>
      <title>剑指 Offer II 091. 粉刷房子</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-091.-%E7%B2%89%E5%88%B7%E6%88%BF%E5%AD%90/</link>
      <pubDate>Sat, 25 Jun 2022 09:08:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-091.-%E7%B2%89%E5%88%B7%E6%88%BF%E5%AD%90/</guid>
      <description>链接： https://leetcode.cn/problems/JEj789/
难度： 中等
题目描述 假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。
当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的正整数矩阵 costs 来表示的。
例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。
请计算出粉刷完所有房子最少的花费成本。
示例 1： 输入： costs = [[17,2,17],[16,16,5],[14,3,19]]
输出： 10
解释： 将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色。
最少花费: 2 + 5 + 3 = 10。
示例 2： 输入： costs = [[7,6,2]]
输出： 2
提示 costs.length == n costs[i].length == 3 1 &amp;lt;= n &amp;lt;= 100 1 &amp;lt;= costs[i][j] &amp;lt;= 20 解题思路 动态规划 如果按照顺序从头至尾粉刷所有的房子，则每一个房子可以被粉刷的颜色受到上一个房子粉刷的颜色约束。</description>
    </item>
    
    <item>
      <title>Leetcode 515. 在每个树行中找最大值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-515.-%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Fri, 24 Jun 2022 10:32:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-515.-%E5%9C%A8%E6%AF%8F%E4%B8%AA%E6%A0%91%E8%A1%8C%E4%B8%AD%E6%89%BE%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>链接： https://leetcode.cn/problems/find-largest-value-in-each-tree-row/
难度： 中等
题目描述 给定一棵二叉树的根节点 root ，请找出该二叉树中每一层的最大值。
示例 1： 输入： root = [1,3,2,5,3,null,9]
输出： [1,3,9]
示例 2： 输入： root = [1,2,3]
输出： [1,3]
提示： 二叉树的节点个数的范围是 [1,104] -231 &amp;lt;= Node.val &amp;lt;= 231 - 1 解题思路 深度优先搜索 采用深度优先搜索遍历整颗二叉树，将深度信息传递下去，同一深度的节点，当遇到更大值时更新。
func largestValues(root *TreeNode) []int { ans := make([]int, 0) var dfs func(node *TreeNode, depth int) dfs = func(node *TreeNode, depth int) { if node == nil { return } if len(ans) &amp;lt;= depth { ans = append(ans, node.</description>
    </item>
    
    <item>
      <title>Leetcode 513. 找树左下角的值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-513.-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/</link>
      <pubDate>Wed, 22 Jun 2022 09:46:17 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-513.-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/</guid>
      <description>链接： https://leetcode.cn/problems/find-bottom-left-tree-value/
难度： 中等
题目描述 给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。
假设二叉树中至少有一个节点。
示例 1： 输入： root = [2,1,3]
输出： 1
示例 2： 输入： [1,2,3,4,null,5,6,null,null,7]
输出： 7
提示： 二叉树的节点个数的范围是 [1,104] -231 &amp;lt;= Node.val &amp;lt;= 231 - 1 解题思路 深度优先搜索 + 哈希 采用深度优先搜索遍历整颗二叉树，采用先左后右到顺序遍历子节点，则对于某一层而言，最左的结点最先遍历到。
将深度信息传递下去，当深度发生变更时，即得到下一层最左节点，更新记录。
func findBottomLeftValue(root *TreeNode) int { ans := 0 maxDepth := 0 var dfs func(node *TreeNode, depth int) dfs = func(node *TreeNode, depth int) { if node == nil { return } if maxDepth &amp;lt; depth { maxDepth = depth ans = node.</description>
    </item>
    
    <item>
      <title>Leetcode 1108. IP 地址无效化</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1108.-ip-%E5%9C%B0%E5%9D%80%E6%97%A0%E6%95%88%E5%8C%96/</link>
      <pubDate>Wed, 22 Jun 2022 09:33:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1108.-ip-%E5%9C%B0%E5%9D%80%E6%97%A0%E6%95%88%E5%8C%96/</guid>
      <description>链接： https://leetcode.cn/problems/defanging-an-ip-address/
难度： 简单
题目描述 给你一个有效的 IPv4 地址 address，返回这个 IP 地址的无效化版本。
所谓无效化 IP 地址，其实就是用 &amp;quot;[.]&amp;quot; 代替了每个 &amp;quot;.&amp;quot;。
示例 1： 输入： address = &amp;ldquo;1.1.1.1&amp;rdquo;
输出： &amp;ldquo;1[.]1[.]1[.]1&amp;rdquo;
示例 2： 输入： address = &amp;ldquo;255.100.50.0&amp;rdquo;
输出： &amp;ldquo;255[.]100[.]50[.]0&amp;rdquo;
提示： 给出的 address 是一个有效的 IPv4 地址 解题思路 模拟 使用另一个字符串存储结果，遍历该地址，当遇到 &amp;quot;.&amp;quot; 时，将 &amp;quot;[.]&amp;quot; 添加到结果尾，否则添加原字符。
func defangIPaddr(address string) string { ans := make([]byte, 0, len(address)+6) for i := range address { if address[i] != &amp;#39;.&amp;#39; { ans = append(ans, address[i]) continue } ans = append(ans, &amp;#39;[&amp;#39;, &amp;#39;.</description>
    </item>
    
    <item>
      <title>Leetcode 508. 出现次数最多的子树元素和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-508.-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E6%A0%91%E5%85%83%E7%B4%A0%E5%92%8C/</link>
      <pubDate>Sun, 19 Jun 2022 09:55:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-508.-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%90%E6%A0%91%E5%85%83%E7%B4%A0%E5%92%8C/</guid>
      <description>链接： https://leetcode.cn/problems/most-frequent-subtree-sum/
难度： 中等
题目描述 给你一个二叉树的根结点 root ，请返回出现次数最多的子树元素和。如果有多个元素出现的次数相同，返回所有出现次数最多的子树元素和（不限顺序）。
一个结点的 「子树元素和」 定义为以该结点为根的二叉树上所有结点的元素之和（包括结点本身）。
示例 1： 输入： root = [5,2,-3]
输出： [2,-3,4]
示例 2： 输入： root = [5,2,-5]
输出： [2]
提示： 节点数在 [1, 104] 范围内 -105 &amp;lt;= Node.val &amp;lt;= 105 解题思路 深度优先搜索 + 哈希 遍历二叉树，计算以每个节点为根节点的子树的和，使用哈希表记录每个和出现的次数，并求得最大出现次数。
遍历哈希表，找出最大次数的和返回。
func findFrequentTreeSum(root *TreeNode) []int { sum2Cnt := make(map[int]int) maxCnt := 0 var dfs func(node *TreeNode) int dfs = func(node *TreeNode) int { if node == nil { return 0 } sum := node.</description>
    </item>
    
    <item>
      <title>剑指 Offer II 029. 排序的循环链表</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-029.-%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sat, 18 Jun 2022 09:59:58 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-029.-%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode.cn/problems/4ueAj6/
难度： 中等
题目描述 给定 循环单调非递减列表 中的一个点，写一个函数向这个列表中插入一个新元素 insertVal ，使这个列表仍然是循环升序的。
给定的可以是这个列表中任意一个顶点的指针，并不一定是这个列表中最小元素的指针。
如果有多个满足条件的插入位置，可以选择任意一个位置插入新的值，插入后整个列表仍然保持有序。
如果列表为空（给定的节点是 null），需要创建一个循环有序列表并返回这个节点。否则。请返回原先给定的节点。
示例 1： 输入： head = [3,4,1], insertVal = 2
输出： [3,4,1,2]
解释： 在上图中，有一个包含三个元素的循环有序列表，你获得值为 3 的节点的指针，我们需要向表中插入元素 2 。新插入的节点应该在 1 和 3 之间，插入之后，整个列表如上图所示，最后返回节点 3 。
示例 2： 输入： head = [], insertVal = 1
输出： [1]
解释： 列表为空（给定的节点是 null），创建一个循环有序列表并返回这个节点。
示例 3： 输入： head = [1], insertVal = 0
输出： [1,0]
提示 0 &amp;lt;= Number of Nodes &amp;lt;= 5 * 104 -106 &amp;lt;= Node.</description>
    </item>
    
    <item>
      <title>Leetcode 1089. 复写零</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1089.-%E5%A4%8D%E5%86%99%E9%9B%B6/</link>
      <pubDate>Fri, 17 Jun 2022 11:51:55 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1089.-%E5%A4%8D%E5%86%99%E9%9B%B6/</guid>
      <description>链接： https://leetcode.cn/problems/duplicate-zeros/
难度： 简单
题目描述 给你一个长度固定的整数数组 arr，请你将该数组中出现的每个零都复写一遍，并将其余的元素向右平移。
注意：请不要在超过该数组长度的位置写入元素。
要求：请对输入的数组 就地 进行上述修改，不要从函数返回任何东西。
示例 1： 输入： [1,0,2,3,0,4,5,0]
输出： null
解释： 调用函数后，输入的数组将被修改为：[1,0,0,2,3,0,0,4]
示例 2： 输入： [1,2,3]
输出： null
解释： 调用函数后，输入的数组将被修改为：[1,2,3]
提示： 1 &amp;lt;= arr.length &amp;lt;= 10000 0 &amp;lt;= arr[i] &amp;lt;= 9 解题思路 模拟 遍历一遍，统计复写后数字的数量，从而定位到最后一个元素。
然后从此元素开始，倒序遍历，修改原数组。
注意： 需要处理末尾一个 0 的情况。
func duplicateZeros(arr []int) { cnt := 0 // 统计数量 tail := 0 // 标记最后一个元素下标 // 寻找最后一个元素 for ; cnt &amp;lt; len(arr); tail++ { cnt++ if arr[tail] == 0 { cnt++ } } tail-- i := len(arr) - 1 // 最后一个元素为 0 且只会有一个 if cnt &amp;gt; len(arr) { arr[len(arr)-1] = arr[tail] tail-- i-- } // 倒序填充之前的元素 for ; tail &amp;gt;= 0; tail-- { arr[i] = arr[tail] if arr[tail] == 0 { arr[i-1] = arr[tail] i-- } i-- } } 复杂度 时间复杂度：$ O(N), N = len(arr) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 532. 数组中的 k-diff 数对</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-532.-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84-k-diff-%E6%95%B0%E5%AF%B9/</link>
      <pubDate>Thu, 16 Jun 2022 11:08:20 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-532.-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84-k-diff-%E6%95%B0%E5%AF%B9/</guid>
      <description>链接： https://leetcode.cn/problems/k-diff-pairs-in-an-array/
难度： 中等
题目描述 给定一个整数数组和一个整数 k，你需要在数组里找到 不同的 k-diff 数对，并返回不同的 k-diff 数对 的数目。
这里将 k-diff 数对定义为一个整数对 (nums[i], nums[j])，并满足下述全部条件：
0 &amp;lt;= i &amp;lt; j &amp;lt; nums.length |nums[i] - nums[j]| == k 注意，|val| 表示 val 的绝对值。
示例 1： 输入： nums = [3, 1, 4, 1, 5], k = 2
输出： 2
解释： 数组中有两个 2-diff 数对, (1, 3) 和 (3, 5)。
尽管数组中有两个1，但我们只应返回不同的数对的数量。
示例 2： 输入： nums = [1, 2, 3, 4, 5], k = 1</description>
    </item>
    
    <item>
      <title>Leetcode 498. 对角线遍历</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-498.-%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/</link>
      <pubDate>Tue, 14 Jun 2022 10:15:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-498.-%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/</guid>
      <description>链接： https://leetcode.cn/problems/diagonal-traverse/
难度： 中等
题目描述 给你一个大小为 m x n 的矩阵 mat ，请以对角线遍历的顺序，用一个数组返回这个矩阵中的所有元素。
示例 1： 输入： mat = [[1,2,3],[4,5,6],[7,8,9]]
输出： [1,2,4,7,5,3,6,8,9]
示例 2： 输入： mat = [[1,2],[3,4]]
输出： [1,2,3,4]
提示： m == mat.length n == mat[i].length 1 &amp;lt;= m, n &amp;lt;= 104 1 &amp;lt;= m * n &amp;lt;= 104 -105 &amp;lt;= mat[i][j] &amp;lt;= 105 解题思路 模拟 遍历方向有两个，右上 和 左下，初始从左上角首个元素开始，向 右上 方遍历，当到达矩阵边界时，变换遍历方向。
func findDiagonalOrder(mat [][]int) []int { rows, cols := len(mat), len(mat[0]) // 判断是否在矩阵内 var valid = func(row int, col int) bool { if row &amp;lt; 0 || row &amp;gt;= rows || col &amp;lt; 0 || col &amp;gt;= cols { return false } return true } ans := make([]int, 0, rows*cols) rightUp := true for row, col := 0, 0; ; { // 发生越界 if !</description>
    </item>
    
    <item>
      <title>Leetcode 1051. 高度检查器</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1051.-%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8/</link>
      <pubDate>Mon, 13 Jun 2022 10:52:02 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1051.-%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8/</guid>
      <description>链接： https://leetcode.cn/problems/height-checker/
难度： 简单
题目描述 学校打算为全体学生拍一张年度纪念照。根据要求，学生需要按照 非递减 的高度顺序排成一行。
排序后的高度情况用整数数组 expected 表示，其中 expected[i] 是预计排在这一行中第 i 位的学生的高度（下标从 0 开始）。
给你一个整数数组 heights ，表示 当前学生站位 的高度情况。heights[i] 是这一行中第 i 位学生的高度（下标从 0 开始）。
返回满足 heights[i] != expected[i] 的 下标数量 。
示例 1： 输入： heights = [1,1,4,2,1,3]
输出： 3
解释：
高度：[1,1,4,2,1,3]
预期：[1,1,1,2,3,4]
下标 2 、4 、5 处的学生高度不匹配。
示例 2： 输入： heights = [5,1,2,3,4]
输出： 5
解释：
高度：[5,1,2,3,4]
预期：[1,2,3,4,5]
所有下标的对应学生高度都不匹配。
示例 3： 输入： heights = [1,2,3,4,5]
输出： 0</description>
    </item>
    
    <item>
      <title>Leetcode 890. 查找和替换模式</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-890.-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9B%BF%E6%8D%A2%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 13 Jun 2022 09:57:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-890.-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9B%BF%E6%8D%A2%E6%A8%A1%E5%BC%8F/</guid>
      <description>链接： https://leetcode.cn/problems/find-and-replace-pattern/
难度： 中等
题目描述 你有一个单词列表 words 和一个模式 pattern，你想知道 words 中的哪些单词与模式匹配。
如果存在字母的排列 p ，使得将模式中的每个字母 x 替换为 p(x) 之后，我们就得到了所需的单词，那么单词与模式是匹配的。
（回想一下，字母的排列是从字母到字母的双射：每个字母映射到另一个字母，没有两个字母映射到同一个字母。）
返回 words 中与给定模式匹配的单词列表。
你可以按任何顺序返回答案。
示例 1： 输入： s1 = &amp;ldquo;this apple is sweet&amp;rdquo;, s2 = &amp;ldquo;this apple is sour&amp;rdquo;
输出： [&amp;ldquo;sweet&amp;rdquo;,&amp;ldquo;sour&amp;rdquo;]
示例 2： 输入： s1 = &amp;ldquo;apple apple&amp;rdquo;, s2 = &amp;ldquo;banana&amp;rdquo;
输出： [&amp;ldquo;banana&amp;rdquo;]
提示： 1 &amp;lt;= s1.length, s2.length &amp;lt;= 200 s1 和 s2 由小写英文字母和空格组成 s1 和 s2 都不含前导或尾随空格 s1 和 s2 中的所有单词间均由单个空格分隔 解题思路 哈希 使用哈希表记录映射关系，当不存在冲突时，满足条件。</description>
    </item>
    
    <item>
      <title>Leetcode 926. 将字符串翻转到单调递增</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-926.-%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BF%BB%E8%BD%AC%E5%88%B0%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E/</link>
      <pubDate>Sat, 11 Jun 2022 09:38:44 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-926.-%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BF%BB%E8%BD%AC%E5%88%B0%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E/</guid>
      <description>链接： https://leetcode.cn/problems/flip-string-to-monotone-increasing/
难度： 中等
题目描述 如果一个二进制字符串，是以一些 0（可能没有 0）后面跟着一些 1（也可能没有 1）的形式组成的，那么该字符串是 单调递增 的。
给你一个二进制字符串 s，你可以将任何 0 翻转为 1 或者将 1 翻转为 0 。
返回使 s 单调递增的最小翻转次数。
示例 1： 输入： s = &amp;ldquo;00110&amp;rdquo;
输出： 1
解释： 翻转最后一位得到 00111.
示例 2： 输入： s = &amp;ldquo;010110&amp;rdquo;
输出： 2
解释： 翻转得到 011111，或者是 000111。
示例 3： 输入： s = &amp;ldquo;00011000&amp;rdquo;
输出： 2
解释： 翻转得到 00000000。
提示： 1 &amp;lt;= s.length &amp;lt;= 105 s[i] 为 &#39;0&#39; 或 &#39;1&#39; 解题思路 动态规划 每个字符有 0 和 1 两种情况，若已知反转后的一个 单调递增 字符串分别以 0 和 1 结尾的最小翻转次数，则容易求得在末尾新添一个子串的最小翻转次数。</description>
    </item>
    
    <item>
      <title>Leetcode 497. 非重叠矩形中的随机点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-497.-%E9%9D%9E%E9%87%8D%E5%8F%A0%E7%9F%A9%E5%BD%A2%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E7%82%B9/</link>
      <pubDate>Thu, 09 Jun 2022 10:55:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-497.-%E9%9D%9E%E9%87%8D%E5%8F%A0%E7%9F%A9%E5%BD%A2%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E7%82%B9/</guid>
      <description>链接： https://leetcode.cn/problems/random-point-in-non-overlapping-rectangles/
难度： 中等
题目描述 给定一个由非重叠的轴对齐矩形的数组 rects ，其中 rects[i] = [ai, bi, xi, yi] 表示 (ai, bi) 是第 i 个矩形的左下角点，(xi, yi) 是第 i 个矩形的右上角点。设计一个算法来随机挑选一个被某一矩形覆盖的整数点。矩形周长上的点也算做是被矩形覆盖。所有满足要求的点必须等概率被返回。
在给定的矩形覆盖的空间内的任何整数点都有可能被返回。
请注意 ，整数点是具有整数坐标的点。
实现 Solution 类:
Solution(int[][] rects) 用给定的矩形数组 rects 初始化对象。 int[] pick() 返回一个随机的整数点 [u, v] 在给定的矩形所覆盖的空间内。 示例 1： 输入：
[&amp;ldquo;Solution&amp;rdquo;, &amp;ldquo;pick&amp;rdquo;, &amp;ldquo;pick&amp;rdquo;, &amp;ldquo;pick&amp;rdquo;, &amp;ldquo;pick&amp;rdquo;, &amp;ldquo;pick&amp;rdquo;]
[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]
输出：
[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]</description>
    </item>
    
    <item>
      <title>Leetcode 1037. 有效的回旋镖</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1037.-%E6%9C%89%E6%95%88%E7%9A%84%E5%9B%9E%E6%97%8B%E9%95%96/</link>
      <pubDate>Thu, 09 Jun 2022 10:04:08 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1037.-%E6%9C%89%E6%95%88%E7%9A%84%E5%9B%9E%E6%97%8B%E9%95%96/</guid>
      <description>链接： https://leetcode.cn/problems/valid-boomerang/
难度： 简单
题目描述 给定一个数组 points ，其中 points[i] = [xi, yi] 表示 X-Y 平面上的一个点，如果这些点构成一个 回旋镖 则返回 true 。
回旋镖 定义为一组三个点，这些点 各不相同 且 不在一条直线上 。
示例 1： 输入： points = [[1,1],[2,3],[3,2]]
输出： true
示例 2： 输入： points = [[1,1],[2,2],[3,3]]
输出： false
提示： points.length == 3 points[i].length == 2 0 &amp;lt;= xi, yi &amp;lt;= 100 解题思路 数学 不妨设三个点为 A、B、C，分别求出直线 AB 和 AC 的斜率，若两条直线斜率相同，又因为有公共点 A，此时三个点在同一条直线上。如下公式：
$$ \frac{y_1-y_0}{x_1-x_0} = \frac{y_2-y_0}{x_2-x_0} $$
注意： 需要处理斜率为 ∞ 的情况，可以将上式进行交叉变换：$ (y_1-y_0)(x_2-x_0) = (y_2-y_0)(x_1-x_0) $</description>
    </item>
    
    <item>
      <title>Leetcode 929. 独特的电子邮件地址</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-929.-%E7%8B%AC%E7%89%B9%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Mon, 06 Jun 2022 20:05:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-929.-%E7%8B%AC%E7%89%B9%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%9C%B0%E5%9D%80/</guid>
      <description>链接： https://leetcode-cn.com/problems/reverse-only-letters/
难度： 简单
题目描述 每个 有效电子邮件地址 都由一个 本地名 和一个 域名 组成，以 &#39;@&#39; 符号分隔。除小写字母之外，电子邮件地址还可以含有一个或多个 &#39;.&#39; 或 &#39;+&#39; 。
例如，在 alice@leetcode.com 中， alice 是 本地名 ，而 leetcode.com 是 域名 。 如果在电子邮件地址的 本地名 部分中的某些字符之间添加句点（&#39;.&#39;），则发往那里的邮件将会转发到本地名中没有点的同一地址。请注意，此规则 不适用于域名 。
例如，&amp;quot;alice.z@leetcode.com” 和 “alicez@leetcode.com” 会转发到同一电子邮件地址。 如果在 本地名 中添加加号（&#39;+&#39;），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件。同样，此规则 不适用于域名 。
例如 m.y+name@email.com 将转发到 my@email.com。 可以同时使用这两个规则。
给你一个字符串数组 emails，我们会向每个 emails[i] 发送一封电子邮件。返回实际收到邮件的不同地址数目。
示例 1： 输入： emails = [&amp;ldquo;test.email+alex@leetcode.com&amp;rdquo;,&amp;ldquo;test.e.mail+bob.cathy@leetcode.com&amp;rdquo;,&amp;ldquo;testemail+david@lee.tcode.com&amp;rdquo;]
输出： 2
解释： 实际收到邮件的是 &amp;ldquo;testemail@leetcode.com&amp;rdquo; 和 &amp;ldquo;testemail@lee.tcode.com&amp;rdquo;。
示例 2： 输入： emails = [&amp;ldquo;a@leetcode.</description>
    </item>
    
    <item>
      <title>Leetcode 450. 删除二叉搜索树中的节点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-450.-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</link>
      <pubDate>Thu, 02 Jun 2022 19:28:22 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-450.-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode.cn/problems/delete-node-in-a-bst/
难度： 中等
题目描述 给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。
一般来说，删除节点可分为两个步骤：
首先找到需要删除的节点； 如果找到了，删除它。 示例 1： 输入： root = [5,3,6,2,4,null,7], key = 3
输出： [5,4,6,2,null,null,7]
解释： 给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。
一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。
另一个正确答案是 [5,2,6,null,4,null,7]。
示例 2： 输入： root = [5,3,6,2,4,null,7], key = 0
输出： [5,3,6,2,4,null,7]
解释： 二叉树不包含值为 0 的节点
示例 3： 输入： root = [], key = 0
输出： []
提示： 节点数的范围 [0, 104]. -105 &amp;lt;= Node.val &amp;lt;= 105 节点值唯一 root 是合法的二叉搜索树 -105 &amp;lt;= key &amp;lt;= 105 解题思路 值替换 删除 BST 的某个结点，则该结点被左子树的最右结点或右子树的最左结点取代，通过直接赋值解决。</description>
    </item>
    
    <item>
      <title>Leetcode 473. 火柴拼正方形</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-473.-%E7%81%AB%E6%9F%B4%E6%8B%BC%E6%AD%A3%E6%96%B9%E5%BD%A2/</link>
      <pubDate>Wed, 01 Jun 2022 10:00:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-473.-%E7%81%AB%E6%9F%B4%E6%8B%BC%E6%AD%A3%E6%96%B9%E5%BD%A2/</guid>
      <description>链接： https://leetcode.cn/problems/matchsticks-to-square/
难度： 中等
题目描述 你将得到一个整数数组 matchsticks ，其中 matchsticks[i] 是第 i 个火柴棒的长度。你要用 所有的火柴棍 拼成一个正方形。你 不能折断 任何一根火柴棒，但你可以把它们连在一起，而且每根火柴棒必须 使用一次 。
如果你能使这个正方形，则返回 true ，否则返回 false 。
示例 1： 输入： matchsticks = [1,1,2,2,2]
输出： true
解释： 能拼成一个边长为2的正方形，每边两根火柴。
示例 2： 输入： matchsticks = [3,3,3,3,4]
输出： false
解释： 不能用所有火柴拼成一个正方形。
提示： 1 &amp;lt;= matchsticks.length &amp;lt;= 15 1 &amp;lt;= matchsticks[i] &amp;lt;= 108 解题思路 type Node struct { End bool Children [26]*Node } func findAllConcatenatedWordsInADict(words []string) []string { sort.Slice(words, func(i, j int) bool { return len(words[i]) &amp;lt; len(words[j]) }) root := &amp;amp;Node{ End: false, Children: [26]*Node{}, } var dfs func(word string) bool dfs = func(word string) bool { for node, i := root, 0; i &amp;lt; len(word); i++ { // 无法继续匹配 node = node.</description>
    </item>
    
    <item>
      <title>Leetcode 1022. 从根到叶的二进制数之和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1022.-%E4%BB%8E%E6%A0%B9%E5%88%B0%E5%8F%B6%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Mon, 30 May 2022 10:52:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1022.-%E4%BB%8E%E6%A0%B9%E5%88%B0%E5%8F%B6%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>链接： https://leetcode.cn/problems/sum-of-root-to-leaf-binary-numbers/
难度： 简单
题目描述 给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。
例如，如果路径为 0 -&amp;gt; 1 -&amp;gt; 1 -&amp;gt; 0 -&amp;gt; 1，那么它表示二进制数 01101，也就是 13 。 对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。
返回这些数字之和。题目数据保证答案是一个 32 位 整数。
示例 1： 输入： root = [1,0,1,0,1,0,1]
输出： 22
解释： (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22
示例 2： 输入： root = [0]
输出： 0
提示： 树中的节点数在 [1, 1000] 范围内 Node.val 仅为 0 或 1 解题思路 深度优先搜索 从根开始，以深度优先搜索的方式遍历整颗树，同时使用一个变量记录遍历到的二进制前缀。</description>
    </item>
    
    <item>
      <title>Leetcode 468. 验证IP地址</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-468.-%E9%AA%8C%E8%AF%81ip%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Sun, 29 May 2022 10:38:10 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-468.-%E9%AA%8C%E8%AF%81ip%E5%9C%B0%E5%9D%80/</guid>
      <description>链接： https://leetcode.cn/problems/validate-ip-address/
难度： 中等
题目描述 给定一个字符串 queryIP。如果是有效的 IPv4 地址，返回 &amp;quot;IPv4&amp;quot; ；如果是有效的 IPv6 地址，返回 &amp;quot;IPv6&amp;quot; ；如果不是上述类型的 IP 地址，返回 &amp;quot;Neither&amp;quot; 。
有效的IPv4地址 是 “x1.x2.x3.x4” 形式的IP地址。 其中 0 &amp;lt;= xi &amp;lt;= 255 且 xi 不能包含 前导零。例如: “192.168.1.1” 、 “192.168.1.0” 为有效IPv4地址， “192.168.01.1” 为无效IPv4地址; “192.168.1.00” 、 “192.168@1.1” 为无效IPv4地址。
一个有效的IPv6地址 是一个格式为 “x1:x2:x3:x4:x5:x6:x7:x8” 的IP地址，其中:
1 &amp;lt;= xi.length &amp;lt;= 4 xi 是一个 十六进制字符串 ，可以包含数字、小写英文字母( &#39;a&#39; 到 &#39;f&#39; )和大写英文字母( &#39;A&#39; 到 &#39;F&#39; )。 在 xi 中允许前导零。 例如 &amp;quot;2001:0db8:85a3:0000:0000:8a2e:0370:7334&amp;quot; 和 &amp;quot;2001:db8:85a3:0:0:8A2E:0370:7334&amp;quot; 是有效的 IPv6 地址，而 &amp;quot;2001:0db8:85a3::8A2E:037j:7334&amp;quot; 和 &amp;quot;02001:0db8:85a3:0000:0000:8a2e:0370:7334&amp;quot; 是无效的 IPv6 地址。</description>
    </item>
    
    <item>
      <title>Leetcode 965. 单值二叉树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-965.-%E5%8D%95%E5%80%BC%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sat, 28 May 2022 09:49:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-965.-%E5%8D%95%E5%80%BC%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>链接： https://leetcode.cn/problems/univalued-binary-tree/
难度： 简单
题目描述 如果二叉树每个节点都具有相同的值，那么该二叉树就是单值二叉树。
只有给定的树是单值二叉树时，才返回 true；否则返回 false。
示例 1： 输入： [1,1,1,1,1,null,1]
输出： true
示例 2： 输入： [2,2,2,5,2]
输出： false
提示： 给定树的节点数范围是 [1, 100]。 每个节点的值都是整数，范围为 [0, 99] 。 解题思路 先序遍历 遍历整棵树，检查是否每个结点的值都与根结点相同。
func isUnivalTree(root *TreeNode) bool { val := root.Val var dfs func(node *TreeNode) bool dfs = func(node *TreeNode) bool { if node == nil { return true } return node.Val == val &amp;amp;&amp;amp; dfs(node.Left) &amp;amp;&amp;amp; dfs(node.Right) } return dfs(root) } 复杂度 时间复杂度：$ O(N), N = size(Tree) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>Leetcode 1021. 删除最外层的括号</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1021.-%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Sat, 28 May 2022 09:21:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1021.-%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid>
      <description>链接： https://leetcode.cn/problems/remove-outermost-parentheses/
难度： 简单
题目描述 有效括号字符串为空 &amp;quot;&amp;quot;、&amp;quot;(&amp;quot; + A + &amp;quot;)&amp;quot; 或 A + B ，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。
例如，&amp;quot;&amp;quot;，&amp;quot;()&amp;quot;，&amp;quot;(())()&amp;quot; 和 &amp;quot;(()(()))&amp;quot; 都是有效的括号字符串。 如果有效字符串 s 非空，且不存在将其拆分为 s = A + B 的方法，我们称其为 原语（primitive），其中 A 和 B 都是非空有效括号字符串。
给出一个非空有效字符串 s，考虑将其进行原语化分解，使得：s = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 。
示例 1： 输入： s = &amp;ldquo;(()())(())&amp;rdquo;
输出： &amp;ldquo;()()()&amp;rdquo;
解释：
输入字符串为 &amp;ldquo;(()())(())&amp;quot;，原语化分解得到 &amp;ldquo;(()())&amp;rdquo; + &amp;ldquo;(())&amp;quot;，</description>
    </item>
    
    <item>
      <title>面试题 17.11. 单词距离</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.11.-%E5%8D%95%E8%AF%8D%E8%B7%9D%E7%A6%BB/</link>
      <pubDate>Fri, 27 May 2022 10:08:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.11.-%E5%8D%95%E8%AF%8D%E8%B7%9D%E7%A6%BB/</guid>
      <description>链接： https://leetcode.cn/problems/find-closest-lcci/
难度： 中等
题目描述 有个内含单词的超大文本文件，给定任意两个不同的单词，找出在这个文件中这两个单词的最短距离(相隔单词数)。如果寻找过程在这个文件中会重复多次，而每次寻找的单词不同，你能对此优化吗?
示例： 输入： words = [&amp;ldquo;I&amp;rdquo;,&amp;ldquo;am&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;student&amp;rdquo;,&amp;ldquo;from&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;university&amp;rdquo;,&amp;ldquo;in&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;city&amp;rdquo;], word1 = &amp;ldquo;a&amp;rdquo;, word2 = &amp;ldquo;student&amp;rdquo;
输出： 1
提示 words.length &amp;lt;= 100000 解题思路 遍历 当找到一个单词时(不妨设为 word1)，距离最近的另一个单词 word2，或者是在其左边最右的那一个，或者在其右边最左的那一个。
对于第二种情况，也可以理解为找到了 word2，左边最右的那一个 word1。
这样，遍历过程中，仅记录两个数字最后的下标，即可求得最短距离。
func findClosest(words []string, word1 string, word2 string) int { min := math.MaxInt idx1 := -1 idx2 := -1 for i, word := range words { if word == word1 { idx1 = i } if word == word2 { idx2 = i } if idx1 == -1 || idx2 == -1 { continue } d := idx1 - idx2 if d &amp;lt; 0 { d = -d } if min &amp;gt; d { min = d } } return min } 复杂度 时间复杂度：$ O(N), N = \sum{words[i]} $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 467. 环绕字符串中唯一的子字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-467.-%E7%8E%AF%E7%BB%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%94%AF%E4%B8%80%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 25 May 2022 19:09:27 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-467.-%E7%8E%AF%E7%BB%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%94%AF%E4%B8%80%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode.cn/problems/unique-substrings-in-wraparound-string/
难度： 中等
题目描述 把字符串 s 看作是 &amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot; 的无限环绕字符串，所以 s 看起来是这样的：
&amp;quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&amp;quot; . 现在给定另一个字符串 p 。返回 s 中 唯一 的 p 的 非空子串 的数量 。 示例 1： 输入： p = &amp;ldquo;a&amp;rdquo;
输出： 1
解释： 字符串 s 中只有一个&amp;quot;a&amp;quot;子字符。
示例 2： 输入： p = &amp;ldquo;cac&amp;rdquo;
输出： 2
解释： 字符串 s 中的字符串“cac”只有两个子串“a”、“c”。.
示例 3： 输入： p = &amp;ldquo;zab&amp;rdquo;
输出： 6
解释： 在字符串 s 中有六个子串“z”、“a”、“b”、“za”、“ab”、“zab”。
提示： 1 &amp;lt;= p.length &amp;lt;= 105 p 由小写英文字母构成 解题思路 双指针 可以发现，对于满足条件的某个字串而言，其子串也满足条件。所以要寻找每部分最长满足条件的字串。</description>
    </item>
    
    <item>
      <title>Leetcode 961. 在长度 2N 的数组中找出重复 N 次的元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-961.-%E5%9C%A8%E9%95%BF%E5%BA%A6-2n-%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D-n-%E6%AC%A1%E7%9A%84%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sat, 21 May 2022 10:51:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-961.-%E5%9C%A8%E9%95%BF%E5%BA%A6-2n-%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D-n-%E6%AC%A1%E7%9A%84%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode.cn/problems/n-repeated-element-in-size-2n-array/
难度： 简单
题目描述 给你一个整数数组 nums ，该数组具有以下属性：
nums.length == 2 * n. nums 包含 n + 1 个 不同的 元素 nums 中恰有一个元素重复 n 次 找出并返回重复了 n 次的那个元素。
示例 1： 输入： nums = [1,2,3,3]
输出： 3
示例 2： 输入： nums = [2,1,2,5,3,2]
输出： 2
示例 3： 输入： nums = [5,1,5,2,5,3,5,4]
输出： 5
提示： 2 &amp;lt;= n &amp;lt;= 5000 nums.length == 2 * n 0 &amp;lt;= nums[i] &amp;lt;= 104 nums 由 n + 1 个 不同的 元素组成，且其中一个元素恰好重复 n 次 解题思路 哈希 使用哈希表记录元素的出现次数，当重复出现时，返回。</description>
    </item>
    
    <item>
      <title>Leetcode 436. 寻找右区间</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-436.-%E5%AF%BB%E6%89%BE%E5%8F%B3%E5%8C%BA%E9%97%B4/</link>
      <pubDate>Fri, 20 May 2022 10:31:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-436.-%E5%AF%BB%E6%89%BE%E5%8F%B3%E5%8C%BA%E9%97%B4/</guid>
      <description>链接： https://leetcode.cn/problems/find-right-interval/
难度： 中等
题目描述 给你一个区间数组 intervals ，其中 intervals[i] = [starti, endi] ，且每个 starti 都 不同 。
区间 i 的 右侧区间 可以记作区间 j ，并满足 startj &amp;gt;= endi ，且 startj 最小化 。
返回一个由每个区间 i 的 右侧区间 的最小起始位置组成的数组。如果某个区间 i 不存在对应的 右侧区间 ，则下标 i 处的值设为 -1 。
示例 1： 输入： intervals = [[1,2]]
输出： [-1]
解释： 集合中只有一个区间，所以输出-1。
示例 2： 输入： intervals = [[3,4],[2,3],[1,2]]
输出： [-1,0,1]
解释： 对于 [3,4] ，没有满足条件的“右侧”区间。
对于 [2,3] ，区间[3,4]具有最小的“右”起点;
对于 [1,2] ，区间[2,3]具有最小的“右”起点。</description>
    </item>
    
    <item>
      <title>Leetcode 462. 最少移动次数使数组元素相等 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-462.-%E6%9C%80%E5%B0%91%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89-ii/</link>
      <pubDate>Thu, 19 May 2022 10:27:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-462.-%E6%9C%80%E5%B0%91%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89-ii/</guid>
      <description>链接： https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/
难度： 简单
题目描述 给你一个长度为 n 的整数数组 nums ，返回使所有数组元素相等需要的最少移动数。
在一步操作中，你可以使数组中的一个元素加 1 或者减 1 。
示例 1： 输入： nums = [1,2,3]
输出： 2
解释：
只需要两步操作（每步操作指南使一个元素加 1 或减 1）：
[1,2,3] =&amp;gt; [2,2,3] =&amp;gt; [2,2,2]
示例 2： 输入： nums = [1,10,2,9]
输出： 16
提示： n == nums.length 1 &amp;lt;= nums.length &amp;lt;= 105 -109 &amp;lt;= nums[i] &amp;lt;= 109 解题思路 排序 将数组排序，首先计算出全部变换为最小数的移动次数。
然后向后遍历，依次计算变换为每一个数的移动次数，从中找出最小值。
设当前要变换的数下标为 i，则之前元素从 nums[i-1] 变换为 nums[i] 的变换次数 (nums[i] - nums[i-1]) * i 需要加上，之后多余计算的变换次数 (nums[i] - nums[i-1]) * (len(nums) - i) 需要减去。</description>
    </item>
    
    <item>
      <title>Leetcode 953. 验证外星语词典</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-953.-%E9%AA%8C%E8%AF%81%E5%A4%96%E6%98%9F%E8%AF%AD%E8%AF%8D%E5%85%B8/</link>
      <pubDate>Wed, 18 May 2022 10:25:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-953.-%E9%AA%8C%E8%AF%81%E5%A4%96%E6%98%9F%E8%AF%AD%E8%AF%8D%E5%85%B8/</guid>
      <description>链接： https://leetcode.cn/problems/verifying-an-alien-dictionary/
难度： 简单
题目描述 某种外星语也使用英文小写字母，但可能顺序 order 不同。字母表的顺序（order）是一些小写字母的排列。
给定一组用外星语书写的单词 words，以及其字母表的顺序 order，只有当给定的单词在这种外星语中按字典序排列时，返回 true；否则，返回 false。
示例 1： 输入： words = [&amp;ldquo;hello&amp;rdquo;,&amp;ldquo;leetcode&amp;rdquo;], order = &amp;ldquo;hlabcdefgijkmnopqrstuvwxyz&amp;rdquo;
输出： true
解释： 在该语言的字母表中，&amp;lsquo;h&amp;rsquo; 位于 &amp;rsquo;l&amp;rsquo; 之前，所以单词序列是按字典序排列的。
示例 2： 输入： words = [&amp;ldquo;word&amp;rdquo;,&amp;ldquo;world&amp;rdquo;,&amp;ldquo;row&amp;rdquo;], order = &amp;ldquo;worldabcefghijkmnpqstuvxyz&amp;rdquo;
输出： false
解释： 在该语言的字母表中，&amp;rsquo;d&amp;rsquo; 位于 &amp;rsquo;l&amp;rsquo; 之后，那么 words[0] &amp;gt; words[1]，因此单词序列不是按字典序排列的。
示例 3： 输入： words = [&amp;ldquo;apple&amp;rdquo;,&amp;ldquo;app&amp;rdquo;], order = &amp;ldquo;abcdefghijklmnopqrstuvwxyz&amp;rdquo;
输出： false
解释： 当前三个字符 &amp;ldquo;app&amp;rdquo; 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 &amp;ldquo;apple&amp;rdquo; &amp;gt; &amp;ldquo;app&amp;rdquo;，因为 &amp;rsquo;l&amp;rsquo; &amp;gt; &amp;lsquo;∅&amp;rsquo;，其中 &amp;lsquo;∅&amp;rsquo; 是空白字符，定义为比任何其他字符都小。</description>
    </item>
    
    <item>
      <title>面试题 04.06. 后继者</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-04.06.-%E5%90%8E%E7%BB%A7%E8%80%85/</link>
      <pubDate>Mon, 16 May 2022 10:46:10 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-04.06.-%E5%90%8E%E7%BB%A7%E8%80%85/</guid>
      <description>链接： https://leetcode.cn/problems/successor-lcci/
难度： 中等
题目描述 设计一个算法，找出二叉搜索树中指定节点的“下一个”节点（也即中序后继）。
如果指定节点没有对应的“下一个”节点，则返回 null。
示例 1： 输入： root = [2,1,3], p = 1
2 / \ 1 3 输出： 2
示例 2： 输入： root = [5,3,6,2,4,null,null,1], p = 6
5 / \ 3 6 / \ 2 4 / 1 输出： null
解题思路 中序遍历 中序遍历，先找到指定结点，标记已找到。继续向后遍历，寻找后继结点，当标记已找到指定结点时，则说明当前结点为后继结点，返回。
func inorderSuccessor(root *TreeNode, p *TreeNode) *TreeNode { exist := false var dfs func(node *TreeNode) *TreeNode dfs = func(node *TreeNode) *TreeNode { if node == nil { return nil } t := dfs(node.</description>
    </item>
    
    <item>
      <title>Leetcode 812. 最大三角形面积</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-812.-%E6%9C%80%E5%A4%A7%E4%B8%89%E8%A7%92%E5%BD%A2%E9%9D%A2%E7%A7%AF/</link>
      <pubDate>Sun, 15 May 2022 11:49:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-812.-%E6%9C%80%E5%A4%A7%E4%B8%89%E8%A7%92%E5%BD%A2%E9%9D%A2%E7%A7%AF/</guid>
      <description>链接： https://leetcode.cn/problems/largest-triangle-area/
难度： 简单
题目描述 给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积。
示例： 输入： points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
输出： 2
解释：
这五个点如下图所示。组成的橙色三角形是最大的，面积为2。
注意： 3 &amp;lt;= points.length &amp;lt;= 50 不存在重复的点。 -50 &amp;lt;= points[i][j] &amp;lt;= 50 结果误差值在 106 以内都认为是正确答案。 解题思路 枚举 依次枚举三个顶点，计算构成三角形的面积，求得最大值。
func largestTriangleArea(points [][]int) float64 { maxArea := 0. for i := len(points) - 3; i &amp;gt;= 0; i-- { for j := len(points) - 2; j &amp;gt; i; j-- { for k := len(points) - 1; k &amp;gt; j; k-- { area := math.</description>
    </item>
    
    <item>
      <title>面试题 01.05. 一次编辑</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-01.05.-%E4%B8%80%E6%AC%A1%E7%BC%96%E8%BE%91/</link>
      <pubDate>Fri, 13 May 2022 10:05:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-01.05.-%E4%B8%80%E6%AC%A1%E7%BC%96%E8%BE%91/</guid>
      <description>链接： https://leetcode.cn/problems/one-away-lcci/
难度： 中等
题目描述 字符串有三种编辑操作:插入一个字符、删除一个字符或者替换一个字符。 给定两个字符串，编写一个函数判定它们是否只需要一次(或者零次)编辑。
示例 1： 输入：
first = &amp;ldquo;pale&amp;rdquo;
second = &amp;ldquo;ple&amp;rdquo;
输出： True
示例 2： 输入：
first = &amp;ldquo;pales&amp;rdquo;
second = &amp;ldquo;pal&amp;rdquo;
输出： False
解题思路 分类讨论 符合条件的两个字符串的长度应 ≤ 1。
当两个字符串相等时，判断是否仅有 ≤ 1 个字符不同； 当两个字符串不相同时，判断较短的是否为较长字符串的子序列。 func oneEditAway(first string, second string) bool { if len(first) &amp;gt; len(second) { first, second = second, first } if len(second)-len(first) &amp;gt; 1 { return false } // 等长，统计不同字符数量，要求 ≤ 1 if len(first) == len(second) { diff := 0 for i := range first { if first[i] !</description>
    </item>
    
    <item>
      <title>Leetcode 944. 删列造序</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-944.-%E5%88%A0%E5%88%97%E9%80%A0%E5%BA%8F/</link>
      <pubDate>Thu, 12 May 2022 20:06:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-944.-%E5%88%A0%E5%88%97%E9%80%A0%E5%BA%8F/</guid>
      <description>链接： https://leetcode.cn/problems/delete-columns-to-make-sorted/
难度： 简单
题目描述 给你由 n 个小写字母字符串组成的数组 strs，其中每个字符串长度相等。
这些字符串可以每个一行，排成一个网格。例如，strs = [&amp;quot;abc&amp;quot;, &amp;quot;bce&amp;quot;, &amp;quot;cae&amp;quot;] 可以排列为：
abc
bce
cae
你需要找出并删除 不是按字典序升序排列的 列。在上面的例子（下标从 0 开始）中，列 0（&#39;a&#39;, &#39;b&#39;, &#39;c&#39;）和列 2（&#39;c&#39;, &#39;e&#39;, &#39;e&#39;）都是按升序排列的，而列 1（&#39;b&#39;, &#39;c&#39;, &#39;a&#39;）不是，所以要删除列 1 。
返回你需要删除的列数。
示例 1： 输入： strs = [&amp;ldquo;cba&amp;rdquo;,&amp;ldquo;daf&amp;rdquo;,&amp;ldquo;ghi&amp;rdquo;]
输出： 1
解释： 网格示意如下：
cba
daf
ghi
列 0 和列 2 按升序排列，但列 1 不是，所以只需要删除列 1 。
示例 2： 输入： strs = [&amp;ldquo;a&amp;rdquo;,&amp;ldquo;b&amp;rdquo;]
输出： 0
解释： 网格示意如下：
a
b
只有列 0 这一列，且已经按升序排列，所以不用删除任何列。</description>
    </item>
    
    <item>
      <title>Leetcode 449. 序列化和反序列化二叉搜索树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-449.-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Wed, 11 May 2022 10:35:14 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-449.-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>链接： https://leetcode.cn/problems/serialize-and-deserialize-bst/
难度： 中等
题目描述 序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。
设计一个算法来序列化和反序列化 二叉搜索树 。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。
编码的字符串应尽可能紧凑。
示例 1： 输入： root = [2,1,3]
输出： [2,1,3]
示例 2： 输入： root = []
输出： []
提示： 树中节点数范围是 [0, 104] 0 &amp;lt;= Node.val &amp;lt;= 104 题目数据 保证 输入的树是一棵二叉搜索树。 解题思路 先序遍历 根据二叉搜索树的特性，对于每个结点，可以得出左右子数的数据范围。
故序列化时，进行先序遍历存储顺序即可；反序列化时，根据确定的数据范围，递归构建即可。
type Codec struct { } func Constructor() Codec { return Codec{} } // Serializes a tree to a single string. func (this *Codec) serialize(root *TreeNode) string { sVals := make([]string, 0, 5) var dfs func(node *TreeNode) dfs = func(node *TreeNode) { if node == nil { return } sVals = append(sVals, strconv.</description>
    </item>
    
    <item>
      <title>Leetcode 942. 增减字符串匹配</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-942.-%E5%A2%9E%E5%87%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Mon, 09 May 2022 09:59:48 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-942.-%E5%A2%9E%E5%87%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/range-sum-of-bst/
难度： 简单
题目描述 由范围 [0,n] 内所有整数组成的 n + 1 个整数的排列序列可以表示为长度为 n 的字符串 s ，其中:
如果 perm[i] &amp;lt; perm[i + 1] ，那么 s[i] == &#39;I&#39; 如果 perm[i] &amp;gt; perm[i + 1] ，那么 s[i] == &#39;D&#39; 给定一个字符串 s ，重构排列 perm 并返回它。如果有多个有效排列 perm，则返回其中 任何一个 。
示例 1： 输入： s = &amp;ldquo;IDID&amp;rdquo;
输出： [0,4,1,3,2]
示例 2： 输入： s = &amp;ldquo;III&amp;rdquo;
输出： [0,1,2,3]
示例 3： 输入： s = &amp;ldquo;DDI&amp;rdquo;
输出： [3,2,0,1]
提示： 1 &amp;lt;= s.</description>
    </item>
    
    <item>
      <title>Leetcode 442. 数组中重复的数据</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-442.-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sun, 08 May 2022 10:39:10 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-442.-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/
难度： 中等
题目描述 给你一个长度为 n 的整数数组 nums ，其中 nums 的所有整数都在范围 [1, n] 内，且每个整数出现 一次 或 两次 。请你找出所有出现 两次 的整数，并以数组形式返回。
你必须设计并实现一个时间复杂度为 $ O(n) $ 且仅使用常量额外空间的算法解决此问题。
示例 1： 输入： nums = [4,3,2,7,8,2,3,1]
输出： [2,3]
示例 2： 输入： nums = [1,1,2]
输出： [1]
示例 3： 输入： nums = [1]
输出： []
提示： n == nums.length 1 &amp;lt;= n &amp;lt;= 105 1 &amp;lt;= nums[i] &amp;lt;= n nums 中的每个元素出现 一次 或 两次 解题思路 哈希 要确定 $ O(1) $ 的判断某个元素是否出现，需要使用到哈希表。</description>
    </item>
    
    <item>
      <title>Leetcode 433. 最小基因变化</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-433.-%E6%9C%80%E5%B0%8F%E5%9F%BA%E5%9B%A0%E5%8F%98%E5%8C%96/</link>
      <pubDate>Sat, 07 May 2022 10:07:37 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-433.-%E6%9C%80%E5%B0%8F%E5%9F%BA%E5%9B%A0%E5%8F%98%E5%8C%96/</guid>
      <description>链接： hhttps://leetcode-cn.com/problems/minimum-genetic-mutation/
难度： 中等
题目描述 基因序列可以表示为一条由 8 个字符组成的字符串，其中每个字符都是 &#39;A&#39;、&#39;C&#39;、&#39;G&#39; 和 &#39;T&#39; 之一。
假设我们需要调查从基因序列 start 变为 end 所发生的基因变化。一次基因变化就意味着这个基因序列中的一个字符发生了变化。
例如，&amp;quot;AACCGGTT&amp;quot; --&amp;gt; &amp;quot;AACCGGTA&amp;quot; 就是一次基因变化。 另有一个基因库 bank 记录了所有有效的基因变化，只有基因库中的基因才是有效的基因序列。
给你两个基因序列 start 和 end ，以及一个基因库 bank ，请你找出并返回能够使 start 变化为 end 所需的最少变化次数。如果无法完成此基因变化，返回 -1 。
注意：起始基因序列 start 默认是有效的，但是它并不一定会出现在基因库中。
示例 1： 输入： start = &amp;ldquo;AACCGGTT&amp;rdquo;, end = &amp;ldquo;AACCGGTA&amp;rdquo;, bank = [&amp;ldquo;AACCGGTA&amp;rdquo;]
输出： 1
示例 2： 输入： start = &amp;ldquo;AACCGGTT&amp;rdquo;, end = &amp;ldquo;AAACGGTA&amp;rdquo;, bank = [&amp;ldquo;AACCGGTA&amp;rdquo;,&amp;ldquo;AACCGCTA&amp;rdquo;,&amp;ldquo;AAACGGTA&amp;rdquo;]
输出： 2
示例 3： 输入： start = &amp;ldquo;AAAAACCC&amp;rdquo;, end = &amp;ldquo;AACCCCCC&amp;rdquo;, bank = [&amp;ldquo;AAAACCCC&amp;rdquo;,&amp;ldquo;AAACCCCC&amp;rdquo;,&amp;ldquo;AACCCCCC&amp;rdquo;]</description>
    </item>
    
    <item>
      <title>Leetcode 933. 最近的请求次数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-933.-%E6%9C%80%E8%BF%91%E7%9A%84%E8%AF%B7%E6%B1%82%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Fri, 06 May 2022 09:25:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-933.-%E6%9C%80%E8%BF%91%E7%9A%84%E8%AF%B7%E6%B1%82%E6%AC%A1%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-recent-calls/
难度： 简单
题目描述 写一个 RecentCounter 类来计算特定时间范围内最近的请求。
请你实现 RecentCounter 类：
RecentCounter() 初始化计数器，请求数为 0 。 int ping(int t) 在时间 t 添加一个新请求，其中 t 表示以毫秒为单位的某个时间，并返回过去 3000 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 [t-3000, t] 内发生的请求数。 保证 每次对 ping 的调用都使用比之前更大的 t 值。
示例： 输入：
[&amp;ldquo;RecentCounter&amp;rdquo;, &amp;ldquo;ping&amp;rdquo;, &amp;ldquo;ping&amp;rdquo;, &amp;ldquo;ping&amp;rdquo;, &amp;ldquo;ping&amp;rdquo;]
[[], [1], [100], [3001], [3002]]
输出：
[null, 1, 2, 3, 3]
解释：
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1); // requests = [1]，范围是 [-2999,1]，返回 1
recentCounter.ping(100); // requests = [1, 100]，范围是 [-2900,100]，返回 2</description>
    </item>
    
    <item>
      <title>Leetcode 713. 乘积小于 K 的子数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-713.-%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8E-k-%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 05 May 2022 10:25:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-713.-%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8E-k-%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/subarray-product-less-than-k/
难度： 中等
题目描述 给你一个整数数组 nums 和一个整数 k ，请你返回子数组内所有元素的乘积严格小于 k 的连续子数组的数目。
示例 1： 输入： nums = [10,5,2,6], k = 100
输出： 8
解释： 8 个乘积小于 100 的子数组分别为：[10]、[5]、[2],、[6]、[10,5]、[5,2]、[2,6]、[5,2,6]。
需要注意的是 [10,5,2] 并不是乘积小于 100 的子数组。
示例 2： 输入： nums = [1,2,3], k = 0
输出： 0
提示： 1 &amp;lt;= nums.length &amp;lt;= 3 * 104 1 &amp;lt;= nums[i] &amp;lt;= 1000 0 &amp;lt;= k &amp;lt;= 106 解题思路 枚举 枚举每个子数组的起始点，向后遍历并不断累乘。
每次类乘后的积 &amp;lt; k，即找到了一个子数组；当积 ≥ k 时，则该起始点相关的符合要求的子数组已查找完，继续从下一个起始点开始。</description>
    </item>
    
    <item>
      <title>Leetcode 1823. 找出游戏的获胜者</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1823.-%E6%89%BE%E5%87%BA%E6%B8%B8%E6%88%8F%E7%9A%84%E8%8E%B7%E8%83%9C%E8%80%85/</link>
      <pubDate>Wed, 04 May 2022 11:40:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1823.-%E6%89%BE%E5%87%BA%E6%B8%B8%E6%88%8F%E7%9A%84%E8%8E%B7%E8%83%9C%E8%80%85/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-the-winner-of-the-circular-game/
难度： 中等
题目描述 共有 n 名小伙伴一起做游戏。小伙伴们围成一圈，按 顺时针顺序 从 1 到 n 编号。确切地说，从第 i 名小伙伴顺时针移动一位会到达第 (i+1) 名小伙伴的位置，其中 1 &amp;lt;= i &amp;lt; n ，从第 n 名小伙伴顺时针移动一位会回到第 1 名小伙伴的位置。
游戏遵循如下规则：
从第 1 名小伙伴所在位置 开始 。 沿着顺时针方向数 k 名小伙伴，计数时需要 包含 起始时的那位小伙伴。逐个绕圈进行计数，一些小伙伴可能会被数过不止一次。 你数到的最后一名小伙伴需要离开圈子，并视作输掉游戏。 如果圈子中仍然有不止一名小伙伴，从刚刚输掉的小伙伴的 顺时针下一位 小伙伴 开始，回到步骤 2 继续执行。 否则，圈子中最后一名小伙伴赢得游戏。 给你参与游戏的小伙伴总数 n ，和一个整数 k ，返回游戏的获胜者。
示例 1： 输入： n = 5, k = 2
输出： 3
解释： 游戏运行步骤如下：
从小伙伴 1 开始。 顺时针数 2 名小伙伴，也就是小伙伴 1 和 2 。 小伙伴 2 离开圈子。下一次从小伙伴 3 开始。 顺时针数 2 名小伙伴，也就是小伙伴 3 和 4 。 小伙伴 4 离开圈子。下一次从小伙伴 5 开始。 顺时针数 2 名小伙伴，也就是小伙伴 5 和 1 。 小伙伴 1 离开圈子。下一次从小伙伴 3 开始。 顺时针数 2 名小伙伴，也就是小伙伴 3 和 5 。 小伙伴 5 离开圈子。只剩下小伙伴 3 。所以小伙伴 3 是游戏的获胜者。 示例 2： 输入： n = 6, k = 5</description>
    </item>
    
    <item>
      <title>Leetcode 937. 重新排列日志文件</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-937.-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 03 May 2022 11:48:49 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-937.-%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</guid>
      <description>链接： https://leetcode-cn.com/problems/reorder-data-in-log-files/
难度： 简单
题目描述 给你一个日志数组 logs。每条日志都是以空格分隔的字串，其第一个字为字母与数字混合的 标识符 。
有两种不同类型的日志：
字母日志：除标识符之外，所有字均由小写字母组成 数字日志：除标识符之外，所有字均由数字组成 请按下述规则将日志重新排序：
所有 字母日志 都排在 数字日志 之前。 字母日志 在内容不同时，忽略标识符后，按内容字母顺序排序；在内容相同时，按标识符排序。 数字日志 应该保留原来的相对顺序。 返回日志的最终顺序。
示例 1： 输入： logs = [&amp;ldquo;dig1 8 1 5 1&amp;rdquo;,&amp;ldquo;let1 art can&amp;rdquo;,&amp;ldquo;dig2 3 6&amp;rdquo;,&amp;ldquo;let2 own kit dig&amp;rdquo;,&amp;ldquo;let3 art zero&amp;rdquo;]
输出： [&amp;ldquo;let1 art can&amp;rdquo;,&amp;ldquo;let3 art zero&amp;rdquo;,&amp;ldquo;let2 own kit dig&amp;rdquo;,&amp;ldquo;dig1 8 1 5 1&amp;rdquo;,&amp;ldquo;dig2 3 6&amp;rdquo;]
解释：
字母日志的内容都不同，所以顺序为 &amp;ldquo;art can&amp;rdquo;, &amp;ldquo;art zero&amp;rdquo;, &amp;ldquo;own kit dig&amp;rdquo; 。
数字日志保留原来的相对顺序 &amp;ldquo;dig1 8 1 5 1&amp;rdquo;, &amp;ldquo;dig2 3 6&amp;rdquo; 。</description>
    </item>
    
    <item>
      <title>Leetcode 591. 标签验证器</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-591.-%E6%A0%87%E7%AD%BE%E9%AA%8C%E8%AF%81%E5%99%A8/</link>
      <pubDate>Mon, 02 May 2022 12:14:17 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-591.-%E6%A0%87%E7%AD%BE%E9%AA%8C%E8%AF%81%E5%99%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/tag-validator/
难度： 困难
题目描述 给定一个表示代码片段的字符串，你需要实现一个验证器来解析这段代码，并返回它是否合法。合法的代码片段需要遵守以下的所有规则：
代码必须被合法的闭合标签包围。否则，代码是无效的。 闭合标签（不一定合法）要严格符合格式：&amp;lt;TAG_NAME&amp;gt;TAG_CONTENT&amp;lt;/TAG_NAME&amp;gt;。其中，&amp;lt;TAG_NAME&amp;gt;是起始标签，&amp;lt;/TAG_NAME&amp;gt;是结束标签。起始和结束标签中的 TAG_NAME 应当相同。当且仅当 TAG_NAME 和 TAG_CONTENT 都是合法的，闭合标签才是合法的。 合法的 TAG_NAME 仅含有大写字母，长度在范围 [1,9] 之间。否则，该 TAG_NAME 是不合法的。 合法的 TAG_CONTENT 可以包含其他合法的闭合标签，cdata （请参考规则7）和任意字符（注意参考规则1）除了不匹配的 &amp;lt;、不匹配的起始和结束标签、不匹配的或带有不合法 TAG_NAME 的闭合标签。否则，TAG_CONTENT 是不合法的。 一个起始标签，如果没有具有相同 TAG_NAME 的结束标签与之匹配，是不合法的。反之亦然。不过，你也需要考虑标签嵌套的问题。 一个 &amp;lt;，如果你找不到一个后续的 &amp;gt; 与之匹配，是不合法的。并且当你找到一个 &amp;lt; 或&amp;lt;/ 时，所有直到下一个 &amp;gt; 的前的字符，都应当被解析为 TAG_NAME（不一定合法）。 cdata 有如下格式：&amp;lt;![CDATA[CDATA_CONTENT]]&amp;gt;。CDATA_CONTENT 的范围被定义成 &amp;lt;![CDATA[ 和后续的第一个 ]]&amp;gt; 之间的字符。 CDATA_CONTENT 可以包含任意字符。cdata 的功能是阻止验证器解析 CDATA_CONTENT，所以即使其中有一些字符可以被解析为标签（无论合法还是不合法），也应该将它们视为常规字符。 合法代码的例子： 输入： &amp;quot;&amp;lt;DIV&amp;gt;This is the first line &amp;lt;![CDATA[&amp;lt;div&amp;gt;]]&amp;gt;&amp;lt;/DIV&amp;gt;&amp;quot;
输出： True
解释：
代码被包含在了闭合的标签内： &amp;lt;DIV&amp;gt; 和 &amp;lt;/DIV&amp;gt; 。
TAG_NAME 是合法的，TAG_CONTENT 包含了一些字符和 cdata 。</description>
    </item>
    
    <item>
      <title>Leetcode 1305. 两棵二叉搜索树中的所有元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1305.-%E4%B8%A4%E6%A3%B5%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sun, 01 May 2022 09:22:48 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1305.-%E4%B8%A4%E6%A3%B5%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees/
难度： 中等
题目描述 给你 root1 和 root2 这两棵二叉搜索树。请你返回一个列表，其中包含 两棵树 中的所有整数并按 升序 排序。
示例 1： 输入： root1 = [2,1,4], root2 = [1,0,3]
输出： [0,1,1,2,3,4]
示例 2： 输入： root1 = [1,null,8], root2 = [8,1]
输出： [1,1,8,8]
提示： 每棵树的节点数在 [0, 5000] 范围内 -105 &amp;lt;= Node.val &amp;lt;= 105 解题思路 中序遍历 + 归并排序 两颗树都是二叉搜索树，所以分别对齐进行中序遍历，将得到两个有序的数组。
最后将这两个有序数组合并为一个有序数组，采用归并排序。
func getAllElements(root1 *TreeNode, root2 *TreeNode) []int { // 中序遍历 var dfs func(node *TreeNode, nums *[]int) dfs = func(node *TreeNode, nums *[]int) { if node == nil { return } dfs(node.</description>
    </item>
    
    <item>
      <title>Leetcode 908. 最小差值 I</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-908.-%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC-i/</link>
      <pubDate>Sat, 30 Apr 2022 09:40:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-908.-%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC-i/</guid>
      <description>链接： https://leetcode-cn.com/problems/smallest-range-i/
难度： 简单
题目描述 给你一个整数数组 nums ，和一个整数 k 。
在一个操作中，您可以选择 0 &amp;lt;= i &amp;lt; nums.length 的任何索引 i 。将 nums[i] 改为 nums[i] + x ，其中 x 是一个范围为 [-k, k] 的整数。对于每个索引 i ，最多 只能 应用 一次 此操作。
nums 的 分数 是 nums 中最大和最小元素的差值。 在对 nums 中的每个索引最多应用一次上述操作后，返回 nums 的最低 分数 。
示例 1： 输入： nums = [1], k = 0
输出： 0
解释： 分数是 max(nums) - min(nums) = 1 - 1 = 0。</description>
    </item>
    
    <item>
      <title>Leetcode 427. 建立四叉树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-427.-%E5%BB%BA%E7%AB%8B%E5%9B%9B%E5%8F%89%E6%A0%91/</link>
      <pubDate>Fri, 29 Apr 2022 10:02:29 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-427.-%E5%BB%BA%E7%AB%8B%E5%9B%9B%E5%8F%89%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/construct-quad-tree/
难度： 中等
题目描述 给你一个 n * n 矩阵 grid ，矩阵由若干 0 和 1 组成。请你用四叉树表示该矩阵 grid 。
你需要返回能表示矩阵的 四叉树 的根结点。
注意，当 isLeaf 为 False 时，你可以把 True 或者 False 赋值给节点，两种值都会被判题机制 接受 。
四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：
val：储存叶子结点所代表的区域的值。1 对应 True，0 对应 False； isLeaf: 当这个节点是一个叶子结点时为 True，如果它有 4 个子节点则为 False 。 class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; } 我们可以按以下步骤为二维区域构建四叉树：
如果当前网格的值相同（即，全为 0 或者全为 1），将 isLeaf 设为 True ，将 val 设为网格相应的值，并将四个子节点都设为 Null 然后停止。 如果当前网格的值不同，将 isLeaf 设为 False， 将 val 设为任意值，然后如下图所示，将当前网格划分为四个子网格。 使用适当的子网格递归每个子节点。 如果你想了解更多关于四叉树的内容，可以参考 wiki 。</description>
    </item>
    
    <item>
      <title>Leetcode 905. 按奇偶排序数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-905.-%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 28 Apr 2022 09:51:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-905.-%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/sort-array-by-parity/
难度： 简单
题目描述 给你一个整数数组 nums，将 nums 中的的所有偶数元素移动到数组的前面，后跟所有奇数元素。
返回满足此条件的 任一数组 作为答案。
示例 1： 输入： nums = [3,1,2,4]
输出： [2,4,3,1]
解释： [4,2,3,1]、[2,4,1,3] 和 [4,2,1,3] 也会被视作正确答案。
示例 2： 输入： nums = [0]
输出： [0]
提示： 1 &amp;lt;= nums.length &amp;lt;= 5000 0 &amp;lt;= nums[i] &amp;lt;= 5000 解题思路 双指针 使用两个指针分别标记 已排好序的偶数元素尾 以及 当前遍历到的元素，初始两个指针均为 0。
依次遍历，当遍历到偶数元素时，将其与 已排好序的偶数元素尾 的元素交换。如此，则可将所有偶数元素全部置于前面。
func sortArrayByParity(nums []int) []int { idx := 0 for i := range nums { if nums[i]&amp;amp;1 == 1 { continue } nums[idx], nums[i] = nums[i], nums[idx] idx++ } return nums } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 417. 太平洋大西洋水流问题</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-417.-%E5%A4%AA%E5%B9%B3%E6%B4%8B%E5%A4%A7%E8%A5%BF%E6%B4%8B%E6%B0%B4%E6%B5%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 27 Apr 2022 10:34:55 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-417.-%E5%A4%AA%E5%B9%B3%E6%B4%8B%E5%A4%A7%E8%A5%BF%E6%B4%8B%E6%B0%B4%E6%B5%81%E9%97%AE%E9%A2%98/</guid>
      <description>链接： https://leetcode-cn.com/problems/pacific-atlantic-water-flow/
难度： 中等
题目描述 有一个 m × n 的矩形岛屿，与 太平洋 和 大西洋 相邻。 “太平洋” 处于大陆的左边界和上边界，而 “大西洋” 处于大陆的右边界和下边界。
这个岛被分割成一个由若干方形单元格组成的网格。给定一个 m x n 的整数矩阵 heights ， heights[r][c] 表示坐标 (r, c) 上单元格 高于海平面的高度 。
岛上雨水较多，如果相邻单元格的高度 小于或等于 当前单元格的高度，雨水可以直接向北、南、东、西流向相邻单元格。水可以从海洋附近的任何单元格流入海洋。
返回 网格坐标 result 的 2D列表 ，其中 result[i] = [ri, ci] 表示雨水可以从单元格 (ri, ci) 流向 太平洋和大西洋 。
示例 1： 输入： heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
输出： [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
示例 2： 输入： heights = [[2,1],[1,2]]
输出： [[0,0],[0,1],[1,0],[1,1]]
提示： m == heights.</description>
    </item>
    
    <item>
      <title>Leetcode 883. 三维形体投影面积</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-883.-%E4%B8%89%E7%BB%B4%E5%BD%A2%E4%BD%93%E6%8A%95%E5%BD%B1%E9%9D%A2%E7%A7%AF/</link>
      <pubDate>Tue, 26 Apr 2022 10:14:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-883.-%E4%B8%89%E7%BB%B4%E5%BD%A2%E4%BD%93%E6%8A%95%E5%BD%B1%E9%9D%A2%E7%A7%AF/</guid>
      <description>链接： https://leetcode-cn.com/problems/projection-area-of-3d-shapes/
难度： 中等
题目描述 在 n x n 的网格 grid 中，我们放置了一些与 x，y，z 三轴对齐的 1 x 1 x 1 立方体。
每个值 v = grid[i][j] 表示 v 个正方体叠放在单元格 (i, j) 上。
现在，我们查看这些立方体在 xy 、yz 和 zx 平面上的投影。
投影 就像影子，将 三维 形体映射到一个 二维 平面上。从顶部、前面和侧面看立方体时，我们会看到“影子”。
返回 所有三个投影的总面积 。
示例 1： &amp;lt;img src=&amp;quot;/img/883.shadow.png&amp;quot; width=&amp;gt;&amp;ldquo;800px&amp;rdquo;&amp;gt;
输入： [[1,2],[3,4]]
输出： 17
解释： 这里有该形体在三个轴对齐平面上的三个投影(“阴影部分”)。
示例 2： 输入： grid = [[2]]
输出： 5
示例 3： 输入： [[1,0],[0,2]]
输出： 8</description>
    </item>
    
    <item>
      <title>Leetcode 398. 随机数索引</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-398.-%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 25 Apr 2022 09:42:51 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-398.-%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%B4%A2%E5%BC%95/</guid>
      <description>链接： https://leetcode-cn.com/problems/random-pick-index/
难度： 中等
题目描述 给定一个可能含有重复元素的整数数组，要求随机输出给定的数字的索引。 您可以假设给定的数字一定存在于数组中。
注意：
数组大小可能非常大。 使用太多额外空间的解决方案将不会通过测试。
示例： int[] nums = new int[] {1,2,3,3,3}; Solution solution = new Solution(nums); // pick(3) 应该返回索引 2,3 或者 4。每个索引的返回概率应该相等。 solution.pick(3); // pick(1) 应该返回 0。因为只有nums[0]等于1。 solution.pick(1); 解题思路 哈希 使用哈希表记录每个重复元素出现过的所有下标，每次从这些下标中随机选出一个即可。
type Solution struct { idxes map[int][]int random *rand.Rand } func Constructor(nums []int) Solution { idxes := make(map[int][]int) for i, num := range nums { idxes[num] = append(idxes[num], i) } return Solution{ idxes: idxes, random: rand.</description>
    </item>
    
    <item>
      <title>Leetcode 868. 二进制间距</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-868.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%97%B4%E8%B7%9D/</link>
      <pubDate>Sun, 24 Apr 2022 09:42:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-868.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%97%B4%E8%B7%9D/</guid>
      <description>链接： https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/
难度： 中等
题目描述 给定一个正整数 n，找到并返回 n 的二进制表示中两个 相邻 1 之间的 最长距离 。如果不存在两个相邻的 1，返回 0 。
如果只有 0 将两个 1 分隔开（可能不存在 0 ），则认为这两个 1 彼此 相邻 。两个 1 之间的距离是它们的二进制表示中位置的绝对差。例如，&amp;quot;1001&amp;quot; 中的两个 1 的距离为 3 。
示例 1： 输入： n = 22
输出： 2
解释： 22 的二进制是 &amp;ldquo;10110&amp;rdquo; 。
在 22 的二进制表示中，有三个 1，组成两对相邻的 1 。
第一对相邻的 1 中，两个 1 之间的距离为 2 。
第二对相邻的 1 中，两个 1 之间的距离为 1 。
答案取两个距离之中最大的，也就是 2 。</description>
    </item>
    
    <item>
      <title>Leetcode 396. 旋转函数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-396.-%E6%97%8B%E8%BD%AC%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 22 Apr 2022 09:32:20 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-396.-%E6%97%8B%E8%BD%AC%E5%87%BD%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/rotate-function/
难度： 中等
题目描述 给定一个长度为 n 的整数数组 nums 。
假设 arrk 是数组 nums 顺时针旋转 k 个位置后的数组，我们定义 nums 的 旋转函数 F 为：
F(k) = 0 * arrk[0] + 1 * arrk[1] + &amp;hellip; + (n - 1) * arrk[n - 1] 返回 F(0), F(1), ..., F(n-1) 中的最大值 。
生成的测试用例让答案符合 32 位 整数。
示例 1： 输入： nums = [4,3,2,6]
输出： 26
解释：
F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25</description>
    </item>
    
    <item>
      <title>Leetcode 824. 山羊拉丁文</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-824.-%E5%B1%B1%E7%BE%8A%E6%8B%89%E4%B8%81%E6%96%87/</link>
      <pubDate>Thu, 21 Apr 2022 10:21:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-824.-%E5%B1%B1%E7%BE%8A%E6%8B%89%E4%B8%81%E6%96%87/</guid>
      <description>链接： https://leetcode-cn.com/problems/goat-latin/
难度： 简单
题目描述 给你一个由若干单词组成的句子 sentence ，单词间由空格分隔。每个单词仅由大写和小写英文字母组成。
请你将句子转换为 “山羊拉丁文（Goat Latin）”（一种类似于 猪拉丁文 - Pig Latin 的虚构语言）。山羊拉丁文的规则如下：
如果单词以元音开头（&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;），在单词后添加 &amp;quot;ma&amp;quot;。 例如，单词 &amp;quot;apple&amp;quot; 变为 &amp;quot;applema&amp;quot; 。 如果单词以辅音字母开头（即，非元音字母），移除第一个字符并将它放到末尾，之后再添加&amp;quot;ma&amp;quot;。 例如，单词 &amp;quot;goat&amp;quot; 变为 &amp;quot;oatgma&amp;quot; 。 根据单词在句子中的索引，在单词最后添加与索引相同数量的字母&#39;a&#39;，索引从 1 开始。 例如，在第一个单词后添加 &amp;quot;a&amp;quot; ，在第二个单词后添加 &amp;quot;aa&amp;quot; ，以此类推。 返回将 sentence 转换为山羊拉丁文后的句子。
示例 1： 输入： sentence = &amp;ldquo;I speak Goat Latin&amp;rdquo;
输出： &amp;ldquo;Imaa peaksmaaa oatGmaaaa atinLmaaaaa&amp;rdquo;
示例 2： 输入： sentence = &amp;ldquo;The quick brown fox jumped over the lazy dog&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 388. 文件的最长绝对路径</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-388.-%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%80%E9%95%BF%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 20 Apr 2022 09:34:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-388.-%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%80%E9%95%BF%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/lexicographical-numbers/
难度： 中等
题目描述 假设有一个同时存储文件和目录的文件系统。下图展示了文件系统的一个示例：
这里将 dir 作为根目录中的唯一目录。dir 包含两个子目录 subdir1 和 subdir2 。subdir1 包含文件 file1.ext 和子目录 subsubdir1；subdir2 包含子目录 subsubdir2，该子目录下包含文件 file2.ext 。
在文本格式中，如下所示(⟶表示制表符)：
dir
⟶ subdir1
⟶ ⟶ file1.ext
⟶ ⟶ subsubdir1
⟶ subdir2
⟶ ⟶ subsubdir2
⟶ ⟶ ⟶ file2.ext
如果是代码表示，上面的文件系统可以写为 &amp;quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&amp;quot; 。&#39;\n&#39; 和 &#39;\t&#39; 分别是换行符和制表符。
文件系统中的每个文件和文件夹都有一个唯一的 绝对路径 ，即必须打开才能到达文件/目录所在位置的目录顺序，所有路径用 &#39;/&#39; 连接。上面例子中，指向 file2.ext 的 绝对路径 是 &amp;quot;dir/subdir2/subsubdir2/file2.ext&amp;quot; 。每个目录名由字母、数字和/或空格组成，每个文件名遵循 name.extension 的格式，其中 name 和 extension 由字母、数字和/或空格组成。
给定一个以上述格式表示文件系统的字符串 input ，返回文件系统中 指向 文件 的 最长绝对路径 的长度 。 如果系统中没有文件，返回 0。</description>
    </item>
    
    <item>
      <title>Leetcode 821. 字符的最短距离</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-821.-%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/</link>
      <pubDate>Tue, 19 Apr 2022 10:08:56 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-821.-%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/</guid>
      <description>链接： https://leetcode-cn.com/problems/shortest-distance-to-a-character/
难度： 简单
题目描述 给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。
返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。
两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。
示例 1： 输入： s = &amp;ldquo;loveleetcode&amp;rdquo;, c = &amp;ldquo;e&amp;rdquo;
输出： [3,2,1,0,1,0,0,1,2,2,1,0]
解释： 字符 &amp;rsquo;e&amp;rsquo; 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。
距下标 0 最近的 &amp;rsquo;e&amp;rsquo; 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。</description>
    </item>
    
    <item>
      <title>Leetcode 386. 字典序排数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-386.-%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E6%95%B0/</link>
      <pubDate>Mon, 18 Apr 2022 09:33:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-386.-%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/lexicographical-numbers/
难度： 中等
题目描述 给你一个整数 n ，按字典序返回范围 [1, n] 内所有整数。
你必须设计一个时间复杂度为 $ O(n) $ 且使用 $ O(1) $ 额外空间的算法。
示例 1： 输入： n = 13
输出： [1,10,11,12,13,2,3,4,5,6,7,8,9]
示例 2： 输入： n = 2
输出： [1,2]
提示： 1 &amp;lt;= n &amp;lt;= 5 * 104 解题思路 自定义排序 生成 [1, n] 的数组，自定义排序规则：将两个数转化为字符串进行比较。完成一轮排序返回即可。
func lexicalOrder(n int) []int { nums := make([]int, 0, n) for i := 1; i &amp;lt;= n; i++ { nums = append(nums, i) } sort.</description>
    </item>
    
    <item>
      <title>Leetcode 819. 最常见的单词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-819.-%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Sun, 17 Apr 2022 09:08:03 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-819.-%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8D%95%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/most-common-word/
难度： 简单
题目描述 给定一个段落 (paragraph) 和一个禁用单词列表 (banned)。返回出现次数最多，同时不在禁用列表中的单词。
题目保证至少有一个词不在禁用列表中，而且答案唯一。
禁用列表中的单词用小写字母表示，不含标点符号。段落中的单词不区分大小写。答案都是小写字母。
示例： 输入：
paragraph = &amp;ldquo;Bob hit a ball, the hit BALL flew far after it was hit.&amp;rdquo;
banned = [&amp;ldquo;hit&amp;rdquo;]
输出： &amp;ldquo;ball&amp;rdquo;
解释：
&amp;ldquo;hit&amp;rdquo; 出现了3次，但它是一个禁用的单词。
&amp;ldquo;ball&amp;rdquo; 出现了2次 (同时没有其他单词出现2次)，所以它是段落里出现次数最多的，且不在禁用列表中的单词。
注意，所有这些单词在段落里不区分大小写，标点符号需要忽略（即使是紧挨着单词也忽略， 比如 &amp;ldquo;ball,&amp;quot;），
&amp;ldquo;hit&amp;quot;不是最终的答案，虽然它出现次数更多，但它在禁用单词列表中。
提示： 1 &amp;lt;= 段落长度 &amp;lt;= 1000 0 &amp;lt;= 禁用单词个数 &amp;lt;= 100 1 &amp;lt;= 禁用单词长度 &amp;lt;= 10 答案是唯一的, 且都是小写字母 (即使在 paragraph 里是大写的，即使是一些特定的名词，答案都是小写的。) paragraph 只包含字母、空格和下列标点符号!?&#39;,;. 不存在没有连字符或者带有连字符的单词。 单词里只包含字母，不会出现省略号或者其他标点符号。 解题思路 哈希 以非字母符字符为分隔符，识别出每个单词并转换为小写，使用哈希表统计每个单词出现的次数，在此过程中找寻出现次数最多的单词。</description>
    </item>
    
    <item>
      <title>Leetcode 385. 迷你语法分析器</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-385.-%E8%BF%B7%E4%BD%A0%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</link>
      <pubDate>Fri, 15 Apr 2022 09:32:19 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-385.-%E8%BF%B7%E4%BD%A0%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/mini-parser/
难度： 中等
题目描述 给定一个字符串 s 表示一个整数嵌套列表，实现一个解析它的语法分析器并返回解析的结果 NestedInteger 。
列表中的每个元素只可能是整数或整数嵌套列表
示例 1： 输入： s = &amp;ldquo;324&amp;rdquo;,
输出： 324
解释： 你应该返回一个 NestedInteger 对象，其中只包含整数值 324。
示例 2： 输入： s = &amp;ldquo;[123,[456,[789]]]&amp;rdquo;,
输出： [123,[456,[789]]]
解释： 返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：
一个 integer 包含值 123 一个包含两个元素的嵌套列表：
i. 一个 integer 包含值 456
ii. 一个包含一个元素的嵌套列表
a. 一个 integer 包含值 789 提示： 1 &amp;lt;= s.length &amp;lt;= 5 * 104 s 由数字、方括号 &amp;quot;[]&amp;quot;、负号 &#39;-&#39; 、逗号 &#39;,&#39; 组成 用例保证 s 是可解析的 NestedInteger 输入中的所有值的范围是 [-106, 106] 解题思路 深度优先搜索 嵌套列表只有两种情况，要么是一个值，要么是嵌套列表，在字符串中的体现是以 &#39;[&#39; 开头进行区分。</description>
    </item>
    
    <item>
      <title>Leetcode 1672. 最富有客户的资产总量</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1672.-%E6%9C%80%E5%AF%8C%E6%9C%89%E5%AE%A2%E6%88%B7%E7%9A%84%E8%B5%84%E4%BA%A7%E6%80%BB%E9%87%8F/</link>
      <pubDate>Thu, 14 Apr 2022 09:42:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1672.-%E6%9C%80%E5%AF%8C%E6%9C%89%E5%AE%A2%E6%88%B7%E7%9A%84%E8%B5%84%E4%BA%A7%E6%80%BB%E9%87%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/richest-customer-wealth/
难度： 简单
题目描述 给你一个 m x n 的整数网格 accounts ，其中 accounts[i][j] 是第 i​​​​​​​​​​​​ 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。
客户的 资产总量 就是他们在各家银行托管的资产数量之和。最富有客户就是 资产总量 最大的客户。
示例 1： 输入： accounts = [[1,2,3],[3,2,1]]
输出： 6
解释：
第 1 位客户的资产总量 = 1 + 2 + 3 = 6
第 2 位客户的资产总量 = 3 + 2 + 1 = 6
两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。
示例 2： 输入： accounts = [[1,5],[7,3],[3,5]]
输出： 10
解释：</description>
    </item>
    
    <item>
      <title>Leetcode 380. O(1) 时间插入、删除和获取随机元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-380.-o1-%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/</link>
      <pubDate>Wed, 13 Apr 2022 09:26:31 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-380.-o1-%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/insert-delete-getrandom-o1/
难度： 中等
题目描述 实现 RandomizedSet 类：
RandomizedSet() 初始化 RandomizedSet 对象 bool insert(int val) 当元素 val 不存在时，向集合中插入该项，并返回 true ；否则，返回 false 。 bool remove(int val) 当元素 val 存在时，从集合中移除该项，并返回 true ；否则，返回 false 。 int getRandom() 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 相同的概率 被返回。 你必须实现类的所有函数，并满足每个函数的 平均 时间复杂度为 $O(1)$ 。
示例： 输入
[&amp;ldquo;RandomizedSet&amp;rdquo;, &amp;ldquo;insert&amp;rdquo;, &amp;ldquo;remove&amp;rdquo;, &amp;ldquo;insert&amp;rdquo;, &amp;ldquo;getRandom&amp;rdquo;, &amp;ldquo;remove&amp;rdquo;, &amp;ldquo;insert&amp;rdquo;, &amp;ldquo;getRandom&amp;rdquo;]
[[], [1], [2], [2], [], [1], [2], []]
输出
[null, true, false, true, 2, true, false, 2]
解释</description>
    </item>
    
    <item>
      <title>Leetcode 806. 写字符串需要的行数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-806.-%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9C%80%E8%A6%81%E7%9A%84%E8%A1%8C%E6%95%B0/</link>
      <pubDate>Tue, 12 Apr 2022 09:50:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-806.-%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9C%80%E8%A6%81%E7%9A%84%E8%A1%8C%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/unique-morse-code-words/
难度： 简单
题目描述 我们要把给定的字符串 S 从左到右写到每一行上，每一行的最大宽度为100个单位，如果我们在写某个字母的时候会使这行超过了100 个单位，那么我们应该把这个字母写到下一行。我们给定了一个数组 widths ，这个数组 widths[0] 代表 &#39;a&#39; 需要的单位， widths[1] 代表 &#39;b&#39; 需要的单位，&amp;hellip;， widths[25] 代表 &#39;z&#39; 需要的单位。
现在回答两个问题：至少多少行能放下 S ，以及最后一行使用的宽度是多少个单位？将你的答案作为长度为2的整数列表返回。
示例 1： 输入：
widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
S = &amp;ldquo;abcdefghijklmnopqrstuvwxyz&amp;rdquo;
输出： [3, 60]
解释：
所有的字符拥有相同的占用单位10。所以书写所有的26个字母，
我们需要2个整行和占用60个单位的一行。
示例 2： 示例 2: 输入：
widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
S = &amp;ldquo;bbbcccdddaaa&amp;rdquo;
输出： [2, 4]
解释：
除去字母&amp;rsquo;a&amp;rsquo;所有的字符都是相同的单位10，并且字符串 &amp;ldquo;bbbcccdddaa&amp;rdquo; 将会覆盖 9 * 10 + 2 * 4 = 98 个单位.
最后一个字母 &amp;lsquo;a&amp;rsquo; 将会被写到第二行，因为第一行只剩下2个单位了。</description>
    </item>
    
    <item>
      <title>Leetcode 357. 统计各位数字都不同的数字个数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-357.-%E7%BB%9F%E8%AE%A1%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E9%83%BD%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0%E5%AD%97%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Mon, 11 Apr 2022 09:36:55 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-357.-%E7%BB%9F%E8%AE%A1%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E9%83%BD%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0%E5%AD%97%E4%B8%AA%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-numbers-with-unique-digits/
难度： 中等
题目描述 给你一个整数 n ，统计并返回各位数字都不同的数字 x 的个数，其中 0 &amp;lt;= x &amp;lt; 10n
示例 1： 输入： n = 2
输出： 91
解释： 答案应为除去 11、22、33、44、55、66、77、88、99 外，在 0 ≤ x &amp;lt; 100 范围内的所有数字。
示例 2： 输入： n = 0 输出： 1
提示： 0 &amp;lt;= n &amp;lt;= 8 解题思路 排列 对于给定长度的数字而言，由于不存在前导 0 ，其首个数字只能从 1～9 内选取，为保证每一位数均不重复，则第二个数字只能从剩余 9 个数字中选择，第三个数字只能从剩余 8 个数字中选择，以此类推。
当长度为 1 时，数字 0 是个特例，其是 0 开头，但其必然存在于所有答案中，故初始就将其累加到结果中。
则对于连续的 [1,10&amp;lt;sup&amp;gt;n&amp;lt;/sup&amp;gt;] 范围内的数字，有：
1位数部分，9 2位数部分, 9 * 9 3位数部分，9 * 9 * 8 &amp;hellip; n位数部分，9 * 9 * 8 * &amp;hellip; * (11-n) 对以上所有情况求和，得到结果为 9 * (1 + 9 * (1 + 8 * (.</description>
    </item>
    
    <item>
      <title>Leetcode 804. 唯一摩尔斯密码词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-804.-%E5%94%AF%E4%B8%80%E6%91%A9%E5%B0%94%E6%96%AF%E5%AF%86%E7%A0%81%E8%AF%8D/</link>
      <pubDate>Sun, 10 Apr 2022 11:12:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-804.-%E5%94%AF%E4%B8%80%E6%91%A9%E5%B0%94%E6%96%AF%E5%AF%86%E7%A0%81%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/unique-morse-code-words/
难度： 简单
题目描述 国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如:
&#39;a&#39; 对应 &amp;quot;.-&amp;quot; ， &#39;b&#39; 对应 &amp;quot;-...&amp;quot; ， &#39;c&#39; 对应 &amp;quot;-.-.&amp;quot; ，以此类推。 为了方便，所有 26 个英文字母的摩尔斯密码表如下：
[&amp;quot;.-&amp;quot;,&amp;quot;-...&amp;quot;,&amp;quot;-.-.&amp;quot;,&amp;quot;-..&amp;quot;,&amp;quot;.&amp;quot;,&amp;quot;..-.&amp;quot;,&amp;quot;--.&amp;quot;,&amp;quot;....&amp;quot;,&amp;quot;..&amp;quot;,&amp;quot;.---&amp;quot;,&amp;quot;-.-&amp;quot;,&amp;quot;.-..&amp;quot;,&amp;quot;--&amp;quot;,&amp;quot;-.&amp;quot;,&amp;quot;---&amp;quot;,&amp;quot;.--.&amp;quot;,&amp;quot;--.-&amp;quot;,&amp;quot;.-.&amp;quot;,&amp;quot;...&amp;quot;,&amp;quot;-&amp;quot;,&amp;quot;..-&amp;quot;,&amp;quot;...-&amp;quot;,&amp;quot;.--&amp;quot;,&amp;quot;-..-&amp;quot;,&amp;quot;-.--&amp;quot;,&amp;quot;--..&amp;quot;]
给你一个字符串数组 words ，每个单词可以写成每个字母对应摩尔斯密码的组合。
例如，&amp;quot;cab&amp;quot; 可以写成 &amp;quot;-.-..--...&amp;quot; ，(即 &amp;quot;-.-.&amp;quot; + &amp;quot;.-&amp;quot; + &amp;quot;-...&amp;quot; 字符串的结合)。我们将这样一个连接过程称作 单词翻译 。
对 words 中所有单词进行单词翻译，返回不同 单词翻译 的数量。
示例 1： 输入： words = [&amp;ldquo;gin&amp;rdquo;, &amp;ldquo;zen&amp;rdquo;, &amp;ldquo;gig&amp;rdquo;, &amp;ldquo;msg&amp;rdquo;]
输出： 2
解释：
各单词翻译如下:
&amp;ldquo;gin&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;ndash;&amp;hellip;-.&amp;rdquo;
&amp;ldquo;zen&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;ndash;&amp;hellip;-.&amp;rdquo;
&amp;ldquo;gig&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;ndash;&amp;hellip;&amp;ndash;.&amp;rdquo;
&amp;ldquo;msg&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;ndash;&amp;hellip;&amp;ndash;.&amp;rdquo;
共有 2 种不同翻译, &amp;ldquo;&amp;ndash;&amp;hellip;-.</description>
    </item>
    
    <item>
      <title>Leetcode 780. 到达终点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-780.-%E5%88%B0%E8%BE%BE%E7%BB%88%E7%82%B9/</link>
      <pubDate>Sat, 09 Apr 2022 11:35:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-780.-%E5%88%B0%E8%BE%BE%E7%BB%88%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/reaching-points/
难度： 简单
题目描述 给定四个整数 sx , sy ，tx 和 ty，如果通过一系列的 转换 可以从起点 (sx, sy) 到达终点 (tx, ty)，则返回 true，否则返回 false。
从点 (x, y) 可以 转换 到 (x, x+y) 或者 (x+y, y)。
示例 1： 输入： sx = 1, sy = 1, tx = 3, ty = 5
输出： true
解释：
可以通过以下一系列转换从起点转换到终点：
(1, 1) -&amp;gt; (1, 2)
(1, 2) -&amp;gt; (3, 2)
(3, 2) -&amp;gt; (3, 5)
示例 2： 输入： sx = 1, sy = 1, tx = 2, ty = 2</description>
    </item>
    
    <item>
      <title>Leetcode 429. N 叉树的层序遍历</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-429.-n-%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Fri, 08 Apr 2022 09:27:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-429.-n-%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>链接： https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/
难度： 中等
题目描述 给定一个 N 叉树，返回其节点值的层序遍历。（即从左到右，逐层遍历）。
树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。
示例 1： 输入： root = [1,null,3,2,4,null,5,6]
输出： [[1],[3,2,4],[5,6]]
示例 2： 输入： root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
输出： [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]
提示： 树的高度不会超过 1000 树的节点总数在 [0, 104] 之间 解题思路 层序遍历 使用队列记录遍历到的结点，从左往右逐层扫描。
func levelOrder(root *Node) [][]int { if root == nil { return nil } ans := make([][]int, 0, 1) queue := list.New() queue.PushBack(root) layerCnt := 1 // 记录下一层的结点数，提前开辟空间 for queue.Len() &amp;gt; 0 { layerElems := make([]int, 0, layerCnt) // 当前层元素 layerCnt = 0 // 归零，计算下一层的结点数 // 遍历当前层 for i := queue.</description>
    </item>
    
    <item>
      <title>Leetcode 796. 旋转字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-796.-%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 07 Apr 2022 09:30:04 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-796.-%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/rotate-string/
难度： 简单
题目描述 给定两个字符串, s 和 goal。如果在若干次旋转操作之后，s 能变成 goal ，那么返回 true 。
s 的 旋转操作 就是将 s 最左边的字符移动到最右边。 例如, 若 s = &#39;abcde&#39;，在旋转一次之后结果就是 &#39;bcdea&#39; 。
示例 1： 输入： s = &amp;ldquo;abcde&amp;rdquo;, goal = &amp;ldquo;cdeab&amp;rdquo;
输出： true
示例 2： 输入： s = &amp;ldquo;abcde&amp;rdquo;, goal = &amp;ldquo;abced&amp;rdquo;
输出： false
提示： 1 &amp;lt;= s.length, goal.length &amp;lt;= 100 s 和 goal 由小写英文字母组成 解题思路 模拟 对字符串 s 进行 n 次旋转后，其结果将是从第 n 个字符开始，循环遍历到第 n-1 个字符为止，后续坐标需要对 len(s) 取模。</description>
    </item>
    
    <item>
      <title>Leetcode 762. 二进制表示中质数个计算置位</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-762.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%AD%E8%B4%A8%E6%95%B0%E4%B8%AA%E8%AE%A1%E7%AE%97%E7%BD%AE%E4%BD%8D/</link>
      <pubDate>Tue, 05 Apr 2022 11:27:20 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-762.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%AD%E8%B4%A8%E6%95%B0%E4%B8%AA%E8%AE%A1%E7%AE%97%E7%BD%AE%E4%BD%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/prime-number-of-set-bits-in-binary-representation/
难度： 简单
题目描述 给你两个整数 left 和 right ，在闭区间 [left, right] 范围内，统计并返回 计算置位位数为质数 的整数个数。
计算置位位数 就是二进制表示中 1 的个数。
例如， 21 的二进制表示 10101 有 3 个计算置位。 示例 1： 输入： left = 6, right = 10
输出： 4
解释：
6 -&amp;gt; 110 (2 个计算置位，2 是质数)
7 -&amp;gt; 111 (3 个计算置位，3 是质数)
9 -&amp;gt; 1001 (2 个计算置位，2 是质数)
10-&amp;gt; 1010 (2 个计算置位，2 是质数)
共计 4 个计算置位为质数的数字。
示例 2： 输入： left = 10, right = 15</description>
    </item>
    
    <item>
      <title>Leetcode 307. 区域和检索 - 数组可修改</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-307.-%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2-%E6%95%B0%E7%BB%84%E5%8F%AF%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Mon, 04 Apr 2022 10:35:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-307.-%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2-%E6%95%B0%E7%BB%84%E5%8F%AF%E4%BF%AE%E6%94%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/range-sum-query-mutable/
难度： 中等
题目描述 给你一个数组 nums ，请你完成两类查询。
其中一类查询要求 更新 数组 nums 下标对应的值 另一类查询要求返回数组 nums 中索引 left 和索引 right 之间（ 包含 ）的nums元素的 和 ，其中 left &amp;lt;= right 实现 NumArray 类：
NumArray(int[] nums) 用整数数组 nums 初始化对象 void update(int index, int val) 将 nums[index] 的值 更新 为 val int sumRange(int left, int right) 返回数组 nums 中索引 left 和索引 right 之间（ 包含 ）的nums元素的 和 （即，nums[left] + nums[left + 1], ..., nums[right]） 示例： 输入：</description>
    </item>
    
    <item>
      <title>Leetcode 744. 寻找比目标字母大的最小字母</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-744.-%E5%AF%BB%E6%89%BE%E6%AF%94%E7%9B%AE%E6%A0%87%E5%AD%97%E6%AF%8D%E5%A4%A7%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AF%8D/</link>
      <pubDate>Sun, 03 Apr 2022 10:30:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-744.-%E5%AF%BB%E6%89%BE%E6%AF%94%E7%9B%AE%E6%A0%87%E5%AD%97%E6%AF%8D%E5%A4%A7%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target/
难度： 简单
题目描述 给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。
在比较时，字母是依序循环出现的。举个例子：
如果目标字母 target = &#39;z&#39; 并且字符列表为 letters = [&#39;a&#39;, &#39;b&#39;]，则答案返回 &#39;a&#39; 示例 1： 输入： letters = [&amp;ldquo;c&amp;rdquo;, &amp;ldquo;f&amp;rdquo;, &amp;ldquo;j&amp;rdquo;]，target = &amp;ldquo;a&amp;rdquo;
输出： &amp;ldquo;c&amp;rdquo;
示例 2： 输入： letters = [&amp;ldquo;c&amp;rdquo;,&amp;ldquo;f&amp;rdquo;,&amp;ldquo;j&amp;rdquo;], target = &amp;ldquo;c&amp;rdquo;
输出： &amp;ldquo;f&amp;rdquo;
示例 3： 输入： letters = [&amp;ldquo;c&amp;rdquo;,&amp;ldquo;f&amp;rdquo;,&amp;ldquo;j&amp;rdquo;], target = &amp;ldquo;d&amp;rdquo;
输出： &amp;ldquo;f&amp;rdquo;
提示： 2 &amp;lt;= letters.length &amp;lt;= 104 letters[i] 是一个小写字母 letters 按非递减顺序排序 letters 最少包含两个不同的字母 target 是一个小写字母 解题思路 模拟 由于给定的字母是有序的，只需遍历 letters 列表，找出首个比 target 大的字母并返回。</description>
    </item>
    
    <item>
      <title>Leetcode 954. 二倍数对数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-954.-%E4%BA%8C%E5%80%8D%E6%95%B0%E5%AF%B9%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 01 Apr 2022 10:21:31 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-954.-%E4%BA%8C%E5%80%8D%E6%95%B0%E5%AF%B9%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/range-sum-of-bst/
难度： 中等
题目描述 给定一个长度为偶数的整数数组 arr，只有对 arr 进行重组后可以满足 “对于每个 0 &amp;lt;= i &amp;lt; len(arr) / 2，都有 arr[2 * i + 1] = 2 * arr[2 * i]” 时，返回 true；否则，返回 false。
示例 1： 输入： arr = [3,1,3,6]
输出： false
示例 2： 输入： arr = [2,1,2,6]
输出： false
示例 3： 输入： arr = [4,-2,2,-4]
输出： true
解释： 可以用 [-2,-4] 和 [2,4] 这两组组成 [-2,-4,2,4] 或是 [2,4,-2,-4]
提示： 0 &amp;lt;= arr.length &amp;lt;= 3 * 104 arr.</description>
    </item>
    
    <item>
      <title>Leetcode 728. 自除数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-728.-%E8%87%AA%E9%99%A4%E6%95%B0/</link>
      <pubDate>Thu, 31 Mar 2022 09:48:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-728.-%E8%87%AA%E9%99%A4%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/self-dividing-numbers/
难度： 简单
题目描述 自除数 是指可以被它包含的每一位数整除的数。
例如，128 是一个 自除数 ，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。 自除数 不允许包含 0 。
给定两个整数 left 和 right ，返回一个列表，列表的元素是范围 [left, right] 内所有的 自除数 。
示例 1： 输入： left = 1, right = 22
输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
示例 2： 输入： left = 47, right = 85</description>
    </item>
    
    <item>
      <title>Leetcode 2024. 考试的最大困扰度</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2024.-%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9B%B0%E6%89%B0%E5%BA%A6/</link>
      <pubDate>Tue, 29 Mar 2022 11:40:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2024.-%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9B%B0%E6%89%B0%E5%BA%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam/
难度： 中等
题目描述 一位老师正在出一场由 n 道判断题构成的考试，每道题的答案为 true （用 &#39;T&#39; 表示）或者 false （用 &#39;F&#39; 表示）。老师想增加学生对自己做出答案的不确定性，方法是 最大化 有 连续相同 结果的题数。（也就是连续出现 true 或者连续出现 false）。
给你一个字符串 answerKey ，其中 answerKey[i] 是第 i 个问题的正确结果。除此以外，还给你一个整数 k ，表示你能进行以下操作的最多次数：
每次操作中，将问题的正确答案改为 &#39;T&#39; 或者 &#39;F&#39; （也就是将 answerKey[i] 改为 &#39;T&#39; 或者 &#39;F&#39; ）。 请你返回在不超过 k 次操作的情况下，最大 连续 &#39;T&#39; 或者 &#39;F&#39; 的数目。
示例 1： 输入： answerKey = &amp;ldquo;TTFF&amp;rdquo;, k = 2
输出： 4
解释： 我们可以将两个 &amp;lsquo;F&amp;rsquo; 都变为 &amp;lsquo;T&amp;rsquo; ，得到 answerKey = &amp;ldquo;TTTT&amp;rdquo; 。</description>
    </item>
    
    <item>
      <title>Leetcode 693. 交替位二进制数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-693.-%E4%BA%A4%E6%9B%BF%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0/</link>
      <pubDate>Mon, 28 Mar 2022 11:02:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-693.-%E4%BA%A4%E6%9B%BF%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/binary-number-with-alternating-bits/
难度： 简单
题目描述 给定一个正整数，检查它的二进制表示是否总是 0、1 交替出现：换句话说，就是二进制表示中相邻两位的数字永不相同。
示例 1： 输入： n = 5
输出： true
解释： 5 的二进制表示是：101
示例 2： 输入： n = 7
输出： false
解释： 7 的二进制表示是：111.
示例 3： 输入： n = 11
输出： false
解释： 11 的二进制表示是：1011.
提示： 1 &amp;lt;= n &amp;lt;= 231 - 1 解题思路 模拟 从最低位开始，依次检查相邻两位是否相同。
func hasAlternatingBits(n int) bool { last := n &amp;amp; 1 for n &amp;gt;&amp;gt;= 1; n &amp;gt; 0; n &amp;gt;&amp;gt;= 1 { if n&amp;amp;1 == last { return false } last = n &amp;amp; 1 } return true } 复杂度 时间复杂度：$ O(\log{n}) $ 空间复杂度：$ O(1) $ 位运算 将原数右移一位，则对应位与比其高的原数的位对齐。要求相邻的数字不同，则通过异或运算后，所有的位全部被置为 1，否则说明有相同的相邻位。</description>
    </item>
    
    <item>
      <title>Leetcode 2028. 找出缺失的观测数据</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2028.-%E6%89%BE%E5%87%BA%E7%BC%BA%E5%A4%B1%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sun, 27 Mar 2022 11:20:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2028.-%E6%89%BE%E5%87%BA%E7%BC%BA%E5%A4%B1%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-missing-observations/
难度： 中等
题目描述 现有一份 n + m 次投掷单个 六面 骰子的观测数据，骰子的每个面从 1 到 6 编号。观测数据中缺失了 n 份，你手上只拿到剩余 m 次投掷的数据。幸好你有之前计算过的这 n + m 次投掷数据的 平均值 。
给你一个长度为 m 的整数数组 rolls ，其中 rolls[i] 是第 i 次观测的值。同时给你两个整数 mean 和 n 。
返回一个长度为 n 的数组，包含所有缺失的观测数据，且满足这 n + m 次投掷的 平均值 是 mean 。如果存在多组符合要求的答案，只需要返回其中任意一组即可。如果不存在答案，返回一个空数组。
k 个数字的 平均值 为这些数字求和后再除以 k 。
注意 mean 是一个整数，所以 n + m 次投掷的总和需要被 n + m 整除。
示例 1： 输入： rolls = [3,2,4,3], mean = 4, n = 2</description>
    </item>
    
    <item>
      <title>Leetcode 682. 棒球比赛</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-682.-%E6%A3%92%E7%90%83%E6%AF%94%E8%B5%9B/</link>
      <pubDate>Sat, 26 Mar 2022 10:48:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-682.-%E6%A3%92%E7%90%83%E6%AF%94%E8%B5%9B/</guid>
      <description>链接： https://leetcode-cn.com/problems/baseball-game/
难度： 简单
题目描述 你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。
比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：
整数 x - 表示本回合新获得分数 x &amp;quot;+&amp;quot; - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。 &amp;quot;D&amp;quot; - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。 &amp;quot;C&amp;quot; - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。 请你返回记录中所有得分的总和。
示例 1： 输入： ops = [&amp;ldquo;5&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;C&amp;rdquo;,&amp;ldquo;D&amp;rdquo;,&amp;quot;+&amp;quot;]
输出： 30
解释：
&amp;ldquo;5&amp;rdquo; - 记录加 5 ，记录现在是 [5]
&amp;ldquo;2&amp;rdquo; - 记录加 2 ，记录现在是 [5, 2]
&amp;ldquo;C&amp;rdquo; - 使前一次得分的记录无效并将其移除，记录现在是 [5].
&amp;ldquo;D&amp;rdquo; - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].
&amp;ldquo;+&amp;rdquo; - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].</description>
    </item>
    
    <item>
      <title>Leetcode 172. 阶乘后的零</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-172.-%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/</link>
      <pubDate>Fri, 25 Mar 2022 10:13:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-172.-%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/</guid>
      <description>链接： https://leetcode-cn.com/problems/factorial-trailing-zeroes/
难度： 中等
题目描述 给定一个整数 n ，返回 n! 结果中尾随零的数量。
提示 n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1
示例 1： 输入： n = 3
输出： 0
解释： 3! = 6 ，不含尾随 0
示例 2： 输入： n = 5
输出： 1
解释： 5! = 120 ，有一个尾随 0
示例 3： 输入： n = 0
输出： 0
提示： 0 &amp;lt;= n &amp;lt;= 104 进阶： 你可以设计并实现对数时间复杂度的算法来解决此问题吗？</description>
    </item>
    
    <item>
      <title>Leetcode 661. 图片平滑器</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-661.-%E5%9B%BE%E7%89%87%E5%B9%B3%E6%BB%91%E5%99%A8/</link>
      <pubDate>Thu, 24 Mar 2022 10:53:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-661.-%E5%9B%BE%E7%89%87%E5%B9%B3%E6%BB%91%E5%99%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/image-smoother/
难度： 简单
题目描述 图像平滑器 是大小为 3 x 3 的过滤器，用于对图像的每个单元格平滑处理，平滑处理后单元格的值为该单元格的平均灰度。
每个单元格的 平均灰度 定义为：该单元格自身及其周围的 8 个单元格的平均值，结果需向下取整。（即，需要计算蓝色平滑器中 9 个单元格的平均值）。
如果一个单元格周围存在单元格缺失的情况，则计算平均灰度时不考虑缺失的单元格（即，需要计算红色平滑器中 4 个单元格的平均值）。
给你一个表示图像灰度的 m x n 整数矩阵 img ，返回对图像的每个单元格平滑处理后的图像 。
示例 1： 输入： img = [[1,1,1],[1,0,1],[1,1,1]]
输出： [[0, 0, 0],[0, 0, 0], [0, 0, 0]]
解释：
对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0
对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0
对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0</description>
    </item>
    
    <item>
      <title>Leetcode 2038. 如果相邻两个颜色均相同则删除当前颜色</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2038.-%E5%A6%82%E6%9E%9C%E7%9B%B8%E9%82%BB%E4%B8%A4%E4%B8%AA%E9%A2%9C%E8%89%B2%E5%9D%87%E7%9B%B8%E5%90%8C%E5%88%99%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E9%A2%9C%E8%89%B2/</link>
      <pubDate>Tue, 22 Mar 2022 10:48:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2038.-%E5%A6%82%E6%9E%9C%E7%9B%B8%E9%82%BB%E4%B8%A4%E4%B8%AA%E9%A2%9C%E8%89%B2%E5%9D%87%E7%9B%B8%E5%90%8C%E5%88%99%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E9%A2%9C%E8%89%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/
难度： 中等
题目描述 总共有 n 个颜色片段排成一列，每个颜色片段要么是 &#39;A&#39; 要么是 &#39;B&#39; 。给你一个长度为 n 的字符串 colors ，其中 colors[i] 表示第 i 个颜色片段的颜色。
Alice 和 Bob 在玩一个游戏，他们 轮流 从这个字符串中删除颜色。Alice 先手 。
如果一个颜色片段为 &#39;A&#39; 且 相邻两个颜色 都是颜色 &#39;A&#39; ，那么 Alice 可以删除该颜色片段。Alice 不可以 删除任何颜色 &#39;B&#39; 片段。 如果一个颜色片段为 &#39;B&#39; 且 相邻两个颜色 都是颜色 &#39;B&#39; ，那么 Bob 可以删除该颜色片段。Bob 不可以 删除任何颜色 &#39;A&#39; 片段。 Alice 和 Bob 不能 从字符串两端删除颜色片段。 如果其中一人无法继续操作，则该玩家 输 掉游戏且另一玩家 获胜 。 假设 Alice 和 Bob 都采用最优策略，如果 Alice 获胜，请返回 true，否则 Bob 获胜，返回 false。</description>
    </item>
    
    <item>
      <title>Leetcode 653. 两数之和 IV - 输入 BST</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-653.-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-iv-%E8%BE%93%E5%85%A5-bst/</link>
      <pubDate>Mon, 21 Mar 2022 10:22:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-653.-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-iv-%E8%BE%93%E5%85%A5-bst/</guid>
      <description>链接： https://leetcode-cn.com/problems/2-keys-keyboard/
难度： 中等
题目描述 给定一个二叉搜索树 root 和一个目标结果 k，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。
示例 1： 输入： root = [5,3,6,2,4,null,7], k = 9
输出： true
示例 2： 输入： root = [5,3,6,2,4,null,7], k = 28
输出： false
提示： 二叉树的节点个数的范围是 [1, 104]. -104 &amp;lt;= Node.val &amp;lt;= 104 root 为二叉搜索树 -105 &amp;lt;= k &amp;lt;= 105 解题思路 先序遍历 + 哈希 采用先序遍历遍历整颗树，将之前遍历到的所有数记录到哈希表中。
对于每个新遍历到的数字，在哈希表中寻找令其和为 k 的数。
func findTarget(root *TreeNode, k int) bool { exist := make(map[int]struct{}) var dfs func(*TreeNode) bool dfs = func(node *TreeNode) bool { if node == nil { return false } if _, ok := exist[k-node.</description>
    </item>
    
    <item>
      <title>Leetcode 2039. 网络空闲的时刻</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2039.-%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B2%E7%9A%84%E6%97%B6%E5%88%BB/</link>
      <pubDate>Sun, 20 Mar 2022 10:47:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2039.-%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B2%E7%9A%84%E6%97%B6%E5%88%BB/</guid>
      <description>链接： https://leetcode-cn.com/problems/stock-price-fluctuation/
难度： 中等
题目描述 给你一个有 n 个服务器的计算机网络，服务器编号为 0 到 n - 1 。同时给你一个二维整数数组 edges ，其中 edges[i] = [ui, vi] 表示服务器 ui 和 vi 之间有一条信息线路，在 一秒 内它们之间可以传输 任意 数目的信息。再给你一个长度为 n 且下标从 0 开始的整数数组 patience 。
题目保证所有服务器都是 相通 的，也就是说一个信息从任意服务器出发，都可以通过这些信息线路直接或间接地到达任何其他服务器。
编号为 0 的服务器是 主 服务器，其他服务器为 数据 服务器。每个数据服务器都要向主服务器发送信息，并等待回复。信息在服务器之间按 最优 线路传输，也就是说每个信息都会以 最少时间 到达主服务器。主服务器会处理 所有 新到达的信息并 立即 按照每条信息来时的路线 反方向 发送回复信息。
在 0 秒的开始，所有数据服务器都会发送各自需要处理的信息。从第 1 秒开始，每 一秒最 开始 时，每个数据服务器都会检查它是否收到了主服务器的回复信息（包括新发出信息的回复信息）：
如果还没收到任何回复信息，那么该服务器会周期性 重发 信息。数据服务器 i 每 patience[i] 秒都会重发一条信息，也就是说，数据服务器 i 在上一次发送信息给主服务器后的 patience[i] 秒 后 会重发一条信息给主服务器。 否则，该数据服务器 不会重发 信息。 当没有任何信息在线路上传输或者到达某服务器时，该计算机网络变为 空闲 状态。</description>
    </item>
    
    <item>
      <title>Leetcode 606. 根据二叉树创建字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-606.-%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sat, 19 Mar 2022 10:59:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-606.-%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/construct-string-from-binary-tree/
难度： 简单
题目描述 你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。
空节点则用一对空括号 &amp;ldquo;()&amp;rdquo; 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。
示例 1： 输入： 二叉树: [1,2,3,4]
1
/ \
2 3
/ 4
输出： &amp;ldquo;1(2(4))(3)&amp;rdquo;
解释： 原本将是“1(2(4)())(3())”，
在你省略所有不必要的空括号对之后，
它将是“1(2(4))(3)”。
示例 2： 输入： 二叉树: [1,2,3,null,4]
1
/ \
2 3
\
4
输出： &amp;ldquo;1(2()(4))(3)&amp;rdquo;
解释： 和第一个示例相似，
除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。
解题思路 先序遍历 采用先序遍历遍历整棵树。对于遍历到的结点而言，当遍历子树时，需要在两侧加上括号，有如下两种情况：
当任意子树不为空时，左子树遍历结果必然需要加上括号； 仅当右子树不为空时，右子树需要加括号，否则会产生无效的空括号对。 func tree2str(root *TreeNode) string { ans := make([]byte, 0, 10) var dfs func(node *TreeNode) dfs = func(node *TreeNode) { if node == nil { return } ans = append(ans, strconv.</description>
    </item>
    
    <item>
      <title>Leetcode 2043. 简易银行系统</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2043.-%E7%AE%80%E6%98%93%E9%93%B6%E8%A1%8C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 18 Mar 2022 10:31:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2043.-%E7%AE%80%E6%98%93%E9%93%B6%E8%A1%8C%E7%B3%BB%E7%BB%9F/</guid>
      <description>链接： https://leetcode-cn.com/problems/simple-bank-system/
难度： 中等
题目描述 你的任务是为一个很受欢迎的银行设计一款程序，以自动化执行所有传入的交易（转账，存款和取款）。银行共有 n 个账户，编号从 1 到 n 。每个账号的初始余额存储在一个下标从 0 开始的整数数组 balance 中，其中第 (i + 1) 个账户的初始余额是 balance[i] 。
请你执行所有 有效的 交易。如果满足下面全部条件，则交易 有效 ：
指定的账户数量在 1 和 n 之间，且 取款或者转账需要的钱的总数 小于或者等于 账户余额。 实现 Bank 类：
Bank(long[] balance) 使用下标从 0 开始的整数数组 balance 初始化该对象。 boolean transfer(int account1, int account2, long money) 从编号为 account1 的账户向编号为 account2 的账户转帐 money 美元。如果交易成功，返回 true ，否则，返回 false 。 boolean deposit(int account, long money) 向编号为 account 的账户存款 money 美元。如果交易成功，返回 true ；否则，返回 false 。 boolean withdraw(int account, long money) 从编号为 account 的账户取款 money 美元。如果交易成功，返回 true ；否则，返回 false 。 示例： 输入：</description>
    </item>
    
    <item>
      <title>Leetcode 720. 词典中最长的单词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-720.-%E8%AF%8D%E5%85%B8%E4%B8%AD%E6%9C%80%E9%95%BF%E7%9A%84%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Thu, 17 Mar 2022 09:59:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-720.-%E8%AF%8D%E5%85%B8%E4%B8%AD%E6%9C%80%E9%95%BF%E7%9A%84%E5%8D%95%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/1-bit-and-2-bit-characters/
难度： 简单
题目描述 给出一个字符串数组 words 组成的一本英语词典。返回 words 中最长的一个单词，该单词是由 words 词典中其他单词逐步添加一个字母组成。
若其中有多个可行的答案，则返回答案中字典序最小的单词。若无答案，则返回空字符串。
示例 1： 输入： words = [&amp;ldquo;w&amp;rdquo;,&amp;ldquo;wo&amp;rdquo;,&amp;ldquo;wor&amp;rdquo;,&amp;ldquo;worl&amp;rdquo;, &amp;ldquo;world&amp;rdquo;]
输出： &amp;ldquo;world&amp;rdquo;
解释： 单词&amp;quot;world&amp;quot;可由&amp;quot;w&amp;quot;, &amp;ldquo;wo&amp;rdquo;, &amp;ldquo;wor&amp;rdquo;, 和 &amp;ldquo;worl&amp;quot;逐步添加一个字母组成。
示例 2： 输入： words = [&amp;ldquo;a&amp;rdquo;, &amp;ldquo;banana&amp;rdquo;, &amp;ldquo;app&amp;rdquo;, &amp;ldquo;appl&amp;rdquo;, &amp;ldquo;ap&amp;rdquo;, &amp;ldquo;apply&amp;rdquo;, &amp;ldquo;apple&amp;rdquo;]
输出： &amp;ldquo;apple&amp;rdquo;
解释： &amp;ldquo;apply&amp;rdquo; 和 &amp;ldquo;apple&amp;rdquo; 都能由词典中的单词组成。但是 &amp;ldquo;apple&amp;rdquo; 的字典序小于 &amp;ldquo;apply&amp;rdquo;
提示： 1 &amp;lt;= words.length &amp;lt;= 1000 1 &amp;lt;= words[i].length &amp;lt;= 30 所有输入的字符串 words[i] 都只包含小写字母。 解题思路 排序+哈希 对字符串数组按照长度进行一轮排序，然后进行遍历，可以保证前缀先进行遍历。
将遍历过的满足条件的字符串加入到哈希表中，每次遍历查看前缀是否在哈希表中，若满足条件也将起加入到哈希表中。
遍历过程中维护最长且字典序最小的字符串。
func longestWord(words []string) string { sort.</description>
    </item>
    
    <item>
      <title>Leetcode 2044. 统计按位或能得到最大值的子集数目</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2044.-%E7%BB%9F%E8%AE%A1%E6%8C%89%E4%BD%8D%E6%88%96%E8%83%BD%E5%BE%97%E5%88%B0%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84%E5%AD%90%E9%9B%86%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Tue, 15 Mar 2022 10:55:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2044.-%E7%BB%9F%E8%AE%A1%E6%8C%89%E4%BD%8D%E6%88%96%E8%83%BD%E5%BE%97%E5%88%B0%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84%E5%AD%90%E9%9B%86%E6%95%B0%E7%9B%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/
难度： 中等
题目描述 给你一个整数数组 nums ，请你找出 nums 子集 按位或 可能得到的 最大值 ，并返回按位或能得到最大值的 不同非空子集的数目 。
如果数组 a 可以由数组 b 删除一些元素（或不删除）得到，则认为数组 a 是数组 b 的一个 子集 。如果选中的元素下标位置不一样，则认为两个子集 不同 。
对数组 a 执行 按位或 ，结果等于 a[0] OR a[1] OR &amp;hellip; OR a[a.length - 1]（下标从 0 开始）。
示例 1： 输入： nums = [3,1]
输出： 2
解释： 子集按位或能得到的最大值是 3 。有 2 个子集按位或可以得到 3 ：
[3] [3,1] 示例 2： 输入： nums = [2,2,2]
输出： 7</description>
    </item>
    
    <item>
      <title>Leetcode 599. 两个列表的最小索引总和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-599.-%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/</link>
      <pubDate>Mon, 14 Mar 2022 10:36:50 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-599.-%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/
难度： 简单
题目描述 假设 Andy 和 Doris 想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。
你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设答案总是存在。
示例 1： 输入： list1 = [&amp;ldquo;Shogun&amp;rdquo;, &amp;ldquo;Tapioca Express&amp;rdquo;, &amp;ldquo;Burger King&amp;rdquo;, &amp;ldquo;KFC&amp;rdquo;]，list2 = [&amp;ldquo;Piatti&amp;rdquo;, &amp;ldquo;The Grill at Torrey Pines&amp;rdquo;, &amp;ldquo;Hungry Hunter Steakhouse&amp;rdquo;, &amp;ldquo;Shogun&amp;rdquo;]
输出： [&amp;ldquo;Shogun&amp;rdquo;]
解释： 他们唯一共同喜爱的餐厅是“Shogun”。
示例 2： 输入： list1 = [&amp;ldquo;Shogun&amp;rdquo;, &amp;ldquo;Tapioca Express&amp;rdquo;, &amp;ldquo;Burger King&amp;rdquo;, &amp;ldquo;KFC&amp;rdquo;]，list2 = [&amp;ldquo;KFC&amp;rdquo;, &amp;ldquo;Shogun&amp;rdquo;, &amp;ldquo;Burger King&amp;rdquo;]
输出： [&amp;ldquo;Shogun&amp;rdquo;]
解释： 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。
注意： 1 &amp;lt;= list1.length, list2.length &amp;lt;= 1000 1 &amp;lt;= list1[i].length, list2[i].length &amp;lt;= 30 list1[i] 和 list2[i] 由空格 &#39; &#39; 和英文字母组成。 list1 的所有字符串都是 唯一 的。 list2 中的所有字符串都是 唯一 的。 解题思路 暴力求解 两层循环暴力寻找两个人都喜爱的餐厅，然后找出所有下标和最小的餐厅。</description>
    </item>
    
    <item>
      <title>Leetcode 393. UTF-8 编码验证</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-393.-utf-8-%E7%BC%96%E7%A0%81%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Sun, 13 Mar 2022 09:56:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-393.-utf-8-%E7%BC%96%E7%A0%81%E9%AA%8C%E8%AF%81/</guid>
      <description>链接： https://leetcode-cn.com/problems/utf-8-validation/
难度： 中等
题目描述 给定一个表示数据的整数数组 data ，返回它是否为有效的 UTF-8 编码。
UTF-8 中的一个字符可能的长度为 1 到 4 字节，遵循以下的规则：
对于 1 字节 的字符，字节的第一位设为 0 ，后面 7 位为这个符号的 unicode 码。 对于 n 字节 的字符 (n &amp;gt; 1)，第一个字节的前 n 位都设为1，第 n+1 位设为 0 ，后面字节的前两位一律设为 10 。剩下的没有提及的二进制位，全部为这个符号的 unicode 码。 这是 UTF-8 编码的工作方式：
Char. number range | UTF-8 octet sequence (hexadecimal) | (binary) --------------------+--------------------------------------------- 0000 0000-0000 007F | 0xxxxxxx 0000 0080-0000 07FF | 110xxxxx 10xxxxxx 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 注意： 输入是整数数组。只有每个整数的 最低 8 个有效位 用来存储数据。这意味着每个整数只表示 1 字节的数据。</description>
    </item>
    
    <item>
      <title>Leetcode 590. N 叉树的后序遍历</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-590.-n-%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 12 Mar 2022 09:47:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-590.-n-%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>链接： https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/
难度： 简单
题目描述 给定一个 n 叉树的根节点 root ，返回 其节点值的 后序遍历 。
n 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 null 分隔（请参见示例）。
示例 1： 输入： root = [1,null,3,2,4,null,5,6]
输出： [5,6,3,2,4,1]
示例 2： 输入： root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
输出： [2,6,14,11,7,3,12,8,4,13,9,10,5,1]
提示： 节点总数在范围 [0, 104] 内 0 &amp;lt;= Node.val &amp;lt;= 104 n 叉树的高度小于或等于 1000 进阶： 递归法很简单，你可以使用迭代法完成此题吗?
解题思路 递归 对于当前遍历到的结点，构造一个队列，递归的遍历每个子结点，将找到的值添加到队列尾，然后将当前结点的值添加到队列尾部。
func preorder(root *Node) []int { if root == nil { return nil } elems := []int{root.Val} for _, child := range root.</description>
    </item>
    
    <item>
      <title>Leetcode 2049. 统计最高分的节点数目</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2049.-%E7%BB%9F%E8%AE%A1%E6%9C%80%E9%AB%98%E5%88%86%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Fri, 11 Mar 2022 10:21:02 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2049.-%E7%BB%9F%E8%AE%A1%E6%9C%80%E9%AB%98%E5%88%86%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E7%9B%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/
难度： 中等
题目描述 给你一棵根节点为 0 的 二叉树 ，它总共有 n 个节点，节点编号为 0 到 n - 1 。同时给你一个下标从 0 开始的整数数组 parents 表示这棵树，其中 parents[i] 是节点 i 的父节点。由于节点 0 是根，所以 parents[0] == -1 。
一个子树的 大小 为这个子树内节点的数目。每个节点都有一个与之关联的 分数 。求出某个节点分数的方法是，将这个节点和与它相连的边全部 删除 ，剩余部分是若干个 非空 子树，这个节点的 分数 为所有这些子树 大小的乘积 。
请你返回有 最高得分 节点的 数目 。
示例 1： 输入： parents = [-1,2,0,2,0]
输出： 3
解释：
节点 0 的分数为：3 * 1 = 3 节点 1 的分数为：4 = 4 节点 2 的分数为：1 * 1 * 2 = 2 节点 3 的分数为：4 = 4 节点 4 的分数为：4 = 4</description>
    </item>
    
    <item>
      <title>Leetcode 589. N 叉树的前序遍历</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-589.-n-%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Thu, 10 Mar 2022 10:18:21 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-589.-n-%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>链接： https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/
难度： 简单
题目描述 给定一个 n 叉树的根节点 root ，返回 其节点值的 前序遍历 。
n 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 null 分隔（请参见示例）。
示例 1： 输入： root = [1,null,3,2,4,null,5,6]
输出： [1,3,5,6,2,4]
示例 2： 输入： root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
输出： [1,2,3,6,7,11,14,4,8,12,5,9,13,10]
提示： 节点总数在范围 [0, 104] 内 0 &amp;lt;= Node.val &amp;lt;= 104 n 叉树的高度小于或等于 1000 进阶： 递归法很简单，你可以使用迭代法完成此题吗?
解题思路 递归 对于当前遍历到的结点，构造一个队列，首个元素即为当前结点的值。然后递归的遍历每个子结点，将获得的结点值添加到队列尾部。
func preorder(root *Node) []int { if root == nil { return nil } elems := []int{root.Val} for _, child := range root.</description>
    </item>
    
    <item>
      <title>Leetcode 2055. 蜡烛之间的盘子</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2055.-%E8%9C%A1%E7%83%9B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%98%E5%AD%90/</link>
      <pubDate>Tue, 08 Mar 2022 17:12:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2055.-%E8%9C%A1%E7%83%9B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%98%E5%AD%90/</guid>
      <description>链接： https://leetcode-cn.com/problems/plates-between-candles/
难度： 中等
题目描述 给你一个长桌子，桌子上盘子和蜡烛排成一列。给你一个下标从 0 开始的字符串 s ，它只包含字符 &#39;*&#39; 和 &#39;|&#39; ，其中 &#39;*&#39; 表示一个 盘子 ，&#39;|&#39; 表示一支 蜡烛 。
同时给你一个下标从 0 开始的二维整数数组 queries ，其中 queries[i] = [lefti, righti] 表示 子字符串 s[lefti&amp;hellip;righti] （包含左右端点的字符）。对于每个查询，你需要找到 子字符串中 在 两支蜡烛之间 的盘子的 数目 。如果一个盘子在 子字符串中 左边和右边 都 至少有一支蜡烛，那么这个盘子满足在 两支蜡烛之间 。
比方说，s = &amp;quot;||**||**|*&amp;quot; ，查询 [3, 8] ，表示的是子字符串 &amp;quot;*||**|&amp;quot; 。子字符串中在两支蜡烛之间的盘子数目为 2 ，子字符串中右边两个盘子在它们左边和右边 都 至少有一支蜡烛。 请你返回一个整数数组 answer ，其中 answer[i] 是第 i 个查询的答案。
示例 1： 输入： s = &amp;ldquo;**|**|***|&amp;rdquo;, queries = [[2,5],[5,9]]</description>
    </item>
    
    <item>
      <title>Leetcode 504. 七进制数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-504.-%E4%B8%83%E8%BF%9B%E5%88%B6%E6%95%B0/</link>
      <pubDate>Mon, 07 Mar 2022 09:33:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-504.-%E4%B8%83%E8%BF%9B%E5%88%B6%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/base-7/
难度： 简单
题目描述 给定一个整数 num，将其转化为 7 进制，并以字符串形式输出。
示例 1： 输入： num = 100
输出： &amp;ldquo;202&amp;rdquo;
示例 2： 输入： num = -7
输出： &amp;ldquo;-10&amp;rdquo;
提示： -107 &amp;lt;= num &amp;lt;= 107 解题思路 数学 除7取余，逆序排列。负数需要转换为对应相反数求得7进制，之后再在前面加上 &#39;-&#39;。
func convertToBase7(num int) string { if num == 0 { return &amp;#34;0&amp;#34; } convertPositiveToBase7 := func(num int) string { ans := make([]byte, 0, 11) for ; num &amp;gt; 0; num /= 7 { ans = append(ans, byte(&amp;#39;0&amp;#39;+num%7)) } for i := len(ans)/2 - 1; i &amp;gt;= 0; i-- { ans[i], ans[len(ans)-1-i] = ans[len(ans)-1-i], ans[i] } return string(ans) } if num &amp;lt; 0 { return &amp;#34;-&amp;#34; + convertPositiveToBase7(-num) } return convertPositiveToBase7(num) } 复杂度 时间复杂度：$ O(\log{\lvert{num}\rvert}) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 2100. 适合打劫银行的日子</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2100.-%E9%80%82%E5%90%88%E6%89%93%E5%8A%AB%E9%93%B6%E8%A1%8C%E7%9A%84%E6%97%A5%E5%AD%90/</link>
      <pubDate>Sun, 06 Mar 2022 08:59:19 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2100.-%E9%80%82%E5%90%88%E6%89%93%E5%8A%AB%E9%93%B6%E8%A1%8C%E7%9A%84%E6%97%A5%E5%AD%90/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-good-days-to-rob-the-bank/
难度： 中等
题目描述 你和一群强盗准备打劫银行。给你一个下标从 0 开始的整数数组 security ，其中 security[i] 是第 i 天执勤警卫的数量。日子从 0 开始编号。同时给你一个整数 time 。
如果第 i 天满足以下所有条件，我们称它为一个适合打劫银行的日子：
第 i 天前和后都分别至少有 time 天。 第 i 天前连续 time 天警卫数目都是非递增的。 第 i 天后连续 time 天警卫数目都是非递减的。 更正式的，第 i 天是一个合适打劫银行的日子当且仅当：security[i - time] &amp;gt;= security[i - time + 1] &amp;gt;= ... &amp;gt;= security[i] &amp;lt;= ... &amp;lt;= security[i + time - 1] &amp;lt;= security[i + time].
请你返回一个数组，包含 所有 适合打劫银行的日子（下标从 0 开始）。返回的日子可以 任意 顺序排列。</description>
    </item>
    
    <item>
      <title>Leetcode 521. 最长特殊序列 Ⅰ</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-521.-%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sat, 05 Mar 2022 10:15:10 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-521.-%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-uncommon-subsequence-i/
难度： 简单
题目描述 给你两个字符串 a 和 b，请返回 这两个字符串中 最长的特殊序列 。如果不存在，则返回 -1 。
「最长特殊序列」 定义如下：该序列为 某字符串独有的最长子序列（即不能是其他字符串的子序列） 。
字符串 s 的子序列是在从 s 中删除任意数量的字符后可以获得的字符串。
例如，&amp;quot;abc&amp;quot; 是 &amp;quot;aebdc&amp;quot; 的子序列，因为删除 &amp;ldquo;aebdc&amp;rdquo; 中斜体加粗的字符可以得到 &amp;quot;abc&amp;quot; 。 &amp;quot;aebdc&amp;quot; 的子序列还包括 &amp;quot;aebdc&amp;quot; 、 &amp;quot;aeb&amp;quot; 和 &amp;quot;&amp;quot; (空字符串)。
示例 1： 输入： a = &amp;ldquo;aba&amp;rdquo;, b = &amp;ldquo;cdc&amp;rdquo;
输出： 3
解释： 最长特殊序列可为 &amp;ldquo;aba&amp;rdquo; (或 &amp;ldquo;cdc&amp;rdquo;)，两者均为自身的子序列且不是对方的子序列。
示例 2： 输入： a = &amp;ldquo;aaa&amp;rdquo;, b = &amp;ldquo;bbb&amp;rdquo;
输出： 3
解释： 最长特殊序列是 &amp;ldquo;aaa&amp;rdquo; 和 &amp;ldquo;bbb&amp;rdquo; 。</description>
    </item>
    
    <item>
      <title>Leetcode 2104. 子数组范围和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2104.-%E5%AD%90%E6%95%B0%E7%BB%84%E8%8C%83%E5%9B%B4%E5%92%8C/</link>
      <pubDate>Fri, 04 Mar 2022 09:43:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2104.-%E5%AD%90%E6%95%B0%E7%BB%84%E8%8C%83%E5%9B%B4%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/sum-of-subarray-ranges/
难度： 中等
题目描述 给你一个整数数组 nums 。nums 中，子数组的 范围 是子数组中最大元素和最小元素的差值。
返回 nums 中 所有 子数组范围的 和 。
子数组是数组中一个连续 非空 的元素序列。
示例 1： 输入： nums = [1,2,3]
输出： 4
解释： nums 的 6 个子数组如下所示：
[1]，范围 = 最大 - 最小 = 1 - 1 = 0
[2]，范围 = 2 - 2 = 0
[3]，范围 = 3 - 3 = 0
[1,2]，范围 = 2 - 1 = 1
[2,3]，范围 = 3 - 2 = 1</description>
    </item>
    
    <item>
      <title>Leetcode 258. 各位相加</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-258.-%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Thu, 03 Mar 2022 09:28:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-258.-%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/add-digits/
难度： 简单
题目描述 给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。
示例 1： 输入： num = 38
输出： 2
解释： 各位相加的过程为：
38 &amp;ndash;&amp;gt; 3 + 8 &amp;ndash;&amp;gt; 11
11 &amp;ndash;&amp;gt; 1 + 1 &amp;ndash;&amp;gt; 2
由于 2 是一位数，所以返回 2。
示例 2： 输入： num = 0
输出： 0
提示： 0 &amp;lt;= num &amp;lt;= 231 - 1 进阶： 你可以不使用循环或者递归，在 $O(1)$ 时间复杂度内解决这个问题吗？
解题思路 模拟 根据题设描述方式，反复对上次计算结果中的每一位进行求和，直至结果小于 10 为止。
func addDigits(num int) int { for num &amp;gt; 9 { sum := 0 for ; num &amp;gt; 0; num /= 10 { sum += num % 10 } num = sum } return num } 复杂度 时间复杂度：$ O(\log{num}) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 6. Z 字形变换</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-6.-z-%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</link>
      <pubDate>Tue, 01 Mar 2022 09:27:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-6.-z-%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</guid>
      <description>链接： https://leetcode-cn.com/problems/zigzag-conversion/
难度： 中等
题目描述 将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。
比如输入字符串为 &amp;quot;PAYPALISHIRING&amp;quot; 行数为 3 时，排列如下：
P A H N A P L S I I G Y I R 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&amp;quot;PAHNAPLSIIGYIR&amp;quot;。
请你实现这个将字符串进行指定行数变换的函数：
string convert(string s, int numRows);
示例 1： 输入： s = &amp;ldquo;PAYPALISHIRING&amp;rdquo;, numRows = 3
输出： &amp;ldquo;PAHNAPLSIIGYIR&amp;rdquo;
示例 2： 输入： s = &amp;ldquo;PAYPALISHIRING&amp;rdquo;, numRows = 4
输出： &amp;ldquo;PINALSIGYAHRPI&amp;rdquo;
解释：
P I N A L S I G Y A H R P I 示例 3： 输入： s = &amp;ldquo;A&amp;rdquo;, numRows = 1</description>
    </item>
    
    <item>
      <title>Leetcode 553. 最优除法</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-553.-%E6%9C%80%E4%BC%98%E9%99%A4%E6%B3%95/</link>
      <pubDate>Sun, 27 Feb 2022 09:54:09 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-553.-%E6%9C%80%E4%BC%98%E9%99%A4%E6%B3%95/</guid>
      <description>链接： https://leetcode-cn.com/problems/optimal-division/
难度： 中等
题目描述 给定一组 正整数，相邻的整数之间将会进行浮点除法操作。例如， [2,3,4] -&amp;gt; 2 / 3 / 4 。
但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。你需要找出怎么添加括号，才能得到 最大的 结果，并且返回相应的字符串格式的表达式。你的表达式不应该含有冗余的括号。
示例： 输入： [1000,100,10,2]
输出： &amp;ldquo;1000/(100/10/2)&amp;rdquo;
解释：
1000/(100/10/2) = 1000/((100/10)/2) = 200
但是，以下加粗的括号 &amp;ldquo;1000/((100/10)/2)&amp;rdquo; 是冗余的，
因为他们并不影响操作的优先级，所以你需要返回 &amp;ldquo;1000/(100/10/2)&amp;quot;。
其他用例:
1000/(100/10)/2 = 50
1000/(100/(10/2)) = 50
1000/100/10/2 = 0.5
1000/100/(10/2) = 2
说明： 输入数组的长度在 [1, 10] 之间。 数组中每个元素的大小都在 [2, 1000] 之间。 每个测试用例只有一个最优除法解。 解题思路 动态规划 对于一个除式而言，为使得其值最大，则要被除数尽量大，而除数尽量小。
需要从原式中找出使得值最大的分割点，则前半部分结果最大，后半部分结果最小，两部分是原问题的子问题，用动态规划求解。
使用 dp[i][j].max 和 dp[i][j].min 记录下标区间 [i, j] 的最大值和最小值，则有状态转移方程：
初始时，dp[i][i].max = dp[i][j].</description>
    </item>
    
    <item>
      <title>Leetcode 2016. 增量元素之间的最大差值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2016.-%E5%A2%9E%E9%87%8F%E5%85%83%E7%B4%A0%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/</link>
      <pubDate>Sat, 26 Feb 2022 09:40:51 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2016.-%E5%A2%9E%E9%87%8F%E5%85%83%E7%B4%A0%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-difference-between-increasing-elements/
难度： 简单
题目描述 给你一个下标从 0 开始的整数数组 nums ，该数组的大小为 n ，请你计算 nums[j] - nums[i] 能求得的 最大差值 ，其中 0 &amp;lt;= i &amp;lt; j &amp;lt; n 且 nums[i] &amp;lt; nums[j] 。
返回 最大差值 。如果不存在满足要求的 i 和 j ，返回 -1 。
示例 1： 输入： nums = [7,1,5,4]
输出： 4
解释：
最大差值出现在 i = 1 且 j = 2 时，nums[j] - nums[i] = 5 - 1 = 4 。 注意，尽管 i = 1 且 j = 0 时 ，nums[j] - nums[i] = 7 - 1 = 6 &amp;gt; 4 ，但 i &amp;gt; j 不满足题面要求，所以 6 不是有效的答案。</description>
    </item>
    
    <item>
      <title>Leetcode 537. 复数乘法</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-537.-%E5%A4%8D%E6%95%B0%E4%B9%98%E6%B3%95/</link>
      <pubDate>Fri, 25 Feb 2022 09:45:57 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-537.-%E5%A4%8D%E6%95%B0%E4%B9%98%E6%B3%95/</guid>
      <description>链接： https://leetcode-cn.com/problems/complex-number-multiplication/
难度： 中等
题目描述 复数 可以用字符串表示，遵循 &amp;quot;实部+虚部i&amp;quot; 的形式，并满足下述条件：
实部 是一个整数，取值范围是 [-100, 100] 虚部 也是一个整数，取值范围是 [-100, 100] i2 == -1 给你两个字符串表示的复数 num1 和 num2 ，请你遵循复数表示形式，返回表示它们乘积的字符串。
示例 1： 输入： num1 = &amp;ldquo;1+1i&amp;rdquo;, num2 = &amp;ldquo;1+1i&amp;rdquo;
输出： &amp;ldquo;0+2i&amp;rdquo;
解释： (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i ，你需要将它转换为 0+2i 的形式。
示例 2： 输入： num1 = &amp;ldquo;1+-1i&amp;rdquo;, num2 = &amp;ldquo;1+-1i&amp;rdquo;
输出： &amp;ldquo;0+-2i&amp;rdquo;
解释： (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i ，你需要将它转换为 0+-2i 的形式。</description>
    </item>
    
    <item>
      <title>Leetcode 1706. 球会落何处</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1706.-%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84/</link>
      <pubDate>Thu, 24 Feb 2022 09:27:19 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1706.-%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/where-will-the-ball-fall/
难度： 中等
题目描述 用一个大小为 m x n 的二维网格 grid 表示一个箱子。你有 n 颗球。箱子的顶部和底部都是开着的。
箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。
将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。 将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。 在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 &amp;ldquo;V&amp;rdquo; 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。
返回一个大小为 n 的数组 answer ，其中 answer[i] 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 -1 。
示例 1： 输入： grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
输出： [1,-1,-1,-1,-1]
解释： 示例如图：
b0 球开始放在第 0 列上，最终从箱子底部第 1 列掉出。
b1 球开始放在第 1 列上，会卡在第 2、3 列和第 1 行之间的 &amp;ldquo;V&amp;rdquo; 形里。
b2 球开始放在第 2 列上，会卡在第 2、3 列和第 0 行之间的 &amp;ldquo;V&amp;rdquo; 形里。</description>
    </item>
    
    <item>
      <title>Leetcode 917. 仅仅反转字母</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-917.-%E4%BB%85%E4%BB%85%E5%8F%8D%E8%BD%AC%E5%AD%97%E6%AF%8D/</link>
      <pubDate>Wed, 23 Feb 2022 09:33:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-917.-%E4%BB%85%E4%BB%85%E5%8F%8D%E8%BD%AC%E5%AD%97%E6%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/reverse-only-letters/
难度： 简单
题目描述 给你一个字符串 s ，根据下述规则反转字符串：
所有非英文字母保留在原有位置。 所有英文字母（小写或大写）位置反转。 返回反转后的 s 。
示例 1： 输入： s = &amp;ldquo;ab-cd&amp;rdquo;
输出： &amp;ldquo;dc-ba&amp;rdquo;
示例 2： 输入： s = &amp;ldquo;a-bC-dEf-ghIj&amp;rdquo;
输出： &amp;ldquo;j-Ih-gfE-dCba&amp;rdquo;
示例 3： 输入： s = &amp;ldquo;Test1ng-Leet=code-Q!&amp;rdquo;
输出： &amp;ldquo;Qedo1ct-eeLg=ntse-T!&amp;rdquo;
提示： 1 &amp;lt;= s.length &amp;lt;= 100 s 仅由 ASCII 值在范围 [33, 122] 的字符组成 s 不含 &#39;\&amp;quot;&#39; 或 &#39;\\&#39; 解题思路 双指针 使用两个指针分别从两端开始，向中间遍历。
当任一指针指向字符不为字母时，向中间寻找下一个字母；当两个指针指向的字符均为字母时，交换并继续遍历；最终直到两个指针相遇。
func reverseOnlyLetters(s string) string { t := []byte(s) for i, j := 0, len(t)-1; i &amp;lt; j; { if !</description>
    </item>
    
    <item>
      <title>Leetcode 838. 推多米诺</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-838.-%E6%8E%A8%E5%A4%9A%E7%B1%B3%E8%AF%BA/</link>
      <pubDate>Mon, 21 Feb 2022 09:45:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-838.-%E6%8E%A8%E5%A4%9A%E7%B1%B3%E8%AF%BA/</guid>
      <description>链接： https://leetcode-cn.com/problems/push-dominoes/
难度： 中等
题目描述 n 张多米诺骨牌排成一行，将每张多米诺骨牌垂直竖立。在开始时，同时把一些多米诺骨牌向左或向右推。
每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。
如果一张垂直竖立的多米诺骨牌的两侧同时有多米诺骨牌倒下时，由于受力平衡， 该骨牌仍然保持不变。
就这个问题而言，我们会认为一张正在倒下的多米诺骨牌不会对其它正在倒下或已经倒下的多米诺骨牌施加额外的力。
给你一个字符串 dominoes 表示这一行多米诺骨牌的初始状态，其中：
dominoes[i] = &#39;L&#39;，表示第 i 张多米诺骨牌被推向左侧， dominoes[i] = &#39;R&#39;，表示第 i 张多米诺骨牌被推向右侧， dominoes[i] = &#39;.&#39;，表示没有推动第 i 张多米诺骨牌。 返回表示最终状态的字符串。
示例 1： 输入： dominoes = &amp;ldquo;RR.L&amp;rdquo;
输出： &amp;ldquo;RR.L&amp;rdquo;
解释： 第一张多米诺骨牌没有给第二张施加额外的力。
示例 2： 输入： dominoes = &amp;ldquo;.L.R&amp;hellip;LR..L..&amp;rdquo;
输出： &amp;ldquo;LL.RR.LLRRLL..&amp;rdquo;
提示： -n == dominoes.length -1 &amp;lt;= n &amp;lt;= 105
dominoes[i] 为 &#39;L&#39;、&#39;R&#39; 或 &#39;.&#39; 解题思路 广度优先搜索 所有一开始被推的骨牌为起始状态，进行广度优先搜索，判定倒向一侧的下一个多米诺骨牌的状态：
当已经倒下时，忽略，不进行传递； 当另一侧存在同一时间与当前倒下方向相反的骨牌时，仍保持直立； 否则，保持与当前倒下方向一致，并加入到队列。 func pushDominoes(dominoes string) string { dominoesBytes := []byte(dominoes) times := make([]int, len(dominoesBytes)) // 记录倒下时间 queue := list.</description>
    </item>
    
    <item>
      <title>Leetcode 717. 1比特与2比特字符</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-717.-1%E6%AF%94%E7%89%B9%E4%B8%8E2%E6%AF%94%E7%89%B9%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Sun, 20 Feb 2022 11:06:27 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-717.-1%E6%AF%94%E7%89%B9%E4%B8%8E2%E6%AF%94%E7%89%B9%E5%AD%97%E7%AC%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/1-bit-and-2-bit-characters/
难度： 简单
题目描述 有两种特殊字符：
第一种字符可以用一个比特 0 来表示 第二种字符可以用两个比特(10 或 11)来表示、 给定一个以 0 结尾的二进制数组 bits ，如果最后一个字符必须是一位字符，则返回 true 。
示例 1： 输入： bits = [1, 0, 0]
输出： true
解释： 唯一的编码方式是一个两比特字符和一个一比特字符。
所以最后一个字符是一比特字符。
示例 2： 输入： bits = [1, 1, 1, 0]
输出： false
解释： 唯一的编码方式是两比特字符和两比特字符。
所以最后一个字符不是一比特字符。
提示： 1 &amp;lt;= bits.length &amp;lt;= 1000 bits[i] == 0 or 1 解题思路 模拟 根据题意不难发现，排列的字符的表示方式没有歧义：
当比特位为 0 时，其为第一种字符； 当比特位为 1 时，其余其后一个比特位构成第二种字符。 利用该特点进行遍历，不断识别并标记是第几种字符。
func isOneBitCharacter(bits []int) bool { ans := false for i := 0; i &amp;lt; len(bits); { if bits[i] == 0 { i++ ans = true } else { i += 2 ans = false } } return ans } 复杂度 时间复杂度：$ O(N), N = len(bits) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 969. 煎饼排序</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-969.-%E7%85%8E%E9%A5%BC%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 19 Feb 2022 10:07:04 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-969.-%E7%85%8E%E9%A5%BC%E6%8E%92%E5%BA%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/pancake-sorting/
难度： 中等
题目描述 给你一个整数数组 arr ，请使用 煎饼翻转 完成对数组的排序。
一次煎饼翻转的执行过程如下：
选择一个整数 k ，1 &amp;lt;= k &amp;lt;= arr.length 反转子数组 arr[0...k-1]（下标从 0 开始） 例如，arr = [3,2,1,4] ，选择 k = 3 进行一次煎饼翻转，反转子数组 [3,2,1] ，得到 arr = [1,2,3,4] 。
以数组形式返回能使 arr 有序的煎饼翻转操作所对应的 k 值序列。任何将数组排序且翻转次数在 10 * arr.length 范围内的有效答案都将被判断为正确。
示例 1： 输入： [3,2,4,1]
输出： [4,2,4,3]
解释：
我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。
初始状态 arr = [3, 2, 4, 1]
第一次翻转后（k = 4）：arr = [1, 4, 2, 3]</description>
    </item>
    
    <item>
      <title>Leetcode 1791. 找出星型图的中心节点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1791.-%E6%89%BE%E5%87%BA%E6%98%9F%E5%9E%8B%E5%9B%BE%E7%9A%84%E4%B8%AD%E5%BF%83%E8%8A%82%E7%82%B9/</link>
      <pubDate>Fri, 18 Feb 2022 09:34:18 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1791.-%E6%89%BE%E5%87%BA%E6%98%9F%E5%9E%8B%E5%9B%BE%E7%9A%84%E4%B8%AD%E5%BF%83%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-center-of-star-graph/
难度： 简单
题目描述 有一个无向的 星型 图，由 n 个编号从 1 到 n 的节点组成。星型图有一个 中心 节点，并且恰有 n - 1 条边将中心节点与其他每个节点连接起来。
给你一个二维整数数组 edges ，其中 edges[i] = [ui, vi] 表示在节点 ui 和 vi 之间存在一条边。请你找出并返回 edges 所表示星型图的中心节点。
示例 1： 输入： edges = [[1,2],[2,3],[4,2]]
输出： 2
解释： 如上图所示，节点 2 与其他每个节点都相连，所以节点 2 是中心节点。
示例 2： 输入： edges = [[1,2],[5,1],[1,3],[1,4]]
输出： 1
提示： 3 &amp;lt;= n &amp;lt;= 105 edges.length == n - 1 edges[i].length == 2 1 &amp;lt;= ui, vi &amp;lt;= n ui !</description>
    </item>
    
    <item>
      <title>Leetcode 688. 骑士在棋盘上的概率</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-688.-%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/</link>
      <pubDate>Thu, 17 Feb 2022 09:25:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-688.-%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/</guid>
      <description>链接： https://leetcode-cn.com/problems/knight-probability-in-chessboard/
难度： 中等
题目描述 在一个 n x n 的国际象棋棋盘上，一个骑士从单元格 (row, column) 开始，并尝试进行 k 次移动。行和列是 从 0 开始 的，所以左上单元格是 (0,0) ，右下单元格是 (n - 1, n - 1) 。
象棋骑士有8种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格。
每次骑士要移动时，它都会随机从8种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。
骑士继续移动，直到它走了 k 步或离开了棋盘。
返回 骑士在棋盘停止移动后仍留在棋盘上的概率 。
示例 1： 输入： n = 3, k = 2, row = 0, column = 0
输出： 0.0625
解释： 有两步(到(1,2)，(2,1))可以让骑士留在棋盘上。
在每一个位置上，也有两种移动可以让骑士留在棋盘上。
骑士留在棋盘上的总概率是0.0625。
示例 2： 输入： n = 1, k = 0, row = 0, column = 0</description>
    </item>
    
    <item>
      <title>Leetcode 1380. 矩阵中的幸运数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1380.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B9%B8%E8%BF%90%E6%95%B0/</link>
      <pubDate>Tue, 15 Feb 2022 09:30:05 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1380.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B9%B8%E8%BF%90%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix/
难度： 简单
题目描述 给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。
幸运数是指矩阵中满足同时下列两个条件的元素：
在同一行的所有元素中最小 在同一列的所有元素中最大 示例 1： 输入： matrix = [[3,7,8],[9,11,13],[15,16,17]]
输出： [15]
解释： 15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
示例 2： 输入： matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
输出： [12]
解释： 12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
示例 3： 输入： matrix = [[7,8],[1,2]]
输出： [7]
提示： m == mat.length n == mat[i].length 1 &amp;lt;= n, m &amp;lt;= 50 1 &amp;lt;= matrix[i][j] &amp;lt;= 105 矩阵中的所有元素都是不同的 解题思路 暴力求解 遍历整个矩阵，依次判断每个数是否同时满足题设条件。
func luckyNumbers(matrix [][]int) []int { ans := make([]int, 0, len(matrix)) for i := range matrix { for j := range matrix[i] { flag := true // 是否为行最小值 for k := len(matrix[0]) - 1; k &amp;gt;= 0; k-- { if matrix[i][k] &amp;lt; matrix[i][j] { flag = false break } } if !</description>
    </item>
    
    <item>
      <title>Leetcode 540. 有序数组中的单一元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-540.-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/</link>
      <pubDate>Mon, 14 Feb 2022 09:33:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-540.-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/single-element-in-a-sorted-array/
难度： 中等
题目描述 给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。
请你找出并返回只出现一次的那个数。
你设计的解决方案必须满足 $ O(\log{n}) $ 时间复杂度和 $ O(1) $ 空间复杂度。
示例 1： 输入： nums = [1,1,2,3,3,4,4,8,8]
输出： 2
示例 2： 输入： nums = [3,3,7,7,10,11,11]
输出： 10
提示： 1 &amp;lt;= nums.length &amp;lt;= 105 0 &amp;lt;= nums[i] &amp;lt;= 105 解题思路 二分查找 由于数组有序，则成对的元素必然是相邻的，并且元素数量为奇数。当某一对数与左或右边的所有数字总数量为偶数时，目标数必然不在其中，而在另一边，可以使用二分查找。
每次选取中间的数字，并与左右两边相邻的数字比较：
若和其中一边的数字相同，将与该数对构成的偶数个元素的那一边排除，在另一边继续查找； 若与两边数字均不相同或者仅剩一个数，则返回该值。 func singleNonDuplicate(nums []int) int { for i, j := 0, len(nums)-1; i &amp;lt;= j; { if i == j { return nums[i] } mid := (i + j) / 2 if nums[mid] == nums[mid-1] { if (j-mid)&amp;amp;1 == 0 { // 右侧成对，向左寻找 j = mid - 2 } else { // 左侧成对，向右寻找 i = mid + 1 } } else if nums[mid] == nums[mid+1] { if (j-mid)&amp;amp;1 == 0 { // 左侧成对，向右寻找 i = mid + 2 } else { // 右侧成对，向做寻找 j = mid - 1 } } else { return nums[mid] } } return 0 } 复杂度 时间复杂度：$ O(\log{N}) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 1189. “气球” 的最大数量</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1189.-%E6%B0%94%E7%90%83-%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</link>
      <pubDate>Sun, 13 Feb 2022 09:38:39 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1189.-%E6%B0%94%E7%90%83-%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-number-of-balloons/
难度： 简单
题目描述 给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 &amp;ldquo;balloon&amp;rdquo;（气球）。
字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 &amp;ldquo;balloon&amp;rdquo;。
示例 1： 输入： text = &amp;ldquo;nlaebolko&amp;rdquo;
输出： 1
示例 2： 输入： text = &amp;ldquo;loonbalxballpoon&amp;rdquo;
输出： 2
示例 3： 输入： text = &amp;ldquo;leetcode&amp;rdquo;
输出： 0
提示： 1 &amp;lt;= text.length &amp;lt;= 104 text 全部由小写英文字母组成 解题思路 哈希 使用哈希表记录可以组成 &amp;ldquo;balloon&amp;rdquo; 的每个字母的数量，然后遍历哈希表，求得可以组成balloon的最大数量。
func maxNumberOfBalloons(text string) int { cnt := make(map[byte]int) for i := range text { switch text[i] { case &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;n&amp;#39;: cnt[text[i]]++ } } cnt[&amp;#39;l&amp;#39;] /= 2 cnt[&amp;#39;o&amp;#39;] /= 2 ans := 0 Outer: for { for _, char := range &amp;#34;balon&amp;#34; { if cnt[byte(char)] &amp;lt;= 0 { break Outer } cnt[byte(char)]-- } ans++ } return ans } 复杂度 时间复杂度：$ O(N+\Sigma), N = len(text), \Sigma表示目标单词字符集，本题中为5 $ 空间复杂度：$ O(\Sigma) $ </description>
    </item>
    
    <item>
      <title>Leetcode 1020. 飞地的数量</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1020.-%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F/</link>
      <pubDate>Sat, 12 Feb 2022 09:18:39 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1020.-%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-enclaves/
难度： 中等
题目描述 给你一个大小为 m x n 的二进制矩阵 grid ，其中 0 表示一个海洋单元格、1 表示一个陆地单元格。
一次 移动 是指从一个陆地单元格走到另一个相邻（上、下、左、右）的陆地单元格或跨过 grid 的边界。
返回网格中 无法 在任意次数的移动中离开网格边界的陆地单元格的数量。
示例 1： 输入： grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
输出： 3
解释： 有三个 1 被 0 包围。一个 1 没有被包围，因为它在边界上。
示例 2： 输入： grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
输出： 0
解释： 所有 1 都在边界上或可以到达边界。
提示： m == grid.length n == grid[i].length 1 &amp;lt;= m, n &amp;lt;= 500 grid[i][j] 的值为 0 或 1 解题思路 广度优先搜索 从每个边界处出发，使用广度优先搜索，将可达的所有陆地标记出来，则剩余陆地为不可达，也即无法到达边界。</description>
    </item>
    
    <item>
      <title>Leetcode 1984. 学生分数的最小差值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1984.-%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/</link>
      <pubDate>Fri, 11 Feb 2022 18:09:21 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1984.-%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/
难度： 简单
题目描述 给你一个 下标从 0 开始 的整数数组 nums ，其中 nums[i] 表示第 i 名学生的分数。另给你一个整数 k 。
从数组中选出任意 k 名学生的分数，使这 k 个分数间 最高分 和 最低分 的 差值 达到 最小化 。
返回可能的 最小差值 。
示例 1： 输入： nums = [90], k = 1
输出： 0
解释： 选出 1 名学生的分数，仅有 1 种方法：
[90] 最高分和最低分之间的差值是 90 - 90 = 0
可能的最小差值是 0 示例 2： 输入：nums = [9,4,1,7], k = 2
输出：2
解释：选出 2 名学生的分数，有 6 种方法：</description>
    </item>
    
    <item>
      <title>Leetcode 1447. 最简分数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1447.-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/</link>
      <pubDate>Thu, 10 Feb 2022 09:36:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1447.-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/simplified-fractions/
难度： 中等
题目描述 给你一个整数 n ，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于 n 的 最简 分数 。分数可以以 任意 顺序返回。
示例 1： 输入： n = 2
输出： [&amp;ldquo;1/2&amp;rdquo;]
解释： &amp;ldquo;1/2&amp;rdquo; 是唯一一个分母小于等于 2 的最简分数。
示例 2： 输入： n = 3
输出： [&amp;ldquo;1/2&amp;rdquo;,&amp;ldquo;1/3&amp;rdquo;,&amp;ldquo;2/3&amp;rdquo;]
示例 3： 输入： n = 4
输出： [&amp;ldquo;1/2&amp;rdquo;,&amp;ldquo;1/3&amp;rdquo;,&amp;ldquo;1/4&amp;rdquo;,&amp;ldquo;2/3&amp;rdquo;,&amp;ldquo;3/4&amp;rdquo;]
解释： &amp;ldquo;2/4&amp;rdquo; 不是最简分数，因为它可以化简为 &amp;ldquo;1/2&amp;rdquo; 。
示例 4： 输入： n = 1
输出： []
提示： 1 &amp;lt;= n &amp;lt;= 100 解题思路 枚举 枚举分数值在区间 (0, 1) ，并且分母 ≤ n 的所有分子和分母，求得其最大公约数，当且仅当其为 1，是最简分数。</description>
    </item>
    
    <item>
      <title>Leetcode 2006. 差的绝对值为 K 的数对数目</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2006.-%E5%B7%AE%E7%9A%84%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%BA-k-%E7%9A%84%E6%95%B0%E5%AF%B9%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Wed, 09 Feb 2022 10:28:57 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2006.-%E5%B7%AE%E7%9A%84%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%BA-k-%E7%9A%84%E6%95%B0%E5%AF%B9%E6%95%B0%E7%9B%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-number-of-pairs-with-absolute-difference-k/
难度： 简单
题目描述 给你一个整数数组 nums 和一个整数 k ，请你返回数对 (i, j) 的数目，满足 i &amp;lt; j 且 |nums[i] - nums[j]| == k 。
|x| 的值定义为：
如果 x &amp;gt;= 0 ，那么值为 x 。 如果 x &amp;lt; 0 ，那么值为 -x 。 示例 1： 输入： nums = [1,2,2,1], k = 1
输出： 4
解释： 差的绝对值为 1 的数对为：
[1,2,2,1] [1,2,2,1] [1,2,2,1] [1,2,2,1] 示例 2： 输入：nums = [1,3], k = 3 输出：0 解释：没有任何数对差的绝对值为 3 。</description>
    </item>
    
    <item>
      <title>Leetcode 1001. 网格照明</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1001.-%E7%BD%91%E6%A0%BC%E7%85%A7%E6%98%8E/</link>
      <pubDate>Tue, 08 Feb 2022 10:42:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1001.-%E7%BD%91%E6%A0%BC%E7%85%A7%E6%98%8E/</guid>
      <description>链接： https://leetcode-cn.com/problems/grid-illumination/
难度： 困难
题目描述 在大小为 n x n 的网格 grid 上，每个单元格都有一盏灯，最初灯都处于 关闭 状态。
给你一个由灯的位置组成的二维数组 lamps ，其中 lamps[i] = [rowi, coli] 表示 打开 位于 grid[rowi][coli] 的灯。即便同一盏灯可能在 lamps 中多次列出，不会影响这盏灯处于 打开 状态。
当一盏灯处于打开状态，它将会照亮 自身所在单元格 以及同一 行 、同一 列 和两条 对角线 上的 所有其他单元格 。
另给你一个二维数组 queries ，其中 queries[j] = [rowj, colj] 。对于第 j 个查询，如果单元格 [rowj, colj] 是被照亮的，则查询结果为 1 ，否则为 0 。在第 j 次查询之后 [按照查询的顺序] ，关闭 位于单元格 grid[rowj][colj] 上及相邻 8 个方向上（与单元格 grid[rowi][coli] 共享角或边）的任何灯。
返回一个整数数组 ans 作为答案， ans[j] 应等于第 j 次查询 queries[j] 的结果，1 表示照亮，0 表示未照亮。</description>
    </item>
    
    <item>
      <title>Leetcode 1405. 最长快乐字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1405.-%E6%9C%80%E9%95%BF%E5%BF%AB%E4%B9%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 07 Feb 2022 09:38:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1405.-%E6%9C%80%E9%95%BF%E5%BF%AB%E4%B9%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-happy-string/
难度： 中等
题目描述 如果字符串中不含有任何 &#39;aaa&#39;，&#39;bbb&#39; 或 &#39;ccc&#39; 这样的字符串作为子串，那么该字符串就是一个「快乐字符串」。
给你三个整数 a，b ，c，请你返回 任意一个 满足下列全部条件的字符串 s：
s 是一个尽可能长的快乐字符串。 s 中 最多 有 a 个字母 &#39;a&#39;、b 个字母 &#39;b&#39;、c 个字母 &#39;c&#39; 。 s 中只含有 &#39;a&#39;、&#39;b&#39; 、&#39;c&#39; 三种字母。 如果不存在这样的字符串 s ，请返回一个空字符串&amp;quot;&amp;quot;。
示例 1： 输入： a = 1, b = 1, c = 7
输出： &amp;ldquo;ccaccbcc&amp;rdquo;
解释： &amp;ldquo;ccbccacc&amp;rdquo; 也是一种正确答案。
示例 2： 输入： a = 2, b = 2, c = 1
输出： &amp;ldquo;aabbc&amp;rdquo;
示例 3： 输入： a = 7, b = 1, c = 0</description>
    </item>
    
    <item>
      <title>Leetcode 1748. 唯一元素的和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1748.-%E5%94%AF%E4%B8%80%E5%85%83%E7%B4%A0%E7%9A%84%E5%92%8C/</link>
      <pubDate>Sun, 06 Feb 2022 10:47:39 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1748.-%E5%94%AF%E4%B8%80%E5%85%83%E7%B4%A0%E7%9A%84%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/sum-of-unique-elements/
难度： 简单
题目描述 给你一个整数数组 nums 。数组中唯一元素是那些只出现 恰好一次 的元素。
请你返回 nums 中唯一元素的 和 。
示例 1： 输入： nums = [1,2,3,2]
输出： 4
解释： 唯一元素为 [1,3] ，和为 4 。
示例 2： 输入： nums = [1,1,1,1,1]
输出： 0
解释： 没有唯一元素，和为 0 。
示例 3： 输入： nums = [1,2,3,4,5]
输出： 15
解释： 唯一元素为 [1,2,3,4,5] ，和为 15 。
提示： 1 &amp;lt;= nums.length &amp;lt;= 100 1 &amp;lt;= nums[i] &amp;lt;= 100 解题思路 哈希 使用哈希表统计每个数出现的次数，找出只出现一次的数，求和即可。
func sumOfUnique(nums []int) (sum int) { cnt := make(map[int]int) for _, num := range nums { sw cnt[num]++ } for num, c := range cnt { if c == 1 { sum += num } } return sum } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ 优化 在上述题解的基础上进行优化，通过统计遍历到目前为止某个数出现的次数，来决定该执行一下哪项操作：</description>
    </item>
    
    <item>
      <title>Leetcode 1219. 黄金矿工</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1219.-%E9%BB%84%E9%87%91%E7%9F%BF%E5%B7%A5/</link>
      <pubDate>Sat, 05 Feb 2022 10:32:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1219.-%E9%BB%84%E9%87%91%E7%9F%BF%E5%B7%A5/</guid>
      <description>链接： https://leetcode-cn.com/problems/path-with-maximum-gold/
难度： 中等
题目描述 你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 m * n 的网格 grid 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 0。
为了使收益最大化，矿工需要按以下规则来开采黄金：
每当矿工进入一个单元，就会收集该单元格中的所有黄金。 矿工每次可以从当前位置向上下左右四个方向走。 每个单元格只能被开采（进入）一次。 不得开采（进入）黄金数目为 0 的单元格。 矿工可以从网格中 任意一个 有黄金的单元格出发或者是停止。 示例1： 输入： grid = [[0,6,0],[5,8,7],[0,9,0]]
输出： 24
解释：
[[0,6,0],
[5,8,7],
[0,9,0]]
一种收集最多黄金的路线是：9 -&amp;gt; 8 -&amp;gt; 7。
示例 2： 输入： grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
输出： 28
解释：
[[1,0,7],
[2,0,6],
[3,4,5],
[0,3,0],
[9,0,20]]
一种收集最多黄金的路线是：1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 5 -&amp;gt; 6 -&amp;gt; 7。
提示： 1 &amp;lt;= grid.length, grid[i].</description>
    </item>
    
    <item>
      <title>Leetcode 1725. 可以形成最大正方形的矩形数目</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1725.-%E5%8F%AF%E4%BB%A5%E5%BD%A2%E6%88%90%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%9A%84%E7%9F%A9%E5%BD%A2%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Fri, 04 Feb 2022 10:42:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1725.-%E5%8F%AF%E4%BB%A5%E5%BD%A2%E6%88%90%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%9A%84%E7%9F%A9%E5%BD%A2%E6%95%B0%E7%9B%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-rectangles-that-can-form-the-largest-square/
难度： 简单
题目描述 给你一个数组 rectangles ，其中 rectangles[i] = [li, wi] 表示第 i 个矩形的长度为 li 、宽度为 wi 。
如果存在 k 同时满足 k &amp;lt;= li 和 k &amp;lt;= wi ，就可以将第 i 个矩形切成边长为 k 的正方形。例如，矩形 [4,6] 可以切成边长最大为 4 的正方形。
设 maxLen 为可以从矩形数组 rectangles 切分得到的 最大正方形 的边长。
请你统计有多少个矩形能够切出边长为 maxLen 的正方形，并返回矩形 数目 。
示例 1： 输入： rectangles = [[5,8],[3,9],[5,12],[16,5]]
输出： 3
解释： 能从每个矩形中切出的最大正方形边长分别是 [5,3,5,5] 。
最大正方形的边长为 5 ，可以由 3 个矩形切分得到。
示例 2： 输入： rectangles = [[2,3],[3,7],[4,3],[3,7]]</description>
    </item>
    
    <item>
      <title>Leetcode 1414. 和为 K 的最少斐波那契数字数目</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1414.-%E5%92%8C%E4%B8%BA-k-%E7%9A%84%E6%9C%80%E5%B0%91%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%AD%97%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Thu, 03 Feb 2022 11:11:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1414.-%E5%92%8C%E4%B8%BA-k-%E7%9A%84%E6%9C%80%E5%B0%91%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%AD%97%E6%95%B0%E7%9B%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/
难度： 中等
题目描述 给你数字 k ，请你返回和为 k 的斐波那契数字的最少数目，其中，每个斐波那契数字都可以被使用多次。
斐波那契数字定义为：
F1 = 1 F2 = 1 Fn = Fn-1 + Fn-2 ， 其中 n &amp;gt; 2 。 数据保证对于给定的 k ，一定能找到可行解。
示例 1： 输入： k = 7
输出： 2
解释： 斐波那契数字为：1，1，2，3，5，8，13，……
对于 k = 7 ，我们可以得到 2 + 5 = 7 。
示例 2： 输入： k = 10
输出： 2
解释： 对于 k = 10 ，我们可以得到 2 + 8 = 10 。</description>
    </item>
    
    <item>
      <title>Leetcode 2000. 反转单词前缀</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2000.-%E5%8F%8D%E8%BD%AC%E5%8D%95%E8%AF%8D%E5%89%8D%E7%BC%80/</link>
      <pubDate>Wed, 02 Feb 2022 09:46:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2000.-%E5%8F%8D%E8%BD%AC%E5%8D%95%E8%AF%8D%E5%89%8D%E7%BC%80/</guid>
      <description>链接： https://leetcode-cn.com/problems/reverse-prefix-of-word/
难度： 简单
题目描述 给你一个下标从 0 开始的字符串 word 和一个字符 ch 。找出 ch 第一次出现的下标 i ，反转 word 中从下标 0 开始、直到下标 i 结束（含下标 i ）的那段字符。如果 word 中不存在字符 ch ，则无需进行任何操作。
例如，如果 word = &amp;quot;abcdefd&amp;quot; 且 ch = &amp;quot;d&amp;quot; ，那么你应该 反转 从下标 0 开始、直到下标 3 结束（含下标 3 ）。结果字符串将会是 &amp;quot;dcbaefd&amp;quot; 。 返回 结果字符串 。
示例 1： 输入： word = &amp;ldquo;abcdefd&amp;rdquo;, ch = &amp;ldquo;d&amp;rdquo;
输出： &amp;ldquo;dcbaefd&amp;rdquo;
解释： &amp;ldquo;d&amp;rdquo; 第一次出现在下标 3 。
反转从下标 0 到下标 3（含下标 3）的这段字符，结果字符串是 &amp;ldquo;dcbaefd&amp;rdquo; 。</description>
    </item>
    
    <item>
      <title>Leetcode 1763. 最长的美好子字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1763.-%E6%9C%80%E9%95%BF%E7%9A%84%E7%BE%8E%E5%A5%BD%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 01 Feb 2022 09:45:38 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1763.-%E6%9C%80%E9%95%BF%E7%9A%84%E7%BE%8E%E5%A5%BD%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-nice-substring/
难度： 简单
题目描述 当一个字符串 s 包含的每一种字母的大写和小写形式 同时 出现在 s 中，就称这个字符串 s 是 美好 字符串。比方说，&amp;quot;abABB&amp;quot; 是美好字符串，因为 &#39;A&#39; 和 &#39;a&#39; 同时出现了，且 &#39;B&#39; 和 &#39;b&#39; 也同时出现了。然而，&amp;quot;abA&amp;quot; 不是美好字符串因为 &#39;b&#39; 出现了，而 &#39;B&#39; 没有出现。
给你一个字符串 s ，请你返回 s 最长的 美好子字符串 。如果有多个答案，请你返回 最早 出现的一个。如果不存在美好子字符串，请你返回一个空字符串。
示例 1： 输入： s = &amp;ldquo;YazaAay&amp;rdquo;
输出： &amp;ldquo;aAa&amp;rdquo;
解释： &amp;ldquo;aAa&amp;rdquo; 是一个美好字符串，因为这个子串中仅含一种字母，其小写形式 &amp;lsquo;a&amp;rsquo; 和大写形式 &amp;lsquo;A&amp;rsquo; 也同时出现了。
&amp;ldquo;aAa&amp;rdquo; 是最长的美好子字符串。
示例 2： 输入： s = &amp;ldquo;Bb&amp;rdquo;
输出： &amp;ldquo;Bb&amp;rdquo;
解释： &amp;ldquo;Bb&amp;rdquo; 是美好字符串，因为 &amp;lsquo;B&amp;rsquo; 和 &amp;lsquo;b&amp;rsquo; 都出现了。整个字符串也是原字符串的子字符串。</description>
    </item>
    
    <item>
      <title>Leetcode 1342. 将数字变成 0 的操作次数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1342.-%E5%B0%86%E6%95%B0%E5%AD%97%E5%8F%98%E6%88%90-0-%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Mon, 31 Jan 2022 09:45:19 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1342.-%E5%B0%86%E6%95%B0%E5%AD%97%E5%8F%98%E6%88%90-0-%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/
难度： 简单
题目描述 给你一个非负整数 num ，请你返回将它变成 0 所需要的步数。 如果当前数字是偶数，你需要把它除以 2 ；否则，减去 1 。
示例 1： 输入： num = 14
输出： 6
解释：
步骤 1) 14 是偶数，除以 2 得到 7 。
步骤 2） 7 是奇数，减 1 得到 6 。
步骤 3） 6 是偶数，除以 2 得到 3 。
步骤 4） 3 是奇数，减 1 得到 2 。
步骤 5） 2 是偶数，除以 2 得到 1 。
步骤 6） 1 是奇数，减 1 得到 0 。</description>
    </item>
    
    <item>
      <title>Leetcode 884. 两句话中的不常见单词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-884.-%E4%B8%A4%E5%8F%A5%E8%AF%9D%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%B8%B8%E8%A7%81%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Sun, 30 Jan 2022 09:10:05 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-884.-%E4%B8%A4%E5%8F%A5%E8%AF%9D%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%B8%B8%E8%A7%81%E5%8D%95%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/uncommon-words-from-two-sentences/
难度： 简单
题目描述 句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。
如果某个单词在其中一个句子中恰好出现一次，在另一个句子中却 没有出现 ，那么这个单词就是 不常见的 。
给你两个 句子 s1 和 s2 ，返回所有 不常用单词 的列表。返回列表中单词可以按 任意顺序 组织。
示例 1： 输入： s1 = &amp;ldquo;this apple is sweet&amp;rdquo;, s2 = &amp;ldquo;this apple is sour&amp;rdquo;
输出： [&amp;ldquo;sweet&amp;rdquo;,&amp;ldquo;sour&amp;rdquo;]
示例 2： 输入： s1 = &amp;ldquo;apple apple&amp;rdquo;, s2 = &amp;ldquo;banana&amp;rdquo;
输出： [&amp;ldquo;banana&amp;rdquo;]
提示： 1 &amp;lt;= s1.length, s2.length &amp;lt;= 200 s1 和 s2 由小写英文字母和空格组成 s1 和 s2 都不含前导或尾随空格 s1 和 s2 中的所有单词间均由单个空格分隔 解题思路 哈希 使用哈希表记录两个句子中出现的每个单词的数量，将出现次数为 1 的取出并返回。</description>
    </item>
    
    <item>
      <title>Leetcode 1765. 地图中的最高点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1765.-%E5%9C%B0%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E9%AB%98%E7%82%B9/</link>
      <pubDate>Sat, 29 Jan 2022 09:42:05 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1765.-%E5%9C%B0%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E9%AB%98%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/map-of-highest-peak/
难度： 中等
题目描述 给你一个大小为 m x n 的整数矩阵 isWater ，它代表了一个由 陆地 和 水域 单元格组成的地图。
如果 isWater[i][j] == 0 ，格子 (i, j) 是一个 陆地 格子。 如果 isWater[i][j] == 1 ，格子 (i, j) 是一个 水域 格子。 你需要按照如下规则给每个单元格安排高度：
每个格子的高度都必须是非负的。 如果一个格子是是 水域 ，那么它的高度必须为 0 。 任意相邻的格子高度差 至多 为 1 。当两个格子在正东、南、西、北方向上相互紧挨着，就称它们为相邻的格子。（也就是说它们有一条公共边） 找到一种安排高度的方案，使得矩阵中的最高高度值 最大 。
请你返回一个大小为 m x n 的整数矩阵 height ，其中 height[i][j] 是格子 (i, j) 的高度。如果有多种解法，请返回 任意一个 。
示例 1： 输入： isWater = [[0,1],[0,0]]</description>
    </item>
    
    <item>
      <title>Leetcode 2047. 句子中的有效单词数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2047.-%E5%8F%A5%E5%AD%90%E4%B8%AD%E7%9A%84%E6%9C%89%E6%95%88%E5%8D%95%E8%AF%8D%E6%95%B0/</link>
      <pubDate>Thu, 27 Jan 2022 09:58:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2047.-%E5%8F%A5%E5%AD%90%E4%B8%AD%E7%9A%84%E6%9C%89%E6%95%88%E5%8D%95%E8%AF%8D%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-valid-words-in-a-sentence/
难度： 简单
题目描述 句子仅由小写字母（&#39;a&#39; 到 &#39;z&#39;）、数字（&#39;0&#39; 到 &#39;9&#39;）、连字符（&#39;-&#39;）、标点符号（&#39;!&#39;、&#39;.&#39; 和 &#39;,&#39;）以及空格（&#39; &#39;）组成。每个句子可以根据空格分解成 一个或者多个 token ，这些 token 之间由一个或者多个空格 &#39; &#39; 分隔。
如果一个 token 同时满足下述条件，则认为这个 token 是一个有效单词：
仅由小写字母、连字符和/或标点（不含数字）。 至多一个 连字符 &#39;-&#39; 。如果存在，连字符两侧应当都存在小写字母（&amp;quot;a-b&amp;quot; 是一个有效单词，但 &amp;quot;-ab&amp;quot; 和 &amp;quot;ab-&amp;quot; 不是有效单词）。 至多一个 标点符号。如果存在，标点符号应当位于 token 的 末尾 。 这里给出几个有效单词的例子：&amp;quot;a-b.&amp;quot;、&amp;quot;afad&amp;quot;、&amp;quot;ba-c&amp;quot;、&amp;quot;a!&amp;quot; 和 &amp;quot;!&amp;quot; 。
给你一个字符串 sentence ，请你找出并返回 sentence 中 有效单词的数目 。
示例 1： 输入： sentence = &amp;ldquo;cat and dog&amp;rdquo;
输出： 3
解释： 句子中的有效单词是 &amp;ldquo;cat&amp;rdquo;、&amp;ldquo;and&amp;rdquo; 和 &amp;ldquo;dog&amp;rdquo;
示例 2： 输入： sentence = &amp;ldquo;!</description>
    </item>
    
    <item>
      <title>Leetcode 2013. 检测正方形</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2013.-%E6%A3%80%E6%B5%8B%E6%AD%A3%E6%96%B9%E5%BD%A2/</link>
      <pubDate>Wed, 26 Jan 2022 09:32:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2013.-%E6%A3%80%E6%B5%8B%E6%AD%A3%E6%96%B9%E5%BD%A2/</guid>
      <description>链接： https://leetcode-cn.com/problems/detect-squares/
难度： 中等
题目描述 给你一个在 X-Y 平面上的点构成的数据流。设计一个满足下述要求的算法：
添加 一个在数据流中的新点到某个数据结构中。可以添加 重复 的点，并会视作不同的点进行处理。 给你一个查询点，请你从数据结构中选出三个点，使这三个点和查询点一同构成一个 面积为正 的 轴对齐正方形 ，统计 满足该要求的方案数目。 轴对齐正方形 是一个正方形，除四条边长度相同外，还满足每条边都与 x-轴 或 y-轴 平行或垂直。
实现 DetectSquares 类：
DetectSquares() 使用空数据结构初始化对象 void add(int[] point) 向数据结构添加一个新的点 point = [x, y] int count(int[] point) 统计按上述方式与点 point = [x, y] 共同构造 轴对齐正方形 的方案数。 示例： 输入：
[&amp;ldquo;DetectSquares&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;count&amp;rdquo;, &amp;ldquo;count&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;count&amp;rdquo;]
[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]</description>
    </item>
    
    <item>
      <title>Leetcode 1688. 比赛中的配对次数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1688.-%E6%AF%94%E8%B5%9B%E4%B8%AD%E7%9A%84%E9%85%8D%E5%AF%B9%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Tue, 25 Jan 2022 09:27:56 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1688.-%E6%AF%94%E8%B5%9B%E4%B8%AD%E7%9A%84%E9%85%8D%E5%AF%B9%E6%AC%A1%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-of-matches-in-tournament/
难度： 简单
题目描述 给你一个整数 n ，表示比赛中的队伍数。比赛遵循一种独特的赛制：
如果当前队伍数是 偶数 ，那么每支队伍都会与另一支队伍配对。总共进行 n / 2 场比赛，且产生 n / 2 支队伍进入下一轮。 如果当前队伍数为 奇数 ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行 (n - 1) / 2 场比赛，且产生 (n - 1) / 2 + 1 支队伍进入下一轮。 返回在比赛中进行的配对次数，直到决出获胜队伍为止。
示例 1： 输入： n = 7
输出： 6
解释： 比赛详情：
第 1 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。 第 2 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。 第 3 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。</description>
    </item>
    
    <item>
      <title>Leetcode 2034. 股票价格波动</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2034.-%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E6%B3%A2%E5%8A%A8/</link>
      <pubDate>Sun, 23 Jan 2022 10:22:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2034.-%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E6%B3%A2%E5%8A%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/stock-price-fluctuation/
难度： 中等
题目描述 给你一支股票价格的数据流。数据流中每一条记录包含一个 时间戳 和该时间点股票对应的 价格 。
不巧的是，由于股票市场内在的波动性，股票价格记录可能不是按时间顺序到来的。某些情况下，有的记录可能是错的。如果两个有相同时间戳的记录出现在数据流中，前一条记录视为错误记录，后出现的记录 更正 前一条错误的记录。
请你设计一个算法，实现：
更新 股票在某一时间戳的股票价格，如果有之前同一时间戳的价格，这一操作将 更正 之前的错误价格。 找到当前记录里 最新股票价格 。最新股票价格 定义为时间戳最晚的股票价格。 找到当前记录里股票的 最高价格 。 找到当前记录里股票的 最低价格 。 请你实现 StockPrice 类：
StockPrice() 初始化对象，当前无股票价格记录。 void update(int timestamp, int price) 在时间点 timestamp 更新股票价格为 price 。 int current() 返回股票 最新价格 。 int maximum() 返回股票 最高价格 。 int minimum() 返回股票 最低价格 。 示例： 输入：
[&amp;ldquo;StockPrice&amp;rdquo;, &amp;ldquo;update&amp;rdquo;, &amp;ldquo;update&amp;rdquo;, &amp;ldquo;current&amp;rdquo;, &amp;ldquo;maximum&amp;rdquo;, &amp;ldquo;update&amp;rdquo;, &amp;ldquo;maximum&amp;rdquo;, &amp;ldquo;update&amp;rdquo;, &amp;ldquo;minimum&amp;rdquo;]
[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]</description>
    </item>
    
    <item>
      <title>Leetcode 1332. 删除回文子序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1332.-%E5%88%A0%E9%99%A4%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sat, 22 Jan 2022 09:45:27 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1332.-%E5%88%A0%E9%99%A4%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/remove-palindromic-subsequences/
难度： 简单
题目描述 给你一个字符串 s，它仅由字母 &#39;a&#39; 和 &#39;b&#39; 组成。每一次删除操作都可以从 s 中删除一个回文 子序列。
返回删除给定字符串中所有字符（字符串为空）的最小删除次数。
「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。
「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。
示例 1： 输入： s = &amp;ldquo;ababa&amp;rdquo;
输出： 1
解释： 字符串本身就是回文序列，只需要删除一次。
示例 2： 输入： s = &amp;ldquo;abb&amp;rdquo;
输出： 2
解释： &amp;ldquo;abb&amp;rdquo; -&amp;gt; &amp;ldquo;bb&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;rdquo;.
先删除回文子序列 &amp;ldquo;a&amp;rdquo;，然后再删除 &amp;ldquo;bb&amp;rdquo;。
示例 3： 输入： s = &amp;ldquo;baabb&amp;rdquo;
输出： 2
解释： &amp;ldquo;baabb&amp;rdquo; -&amp;gt; &amp;ldquo;b&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;rdquo;.
先删除回文子序列 &amp;ldquo;baab&amp;rdquo;，然后再删除 &amp;ldquo;b&amp;rdquo;。
提示： 1 &amp;lt;= s.length &amp;lt;= 1000 s 仅包含字母 &#39;a&#39; 和 &#39;b&#39; 解题思路 由于给定的字符串中仅包含两种字符，可以通过先删除一种，在删除另一种的方式，从而得知最小删除次数 最大 为 2。</description>
    </item>
    
    <item>
      <title>Leetcode 1345. 跳跃游戏 IV</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1345.-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F-iv/</link>
      <pubDate>Fri, 21 Jan 2022 10:32:55 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1345.-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F-iv/</guid>
      <description>链接： https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/
难度： 简单
题目描述 给你一个整数数组 arr ，你一开始在数组的第一个元素处（下标为 0）。
每一步，你可以从下标 i 跳到下标：
i + 1 满足：i + 1 &amp;lt; arr.length i - 1 满足：i - 1 &amp;gt;= 0 j 满足：arr[i] == arr[j] 且 i != j 请你返回到达数组最后一个元素的下标处所需的 最少操作次数 。
注意： 任何时候你都不能跳到数组外面。
示例 1： 输入： arr = [100,-23,-23,404,100,23,23,23,3,404]
输出： 3
解释： 那你需要跳跃 3 次，下标依次为 0 &amp;ndash;&amp;gt; 4 &amp;ndash;&amp;gt; 3 &amp;ndash;&amp;gt; 9 。下标 9 为数组的最后一个元素的下标。
示例 2： 输入： arr = [7]
输出： 0</description>
    </item>
    
    <item>
      <title>Leetcode 2029. 石子游戏 IX</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2029.-%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F-ix/</link>
      <pubDate>Thu, 20 Jan 2022 10:10:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2029.-%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F-ix/</guid>
      <description>链接： https://leetcode-cn.com/problems/convert-1d-array-into-2d-array/
难度： 简单
题目描述 Alice 和 Bob 再次设计了一款新的石子游戏。现有一行 n 个石子，每个石子都有一个关联的数字表示它的价值。给你一个整数数组 stones ，其中 stones[i] 是第 i 个石子的价值。
Alice 和 Bob 轮流进行自己的回合，Alice 先手。每一回合，玩家需要从 stones 中移除任一石子。
如果玩家移除石子后，导致 所有已移除石子 的价值 总和 可以被 3 整除，那么该玩家就 输掉游戏 。 如果不满足上一条，且移除后没有任何剩余的石子，那么 Bob 将会直接获胜（即便是在 Alice 的回合）。 假设两位玩家均采用 最佳 决策。如果 Alice 获胜，返回 true ；如果 Bob 获胜，返回 false 。
示例 1： 输入： stones = [2,1]
输出： true
解释： 游戏进行如下：
回合 1：Alice 可以移除任意一个石子。 回合 2：Bob 移除剩下的石子。 已移除的石子的值总和为 1 + 2 = 3 且可以被 3 整除。因此，Bob 输，Alice 获胜。</description>
    </item>
    
    <item>
      <title>Leetcode 219. 存在重复元素 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-219.-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii/</link>
      <pubDate>Wed, 19 Jan 2022 09:31:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-219.-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/
难度： 中等
题目描述 给你一个整数数组 nums 和一个整数 k ，判断数组中是否存在两个 不同的索引 i 和 j ，满足 nums[i] == nums[j] 且 abs(i - j) &amp;lt;= k 。如果存在，返回 true ；否则，返回 false 。
示例 1： 输入：nums = [1,2,3,1], k = 3 输出：true
示例 2： 输入：nums = [1,0,1,1], k = 1 输出：true
示例 3： 输入：nums = [1,2,3,1,2,3], k = 2 输出：false
提示： 1 &amp;lt;= nums.length &amp;lt;= 105 -109 &amp;lt;= nums[i] &amp;lt;= 109 0 &amp;lt;= k &amp;lt;= 105 解题思路 暴力求解 对于每个 i，枚举满足 abs(i - j) &amp;lt;= k 的所有 j，判断是否存在与 nums[i] 相等的数。</description>
    </item>
    
    <item>
      <title>Leetcode 539. 最小时间差</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-539.-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/</link>
      <pubDate>Tue, 18 Jan 2022 09:41:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-539.-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/random-pick-with-weight/
难度： 中等
题目描述 给定一个 24 小时制（小时:分钟 &amp;ldquo;HH:MM&amp;rdquo;）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。
示例 1： 输入： timePoints = [&amp;ldquo;23:59&amp;rdquo;,&amp;ldquo;00:00&amp;rdquo;]
输出： 1
示例 2： 输入： timePoints = [&amp;ldquo;00:00&amp;rdquo;,&amp;ldquo;23:59&amp;rdquo;,&amp;ldquo;00:00&amp;rdquo;]
输出： 0
提示： 2 &amp;lt;= timePoints &amp;lt;= 2 * 104 timePoints[i] 格式为 &amp;ldquo;HH:MM&amp;rdquo; 解题思路 排序 根据时间的先后顺序排序，最小的差必定在相邻的两个时间中产生。
通过一次遍历，找出最小时间差。
注意： 首尾也构成一对相邻时间。
func findMinDifference(timePoints []string) int { sort.Strings(timePoints) calcInternal := func(timePoints1, timePoints2 string) int { internal := int(timePoints1[4]) - int(timePoints2[4]) internal += (int(timePoints1[3]) - int(timePoints2[3])) * 10 internal += (int(timePoints1[1]) - int(timePoints2[1])) * 60 internal += (int(timePoints1[0]) - int(timePoints2[0])) * 600 if internal &amp;lt; 0 { internal = -internal } return internal } minInternal := 24*60 - calcInternal(timePoints[0], timePoints[len(timePoints)-1]) for i := 1; i &amp;lt; len(timePoints); i++ { internal := calcInternal(timePoints[i-1], timePoints[i]) if minInternal &amp;gt; internal { minInternal = internal } } return minInternal } 复杂度 时间复杂度：$ O(N\log{N}), N = len(timePoints) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>Leetcode 1220. 统计元音字母序列的数目</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1220.-%E7%BB%9F%E8%AE%A1%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Mon, 17 Jan 2022 10:39:20 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1220.-%E7%BB%9F%E8%AE%A1%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-vowels-permutation/
难度： 困难
题目描述 给你一个整数 n，请你帮忙统计一下我们可以按下述规则形成多少个长度为 n 的字符串：
字符串中的每个字符都应当是小写元音字母（&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;）
每个元音 &#39;a&#39; 后面都只能跟着 &#39;e&#39; 每个元音 &#39;e&#39; 后面只能跟着 &#39;a&#39; 或者是 &#39;i&#39; 每个元音 &#39;i&#39; 后面 不能 再跟着另一个 &#39;i&#39; 每个元音 &#39;o&#39; 后面只能跟着 &#39;i&#39; 或者是 &#39;u&#39; 每个元音 &#39;u&#39; 后面只能跟着 &#39;a&#39; 由于答案可能会很大，所以请你返回 模 109 + 7 之后的结果。
示例1： 输入： n = 1
输出： 5
解释： 所有可能的字符串分别是：&amp;ldquo;a&amp;rdquo;, &amp;ldquo;e&amp;rdquo;, &amp;ldquo;i&amp;rdquo; , &amp;ldquo;o&amp;rdquo; 和 &amp;ldquo;u&amp;rdquo;。
示例 2： 输入： n = 2
输出： 10
解释： 所有可能的字符串分别是：&amp;ldquo;ae&amp;rdquo;, &amp;ldquo;ea&amp;rdquo;, &amp;ldquo;ei&amp;rdquo;, &amp;ldquo;ia&amp;rdquo;, &amp;ldquo;ie&amp;rdquo;, &amp;ldquo;io&amp;rdquo;, &amp;ldquo;iu&amp;rdquo;, &amp;ldquo;oi&amp;rdquo;, &amp;ldquo;ou&amp;rdquo; 和 &amp;ldquo;ua&amp;rdquo;。</description>
    </item>
    
    <item>
      <title>Leetcode 382. 链表随机节点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-382.-%E9%93%BE%E8%A1%A8%E9%9A%8F%E6%9C%BA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 16 Jan 2022 09:57:49 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-382.-%E9%93%BE%E8%A1%A8%E9%9A%8F%E6%9C%BA%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/linked-list-random-node/
难度： 中等
题目描述 给你一个单链表，随机选择链表的一个节点，并返回相应的节点值。每个节点 被选中的概率一样 。
实现 Solution 类：
Solution(ListNode head) 使用整数数组初始化对象。 int getRandom() 从链表中随机选择一个节点并返回该节点的值。链表中所有节点被选中的概率相等。 示例： 输入：
[&amp;ldquo;Solution&amp;rdquo;, &amp;ldquo;getRandom&amp;rdquo;, &amp;ldquo;getRandom&amp;rdquo;, &amp;ldquo;getRandom&amp;rdquo;, &amp;ldquo;getRandom&amp;rdquo;, &amp;ldquo;getRandom&amp;rdquo;]
[[[1, 2, 3]], [], [], [], [], []]
输出：
[null, 1, 3, 2, 2, 3]
解释：
Solution solution = new Solution([1, 2, 3]);
solution.getRandom(); // 返回 1
solution.getRandom(); // 返回 3
solution.getRandom(); // 返回 2
solution.getRandom(); // 返回 2
solution.getRandom(); // 返回 3
// getRandom() 方法应随机返回 1、2、3中的一个，每个元素被返回的概率相等。</description>
    </item>
    
    <item>
      <title>Leetcode 1716. 计算力扣银行的钱</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1716.-%E8%AE%A1%E7%AE%97%E5%8A%9B%E6%89%A3%E9%93%B6%E8%A1%8C%E7%9A%84%E9%92%B1/</link>
      <pubDate>Sat, 15 Jan 2022 09:58:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1716.-%E8%AE%A1%E7%AE%97%E5%8A%9B%E6%89%A3%E9%93%B6%E8%A1%8C%E7%9A%84%E9%92%B1/</guid>
      <description>链接： https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/
难度： 简单
题目描述 Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。
最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。
给你 n ，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。
示例 1： 输入： n = 4
输出： 10
解释： 第 4 天后，总额为 1 + 2 + 3 + 4 = 10 。
示例 2: 输入： n = 10
输出： 37
解释： 第 10 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37 。注意到第二个星期一，Hercy 存入 2 块钱。</description>
    </item>
    
    <item>
      <title>Leetcode 373. 查找和最小的K对数字</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-373.-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9C%80%E5%B0%8F%E7%9A%84k%E5%AF%B9%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 14 Jan 2022 10:58:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-373.-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9C%80%E5%B0%8F%E7%9A%84k%E5%AF%B9%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/
难度： 中等
题目描述 给定两个以升序排列的整数数组 nums1 和 nums2 , 以及一个整数 k 。
定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2 。
请找到和最小的 k 个数对 (u1,v1), (u2,v2) &amp;hellip; (uk,vk) 。
示例 1： 输入： nums1 = [1,7,11], nums2 = [2,4,6], k = 3
输出： [1,2],[1,4],[1,6]
解释： 返回序列中的前 3 对数：
[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
示例 2： 输入： nums1 = [1,1,2], nums2 = [1,2,3], k = 2
输出： [1,1],[1,1]
解释： 返回序列中的前 2 对数：
[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
示例 3： 输入： nums1 = [1,2], nums2 = [3], k = 3</description>
    </item>
    
    <item>
      <title>Leetcode 747. 至少是其他数字两倍的最大数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-747.-%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/</link>
      <pubDate>Thu, 13 Jan 2022 10:11:31 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-747.-%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/
难度： 简单
题目描述 给你一个整数数组 nums ，其中总是存在 唯一的 一个最大整数 。
请你找出数组中的最大元素并检查它是否 至少是数组中每个其他数字的两倍 。如果是，则返回 最大元素的下标 ，否则返回 -1 。
示例 1： 输入： nums = [3,6,1,0]
输出： 1
解释： 6 是最大的整数，对于数组中的其他整数，6 大于数组中其他元素的两倍。6 的下标是 1 ，所以返回 1 。
示例 2： 输入： nums = [1,2,3,4]
输出： -1
解释： 4 没有超过 3 的两倍大，所以返回 -1 。
示例 3： 输入： nums = [1]
输出： 0
解释： 因为不存在其他数字，所以认为现有数字 1 至少是其他数字的两倍。
提示： 1 &amp;lt;= nums.length &amp;lt;= 50 0 &amp;lt;= nums[i] &amp;lt;= 100 nums 中的最大元素是唯一的 解题思路 模拟 首先完成一遍遍历找出最大的数字，然后再次遍历判定其是否为其他数字的两倍。</description>
    </item>
    
    <item>
      <title>Leetcode 334. 递增的三元子序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-334.-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Wed, 12 Jan 2022 11:00:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-334.-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/increasing-triplet-subsequence/
难度： 中等
题目描述 给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。
如果存在这样的三元组下标 (i, j, k) 且满足 i &amp;lt; j &amp;lt; k ，使得 nums[i] &amp;lt; nums[j] &amp;lt; nums[k] ，返回 true ；否则，返回 false 。
示例 1： 输入： nums = [1,2,3,4,5]
输出： true
解释： 任何 i &amp;lt; j &amp;lt; k 的三元组都满足题意
示例 2： 输入： nums = [5,4,3,2,1]
输出： false
解释： 不存在满足题意的三元组
示例 3： 输入： nums = [2,1,5,0,4,6]
输出： true
解释： 三元组 (3, 4, 5) 满足题意，因为 nums[3] == 0 &amp;lt; nums[4] == 4 &amp;lt; nums[5] == 6</description>
    </item>
    
    <item>
      <title>Leetcode 306. 累加数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-306.-%E7%B4%AF%E5%8A%A0%E6%95%B0/</link>
      <pubDate>Mon, 10 Jan 2022 10:14:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-306.-%E7%B4%AF%E5%8A%A0%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/additive-number/
难度： 中等
题目描述 累加数 是一个字符串，组成它的数字可以形成累加序列。
一个有效的 累加序列 必须 至少 包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。
给你一个只包含数字 &#39;0&#39;-&#39;9&#39; 的字符串，编写一个算法来判断给定输入是否是 累加数 。如果是，返回 true ；否则，返回 false 。
说明： 累加序列里的数 不会 以 0 开头，所以不会出现 1, 2, 03 或者 1, 02, 3 的情况。
示例 1： 输入： &amp;ldquo;112358&amp;rdquo;
输出： true
解释： 累加序列为: 1, 1, 2, 3, 5, 8 。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</description>
    </item>
    
    <item>
      <title>Leetcode 1629. 按键持续时间最长的键</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1629.-%E6%8C%89%E9%94%AE%E6%8C%81%E7%BB%AD%E6%97%B6%E9%97%B4%E6%9C%80%E9%95%BF%E7%9A%84%E9%94%AE/</link>
      <pubDate>Sun, 09 Jan 2022 10:12:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1629.-%E6%8C%89%E9%94%AE%E6%8C%81%E7%BB%AD%E6%97%B6%E9%97%B4%E6%9C%80%E9%95%BF%E7%9A%84%E9%94%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/slowest-key/
难度： 简单
题目描述 LeetCode 设计了一款新式键盘，正在测试其可用性。测试人员将会点击一系列键（总计 n 个），每次一个。
给你一个长度为 n 的字符串 keysPressed ，其中 keysPressed[i] 表示测试序列中第 i 个被按下的键。releaseTimes 是一个升序排列的列表，其中 releaseTimes[i] 表示松开第 i 个键的时间。字符串和数组的 下标都从 0 开始 。第 0 个键在时间为 0 时被按下，接下来每个键都 恰好 在前一个键松开时被按下。
测试人员想要找出按键 持续时间最长 的键。第 i 次按键的持续时间为 releaseTimes[i] - releaseTimes[i - 1] ，第 0 次按键的持续时间为 releaseTimes[0] 。
注意，测试期间，同一个键可以在不同时刻被多次按下，而每次的持续时间都可能不同。
请返回按键 持续时间最长 的键，如果有多个这样的键，则返回 按字母顺序排列最大 的那个键。
示例 1： 输入： releaseTimes = [9,29,49,50], keysPressed = &amp;ldquo;cbcd&amp;rdquo;
输出： &amp;ldquo;c&amp;rdquo;
解释： 按键顺序和持续时间如下：
按下 &amp;lsquo;c&amp;rsquo; ，持续时间 9（时间 0 按下，时间 9 松开）</description>
    </item>
    
    <item>
      <title>Leetcode 89. 格雷编码</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-89.-%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81/</link>
      <pubDate>Sat, 08 Jan 2022 12:11:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-89.-%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81/</guid>
      <description>链接： https://leetcode-cn.com/problems/gray-code/
难度： 中等
题目描述 n 位格雷码序列 是一个由 2n 个整数组成的序列，其中：
每个整数都在范围 [0, 2n - 1] 内（含 0 和 2n - 1） 第一个整数是 0 一个整数在序列中出现 不超过一次 每对 相邻 整数的二进制表示 恰好一位不同 ，且 第一个 和 最后一个 整数的二进制表示 恰好一位不同 给你一个整数 n ，返回任一有效的 n 位格雷码序列 。
示例 1： 输入： n = 2
输出： [0,1,3,2]
解释：
[0,1,3,2] 的二进制表示是 [00,01,11,10] 。
00 和 01 有一位不同 01 和 11 有一位不同 11 和 10 有一位不同 10 和 00 有一位不同</description>
    </item>
    
    <item>
      <title>Leetcode 1614. 括号的最大嵌套深度</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1614.-%E6%8B%AC%E5%8F%B7%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6/</link>
      <pubDate>Fri, 07 Jan 2022 10:22:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1614.-%E6%8B%AC%E5%8F%B7%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/
难度： 简单
题目描述 如果字符串满足以下条件之一，则可以称之为 有效括号字符串（valid parentheses string，可以简写为 VPS）：
字符串是一个空字符串 &amp;quot;&amp;quot;，或者是一个不为 &amp;quot;(&amp;quot; 或 &amp;quot;)&amp;quot; 的单字符。 字符串可以写为 AB（A 与 B 字符串连接），其中 A 和 B 都是 有效括号字符串 。 字符串可以写为 (A)，其中 A 是一个 有效括号字符串 。 类似地，可以定义任何有效括号字符串 S 的 嵌套深度 depth(S)：
depth(&amp;quot;&amp;quot;) = 0 depth(C) = 0，其中 C 是单个字符的字符串，且该字符不是 &amp;quot;(&amp;quot; 或者 &amp;quot;)&amp;quot; depth(A + B) = max(depth(A), depth(B))，其中 A 和 B 都是 有效括号字符串 depth(&amp;quot;(&amp;quot; + A + &amp;quot;)&amp;quot;) = 1 + depth(A)，其中 A 是一个 有效括号字符串 例如：&amp;quot;&amp;quot;、&amp;quot;()()&amp;quot;、&amp;quot;()(()())&amp;quot; 都是 有效括号字符串（嵌套深度分别为 0、1、2），而 &amp;quot;)(&amp;quot; 、&amp;quot;(()&amp;quot; 都不是 有效括号字符串 。</description>
    </item>
    
    <item>
      <title>Leetcode 71. 简化路径</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-71.-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Thu, 06 Jan 2022 10:19:10 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-71.-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/simplify-path/
难度： 中等
题目描述 给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 &#39;/&#39; 开头），请你将其转化为更加简洁的规范路径。
在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，&#39;//&#39;）都被视为单个斜杠 &#39;/&#39; 。 对于此问题，任何其他格式的点（例如，&#39;...&#39;）均被视为文件/目录名称。
请注意，返回的 规范路径 必须遵循下述格式：
始终以斜杠 &amp;lsquo;/&amp;rsquo; 开头。 两个目录名之间必须只有一个斜杠 &amp;lsquo;/&amp;rsquo; 。 最后一个目录名（如果存在）不能 以 &amp;lsquo;/&amp;rsquo; 结尾。 此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 &amp;lsquo;.&amp;rsquo; 或 &amp;lsquo;..&amp;rsquo;）。 返回简化后得到的 规范路径 。
示例 1： 输入： path = &amp;ldquo;/home/&amp;rdquo;
输出： &amp;ldquo;/home&amp;rdquo;
解释： 注意，最后一个目录名后面没有斜杠。
示例 2： 输入： path = &amp;ldquo;/../&amp;rdquo;
输出： &amp;ldquo;/&amp;rdquo;
解释： 从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。
示例 3： 输入： path = &amp;ldquo;/home//foo/&amp;rdquo;
输出： &amp;ldquo;/home/foo&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 1576. 替换所有的问号</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1576.-%E6%9B%BF%E6%8D%A2%E6%89%80%E6%9C%89%E7%9A%84%E9%97%AE%E5%8F%B7/</link>
      <pubDate>Wed, 05 Jan 2022 10:14:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1576.-%E6%9B%BF%E6%8D%A2%E6%89%80%E6%9C%89%E7%9A%84%E9%97%AE%E5%8F%B7/</guid>
      <description>链接： https://leetcode-cn.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/
难度： 简单
题目描述 给你一个仅包含小写英文字母和 &#39;?&#39; 字符的字符串 s，请你将所有的 &#39;?&#39; 转换为若干小写字母，使最终的字符串不包含任何 连续重复 的字符。
注意：你 不能 修改非 &#39;?&#39; 字符。
题目测试用例保证 除 &#39;?&#39; 字符 之外，不存在连续重复的字符。
在完成所有转换（可能无需转换）后返回最终的字符串。如果有多个解决方案，请返回其中任何一个。可以证明，在给定的约束条件下，答案总是存在的。
示例 1： 输入： s = &amp;ldquo;?zs&amp;rdquo;
输出： &amp;ldquo;azs&amp;rdquo;
解释： 该示例共有 25 种解决方案，从 &amp;ldquo;azs&amp;rdquo; 到 &amp;ldquo;yzs&amp;rdquo; 都是符合题目要求的。只有 &amp;ldquo;z&amp;rdquo; 是无效的修改，因为字符串 &amp;ldquo;zzs&amp;rdquo; 中有连续重复的两个 &amp;lsquo;z&amp;rsquo; 。
示例 2： 输入： s = &amp;ldquo;ubv?w&amp;rdquo;
输出： &amp;ldquo;ubvaw&amp;rdquo;
解释： 该示例共有 24 种解决方案，只有替换成 &amp;ldquo;v&amp;rdquo; 和 &amp;ldquo;w&amp;rdquo; 不符合题目要求。因为 &amp;ldquo;ubvvw&amp;rdquo; 和 &amp;ldquo;ubvww&amp;rdquo; 都包含连续重复的字符。
示例 3： 输入： s = &amp;ldquo;j?</description>
    </item>
    
    <item>
      <title>Leetcode 1185. 一周中的第几天</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1185.-%E4%B8%80%E5%91%A8%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9/</link>
      <pubDate>Mon, 03 Jan 2022 11:18:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1185.-%E4%B8%80%E5%91%A8%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9/</guid>
      <description>链接： https://leetcode-cn.com/problems/day-of-the-week/
难度： 简单
题目描述 给你一个日期，请你设计一个算法来判断它是对应一周中的哪一天。
输入为三个整数：day、month 和 year，分别表示日、月、年。
您返回的结果必须是这几个值中的一个 {&amp;quot;Sunday&amp;quot;, &amp;quot;Monday&amp;quot;, &amp;quot;Tuesday&amp;quot;, &amp;quot;Wednesday&amp;quot;, &amp;quot;Thursday&amp;quot;, &amp;quot;Friday&amp;quot;, &amp;quot;Saturday&amp;quot;}。
示例 1： 输入： day = 31, month = 8, year = 2019
输出： &amp;ldquo;Saturday&amp;rdquo;
示例 2： 输入： day = 18, month = 7, year = 1999
输出： &amp;ldquo;Sunday&amp;rdquo;
示例 3： 输入： day = 15, month = 8, year = 1993
输出： &amp;ldquo;Sunday&amp;rdquo;
提示： 给出的日期一定是在 1971 到 2100 年之间的有效日期。 解题思路 模拟 根据给定年的范围，求得从 1970 年 12 月 31 日 （星期四）开始到给定日期经过的天数，进而推导得出。</description>
    </item>
    
    <item>
      <title>Leetcode 2022. 将一维数组转变成二维数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2022.-%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8F%98%E6%88%90%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 01 Jan 2022 23:01:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2022.-%E5%B0%86%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8F%98%E6%88%90%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/convert-1d-array-into-2d-array/
难度： 简单
题目描述 给你一个下标从 0 开始的一维整数数组 original 和两个整数 m 和 n 。你需要使用 original 中 所有 元素创建一个 m 行 n 列的二维数组。
original 中下标从 0 到 n - 1 （都 包含 ）的元素构成二维数组的第一行，下标从 n 到 2 * n - 1 （都 包含 ）的元素构成二维数组的第二行，依此类推。
请你根据上述过程返回一个 m x n 的二维数组。如果无法构成这样的二维数组，请你返回一个空的二维数组。
示例 1： 输入： original = [1,2,3,4], m = 2, n = 2
输出： [[1,2],[3,4]]
解释：
构造出的二维数组应该包含 2 行 2 列。
original 中第一个 n=2 的部分为 [1,2] ，构成二维数组的第一行。</description>
    </item>
    
    <item>
      <title>Leetcode 507. 完美数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-507.-%E5%AE%8C%E7%BE%8E%E6%95%B0/</link>
      <pubDate>Fri, 31 Dec 2021 10:19:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-507.-%E5%AE%8C%E7%BE%8E%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/perfect-number/
难度： 简单
题目描述 对于一个 正整数，如果它和除了它自身以外的所有 正因子 之和相等，我们称它为 「完美数」。
给定一个 整数 n， 如果是完美数，返回 true，否则返回 false
示例 1： 输入： num = 28
输出： true
解释： 28 = 1 + 2 + 4 + 7 + 14
1, 2, 4, 7, 和 14 是 28 的所有正因子。
示例 2： 输入： num = 6
输出： true
示例 3： 输入： num = 496
输出： true
示例 4： 输入： num = 8128
输出： true
示例 5： 输入： num = 2</description>
    </item>
    
    <item>
      <title>Leetcode 1995. 统计特殊四元组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1995.-%E7%BB%9F%E8%AE%A1%E7%89%B9%E6%AE%8A%E5%9B%9B%E5%85%83%E7%BB%84/</link>
      <pubDate>Wed, 29 Dec 2021 10:23:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1995.-%E7%BB%9F%E8%AE%A1%E7%89%B9%E6%AE%8A%E5%9B%9B%E5%85%83%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-special-quadruplets/
难度： 简单
题目描述 给你一个 下标从 0 开始 的整数数组 nums ，返回满足下述条件的 不同 四元组 (a, b, c, d) 的 数目 ：
nums[a] + nums[b] + nums[c] == nums[d] ，且 a &amp;lt; b &amp;lt; c &amp;lt; d 示例 1： 输入： nums = [1,2,3,6]
输出： 1
解释： 满足要求的唯一一个四元组是 (0, 1, 2, 3) 因为 1 + 2 + 3 == 6 。
示例 2： 输入： nums = [3,3,6,4,5]
输出： 0
解释： [3,3,6,4,5] 中不存在满足要求的四元组。</description>
    </item>
    
    <item>
      <title>Leetcode 472. 连接词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-472.-%E8%BF%9E%E6%8E%A5%E8%AF%8D/</link>
      <pubDate>Tue, 28 Dec 2021 11:53:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-472.-%E8%BF%9E%E6%8E%A5%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/concatenated-words/
难度： 困难
题目描述 给你一个 不含重复 单词的字符串数组 words ，请你找出并返回 words 中的所有 连接词 。
连接词 定义为：一个完全由给定数组中的至少两个较短单词组成的字符串。
示例 1： 输入： words = [&amp;ldquo;cat&amp;rdquo;,&amp;ldquo;cats&amp;rdquo;,&amp;ldquo;catsdogcats&amp;rdquo;,&amp;ldquo;dog&amp;rdquo;,&amp;ldquo;dogcatsdog&amp;rdquo;,&amp;ldquo;hippopotamuses&amp;rdquo;,&amp;ldquo;rat&amp;rdquo;,&amp;ldquo;ratcatdogcat&amp;rdquo;]
输出： [&amp;ldquo;catsdogcats&amp;rdquo;,&amp;ldquo;dogcatsdog&amp;rdquo;,&amp;ldquo;ratcatdogcat&amp;rdquo;]
解释： &amp;ldquo;catsdogcats&amp;rdquo; 由 &amp;ldquo;cats&amp;rdquo;, &amp;ldquo;dog&amp;rdquo; 和 &amp;ldquo;cats&amp;rdquo; 组成;
&amp;ldquo;dogcatsdog&amp;rdquo; 由 &amp;ldquo;dog&amp;rdquo;, &amp;ldquo;cats&amp;rdquo; 和 &amp;ldquo;dog&amp;rdquo; 组成;
&amp;ldquo;ratcatdogcat&amp;rdquo; 由 &amp;ldquo;rat&amp;rdquo;, &amp;ldquo;cat&amp;rdquo;, &amp;ldquo;dog&amp;rdquo; 和 &amp;ldquo;cat&amp;rdquo; 组成。
示例 2： 输入： words = [&amp;ldquo;cat&amp;rdquo;,&amp;ldquo;dog&amp;rdquo;,&amp;ldquo;catdog&amp;rdquo;]
输出： [&amp;ldquo;catdog&amp;rdquo;]
提示： 1 &amp;lt;= words.length &amp;lt;= 104 0 &amp;lt;= words[i].length &amp;lt;= 1000 words[i] 仅由小写字母组成 0 &amp;lt;= sum(words[i].</description>
    </item>
    
    <item>
      <title>Leetcode 825. 适龄的朋友</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-825.-%E9%80%82%E9%BE%84%E7%9A%84%E6%9C%8B%E5%8F%8B/</link>
      <pubDate>Mon, 27 Dec 2021 10:14:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-825.-%E9%80%82%E9%BE%84%E7%9A%84%E6%9C%8B%E5%8F%8B/</guid>
      <description>链接： https://leetcode-cn.com/problems/friends-of-appropriate-ages/
难度： 中等
题目描述 在社交媒体网站上有 n 个用户。给你一个整数数组 ages ，其中 ages[i] 是第 i 个用户的年龄。
如果下述任意一个条件为真，那么用户 x 将不会向用户 y（x != y）发送好友请求：
age[y] &amp;lt;= 0.5 * age[x] + 7 age[y] &amp;gt; age[x] age[y] &amp;gt; 100 &amp;amp;&amp;amp; age[x] &amp;lt; 100 否则，x 将会向 y 发送一条好友请求。
注意，如果 x 向 y 发送一条好友请求，y 不必也向 x 发送一条好友请求。另外，用户不会向自己发送好友请求。
返回在该社交媒体网站上产生的好友请求总数。
示例 1： 输入： ages = [16,16]
输出： 2
解释： 2 人互发好友请求。
示例 2： 输入： ages = [16,17,18]
输出： 2
解释： 产生的好友请求为 17 -&amp;gt; 16 ，18 -&amp;gt; 17 。</description>
    </item>
    
    <item>
      <title>Leetcode 1078. Bigram 分词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1078.-bigram-%E5%88%86%E8%AF%8D/</link>
      <pubDate>Sun, 26 Dec 2021 11:02:37 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1078.-bigram-%E5%88%86%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/occurrences-after-bigram/
难度： 简单
题目描述 给出第一个词 first 和第二个词 second，考虑在某些文本 text 中可能以 &amp;quot;first second third&amp;quot; 形式出现的情况，其中 second 紧随 first 出现，third 紧随 second 出现。
对于每种这样的情况，将第三个词 &amp;quot;third&amp;quot; 添加到答案中，并返回答案。
示例 1： 输入： text = &amp;ldquo;alice is a good girl she is a good student&amp;rdquo;, first = &amp;ldquo;a&amp;rdquo;, second = &amp;ldquo;good&amp;rdquo;
输出： [&amp;ldquo;girl&amp;rdquo;,&amp;ldquo;student&amp;rdquo;]
示例 2： 输入： text = &amp;ldquo;we will we will rock you&amp;rdquo;, first = &amp;ldquo;we&amp;rdquo;, second = &amp;ldquo;will&amp;rdquo;
输出： [&amp;ldquo;we&amp;rdquo;,&amp;ldquo;rock&amp;rdquo;]
提示： 1 &amp;lt;= text.</description>
    </item>
    
    <item>
      <title>Leetcode 1609. 奇偶树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1609.-%E5%A5%87%E5%81%B6%E6%A0%91/</link>
      <pubDate>Sat, 25 Dec 2021 20:01:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1609.-%E5%A5%87%E5%81%B6%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/even-odd-tree/
难度： 中等
题目描述 如果一棵二叉树满足下述几个条件，则可以称为 奇偶树 ：
二叉树根节点所在层下标为 0 ，根的子节点所在层下标为 1 ，根的孙节点所在层下标为 2 ，依此类推。
偶数下标 层上的所有节点的值都是 奇 整数，从左到右按顺序 严格递增 奇数下标 层上的所有节点的值都是 偶 整数，从左到右按顺序 严格递减 给你二叉树的根节点，如果二叉树为 奇偶树 ，则返回 true ，否则返回 false 。 示例 1： 输入： root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
输出： true
解释： 每一层的节点值分别是：
0 层：[1]
1 层：[10,4]
2 层：[3,7,9]
3 层：[12,8,6,2]
由于 0 层和 2 层上的节点值都是奇数且严格递增，而 1 层和 3 层上的节点值都是偶数且严格递减，因此这是一棵奇偶树。
示例 2： 输入： root = [5,4,2,3,3,7]
输出： false
解释： 每一层的节点值分别是：
0 层：[5]</description>
    </item>
    
    <item>
      <title>Leetcode 1705. 吃苹果的最大数目</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1705.-%E5%90%83%E8%8B%B9%E6%9E%9C%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Fri, 24 Dec 2021 10:36:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1705.-%E5%90%83%E8%8B%B9%E6%9E%9C%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-number-of-eaten-apples/
难度： 中等
题目描述 有一棵特殊的苹果树，一连 n 天，每天都可以长出若干个苹果。在第 i 天，树上会长出 apples[i] 个苹果，这些苹果将会在 days[i] 天后（也就是说，第 i + days[i] 天时）腐烂，变得无法食用。也可能有那么几天，树上不会长出新的苹果，此时用 apples[i] == 0 且 days[i] == 0 表示。
你打算每天 最多 吃一个苹果来保证营养均衡。注意，你可以在这 n 天之后继续吃苹果。
给你两个长度为 n 的整数数组 days 和 apples ，返回你可以吃掉的苹果的最大数目。
示例 1： 输入： apples = [1,2,3,5,2], days = [3,2,1,4,2]
输出： 7
解释： 你可以吃掉 7 个苹果：
第一天，你吃掉第一天长出来的苹果。 第二天，你吃掉一个第二天长出来的苹果。 第三天，你吃掉一个第二天长出来的苹果。过了这一天，第三天长出来的苹果就已经腐烂了。 第四天到第七天，你吃的都是第四天长出来的苹果。 示例 2： 输入： apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]
输出： 5
解释： 你可以吃掉 5 个苹果：</description>
    </item>
    
    <item>
      <title>Leetcode 686. 重复叠加字符串匹配</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-686.-%E9%87%8D%E5%A4%8D%E5%8F%A0%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Wed, 22 Dec 2021 10:15:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-686.-%E9%87%8D%E5%A4%8D%E5%8F%A0%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/repeated-string-match/
难度： 中等
题目描述 给定两个字符串 a 和 b，寻找重复叠加字符串 a 的最小次数，使得字符串 b 成为叠加后的字符串 a 的子串，如果不存在则返回 -1。
注意：字符串 &amp;quot;abc&amp;quot; 重复叠加 0 次是 &amp;quot;&amp;quot;，重复叠加 1 次是 &amp;quot;abc&amp;quot;，重复叠加 2 次是 &amp;quot;abcabc&amp;quot;。
示例 1： 输入： a = &amp;ldquo;abcd&amp;rdquo;, b = &amp;ldquo;cdabcdab&amp;rdquo;
输出： 3
解释： a 重复叠加三遍后为 &amp;ldquo;abcdabcdabcd&amp;rdquo;, 此时 b 是其子串。
示例 2： 输入： a = &amp;ldquo;a&amp;rdquo;, b = &amp;ldquo;aa&amp;rdquo;
输出： 2
示例 3： 输入： a = &amp;ldquo;a&amp;rdquo;, b = &amp;ldquo;a&amp;rdquo;
输出： 1
示例 4： 输入： a = &amp;ldquo;abc&amp;rdquo;, b = &amp;ldquo;wxyz&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 1154. 一年中的第几天</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1154.-%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9/</link>
      <pubDate>Tue, 21 Dec 2021 10:12:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1154.-%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9/</guid>
      <description>链接： https://leetcode-cn.com/problems/day-of-the-year/
难度： 简单
题目描述 给你一个字符串 date ，按 YYYY-MM-DD 格式表示一个 现行公元纪年法 日期。请你计算并返回该日期是当年的第几天。
通常情况下，我们认为 1 月 1 日是每年的第 1 天，1 月 2 日是每年的第 2 天，依此类推。每个月的天数与现行公元纪年法（格里高利历）一致。
示例 1： 输入： date = &amp;ldquo;2019-01-09&amp;rdquo;
输出： 9
示例 2： 输入： date = &amp;ldquo;2019-02-10&amp;rdquo;
输出： 41
示例 3： 输入： date = &amp;ldquo;2003-03-01&amp;rdquo;
输出： 60
示例 4： 输入： date = &amp;ldquo;2004-03-01&amp;rdquo;
输出： 61
提示： date.length == 10 date[4] == date[7] == &#39;-&#39;，其他的 date[i] 都是数字 date 表示的范围从 1900 年 1 月 1 日至 2019 年 12 月 31 日 解题思路 模拟 按照每月天数累加到前一个月，然后加上本月的天数。</description>
    </item>
    
    <item>
      <title>Leetcode 475. 供暖器</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-475.-%E4%BE%9B%E6%9A%96%E5%99%A8/</link>
      <pubDate>Mon, 20 Dec 2021 10:17:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-475.-%E4%BE%9B%E6%9A%96%E5%99%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/heaters/
难度： 中等
题目描述 冬季已经来临。 你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。
在加热器的加热半径范围内的每个房屋都可以获得供暖。
现在，给出位于一条水平线上的房屋 houses 和供暖器 heaters 的位置，请你找出并返回可以覆盖所有房屋的最小加热半径。
说明： 所有供暖器都遵循你的半径标准，加热的半径也一样。
示例 1： 输入: houses = [1,2,3], heaters = [2]
输出: 1
解释: 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。
示例 2： 输入: houses = [1,2,3,4], heaters = [1,4]
输出: 1
解释: 在位置1, 4上有两个供暖器。我们需要将加热半径设为1，这样所有房屋就都能得到供暖。
示例 3： 输入： houses = [1,5], heaters = [2]
输出： 3
提示： 1 &amp;lt;= houses.length, heaters.length &amp;lt;= 3 * 104 1 &amp;lt;= houses[i], heaters[i] &amp;lt;= 109 解题思路 暴力求解 每个房子的加热由距离最近的那个加热器保障。</description>
    </item>
    
    <item>
      <title>Leetcode 997. 找到小镇的法官</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-997.-%E6%89%BE%E5%88%B0%E5%B0%8F%E9%95%87%E7%9A%84%E6%B3%95%E5%AE%98/</link>
      <pubDate>Sun, 19 Dec 2021 20:21:03 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-997.-%E6%89%BE%E5%88%B0%E5%B0%8F%E9%95%87%E7%9A%84%E6%B3%95%E5%AE%98/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-the-town-judge/
难度： 简单
题目描述 在一个小镇里，按从 1 到 n 为 n 个人进行编号。传言称，这些人中有一个是小镇上的秘密法官。
如果小镇的法官真的存在，那么：
小镇的法官不相信任何人。 每个人（除了小镇法官外）都信任小镇的法官。 只有一个人同时满足条件 1 和条件 2 。 给定数组 trust，该数组由信任对 trust[i] = [a, b] 组成，表示编号为 a 的人信任编号为 b 的人。
如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的编号。否则，返回 -1。
示例 1： 输入： n = 2, trust = [[1,2]]
输出： 2
示例 2： 输入： n = 3, trust = [[1,3],[2,3]]
输出： 3
示例 3： 输入： n = 3, trust = [[1,3],[2,3],[3,1]]
输出： -1
示例 4： 输入： n = 3, trust = [[1,2],[2,3]]</description>
    </item>
    
    <item>
      <title>Leetcode 419. 甲板上的战舰</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-419.-%E7%94%B2%E6%9D%BF%E4%B8%8A%E7%9A%84%E6%88%98%E8%88%B0/</link>
      <pubDate>Sat, 18 Dec 2021 11:06:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-419.-%E7%94%B2%E6%9D%BF%E4%B8%8A%E7%9A%84%E6%88%98%E8%88%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/battleships-in-a-board/
难度： 中等
题目描述 给你一个大小为 m x n 的矩阵 board 表示甲板，其中，每个单元格可以是一艘战舰 &#39;X&#39; 或者是一个空位 &#39;.&#39; ，返回在甲板 board 上放置的 战舰 的数量。
战舰 只能水平或者垂直放置在 board 上。换句话说，战舰只能按 1 x k（1 行，k 列）或 k x 1（k 行，1 列）的形状建造，其中 k 可以是任意大小。两艘战舰之间至少有一个水平或垂直的空位分隔 （即没有相邻的战舰）。
示例 1： 输入： board = [[&amp;ldquo;X&amp;rdquo;,&amp;quot;.&amp;quot;,&amp;quot;.&amp;quot;,&amp;ldquo;X&amp;rdquo;],[&amp;quot;.&amp;quot;,&amp;quot;.&amp;quot;,&amp;quot;.&amp;quot;,&amp;ldquo;X&amp;rdquo;],[&amp;quot;.&amp;quot;,&amp;quot;.&amp;quot;,&amp;quot;.&amp;quot;,&amp;ldquo;X&amp;rdquo;]]
输出： 2
示例 2： 输入： board = [[&amp;quot;.&amp;quot;]]
输出： 0
提示： m == board.length n == board[i].length 1 &amp;lt;= m, n &amp;lt;= 200 board[i][j] 是 &#39;.&#39; 或 &#39;X&#39; 进阶： 你可以实现一次扫描算法，并只使用 $O(1)$ 额外空间，并且不修改 board 的值来解决这个问题吗？</description>
    </item>
    
    <item>
      <title>Leetcode 1518. 换酒问题</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1518.-%E6%8D%A2%E9%85%92%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 17 Dec 2021 10:14:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1518.-%E6%8D%A2%E9%85%92%E9%97%AE%E9%A2%98/</guid>
      <description>链接： https://leetcode-cn.com/problems/water-bottles/
难度： 简单
题目描述 小区便利店正在促销，用 numExchange 个空酒瓶可以兑换一瓶新酒。你购入了 numBottles 瓶酒。
如果喝掉了酒瓶中的酒，那么酒瓶就会变成空的。
请你计算 最多 能喝到多少瓶酒。
示例 1： 输入： numBottles = 9, numExchange = 3
输出： 13
解释： 你可以用 3 个空酒瓶兑换 1 瓶酒。
所以最多能喝到 9 + 3 + 1 = 13 瓶酒。
示例 2： 输入： numBottles = 15, numExchange = 4
输出： 19
解释： 你可以用 4 个空酒瓶兑换 1 瓶酒。
所以最多能喝到 15 + 3 + 1 = 19 瓶酒。
示例 3： 输入： numBottles = 5, numExchange = 5</description>
    </item>
    
    <item>
      <title>Leetcode 851. 喧闹和富有</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-851.-%E5%96%A7%E9%97%B9%E5%92%8C%E5%AF%8C%E6%9C%89/</link>
      <pubDate>Wed, 15 Dec 2021 10:17:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-851.-%E5%96%A7%E9%97%B9%E5%92%8C%E5%AF%8C%E6%9C%89/</guid>
      <description>链接： https://leetcode-cn.com/problems/loud-and-rich/
难度： 中等
题目描述 有一组 n 个人作为实验对象，从 0 到 n - 1 编号，其中每个人都有不同数目的钱，以及不同程度的安静值（quietness）。为了方便起见，我们将编号为 x 的人简称为 &amp;ldquo;person x &amp;ldquo;。
给你一个数组 richer ，其中 richer[i] = [ai, bi] 表示 person ai 比 person bi 更有钱。另给你一个整数数组 quiet ，其中 quiet[i] 是 person i 的安静值。richer 中所给出的数据 逻辑自恰（也就是说，在 person x 比 person y 更有钱的同时，不会出现 person y 比 person x 更有钱的情况 ）。
现在，返回一个整数数组 answer 作为答案，其中 answer[x] = y 的前提是，在所有拥有的钱肯定不少于 person x 的人中，person y 是最安静的人（也就是安静值 quiet[y] 最小的人）。
示例 1： 输入： richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]</description>
    </item>
    
    <item>
      <title>Leetcode 807. 保持城市天际线</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-807.-%E4%BF%9D%E6%8C%81%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF/</link>
      <pubDate>Mon, 13 Dec 2021 11:03:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-807.-%E4%BF%9D%E6%8C%81%E5%9F%8E%E5%B8%82%E5%A4%A9%E9%99%85%E7%BA%BF/</guid>
      <description>链接： https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/
难度： 中等
题目描述 在二维数组 grid 中，grid[i][j] 代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。
最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的“天际线”必须与原始数组的天际线相同。 城市的天际线是从远处观看时，由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。
建筑物高度可以增加的最大总和是多少？
例子：
输入： grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
输出： 35
解释：
The grid is: [ [3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0] ] 从数组竖直方向（即顶部，底部）看“天际线”是：[9, 4, 8, 7]
从水平水平方向（即左侧，右侧）看“天际线”是：[8, 7, 9, 3]
在不影响天际线的情况下对建筑物进行增高后，新数组如下：
gridNew = [ [8, 4, 8, 7], [7, 4, 7, 7], [9, 4, 8, 7], [3, 3, 3, 3] ] 说明： 1 &amp;lt; grid.</description>
    </item>
    
    <item>
      <title>Leetcode 709. 转换成小写字母</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-709.-%E8%BD%AC%E6%8D%A2%E6%88%90%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D/</link>
      <pubDate>Sun, 12 Dec 2021 10:17:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-709.-%E8%BD%AC%E6%8D%A2%E6%88%90%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/to-lower-case/
难度： 简单
题目描述 给你一个字符串 s ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。
示例 1： 输入： s = &amp;ldquo;Hello&amp;rdquo; 输出： &amp;ldquo;hello&amp;rdquo;
示例 2： 输入： s = &amp;ldquo;here&amp;rdquo; 输出： &amp;ldquo;here&amp;rdquo;
示例 3： 输入： s = &amp;ldquo;LOVELY&amp;rdquo;
输出： &amp;ldquo;lovely&amp;rdquo;
提示： 1 &amp;lt;= s.length &amp;lt;= 100 s 由 ASCII 字符集中的可打印字符组成 解题思路 模拟 扫描字符串，将大写字母变为小写字母。
func toLowerCase(s string) string { ans := make([]byte, 0, len(s)) for i := range s { if &amp;#39;A&amp;#39; &amp;lt;= s[i] &amp;amp;&amp;amp; s[i] &amp;lt;= &amp;#39;Z&amp;#39; { ans = append(ans, s[i]-&amp;#39;A&amp;#39;+&amp;#39;a&amp;#39;) } else { ans = append(ans, s[i]) } } return string(ans) } 复杂度 时间复杂度：$ O(N), N = len(s) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 911. 在线选举</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-911.-%E5%9C%A8%E7%BA%BF%E9%80%89%E4%B8%BE/</link>
      <pubDate>Sat, 11 Dec 2021 09:52:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-911.-%E5%9C%A8%E7%BA%BF%E9%80%89%E4%B8%BE/</guid>
      <description>链接： https://leetcode-cn.com/problems/online-election/
难度： 中等
题目描述 给你两个整数数组 persons 和 times 。在选举中，第 i 张票是在时刻为 times[i] 时投给候选人 persons[i] 的。
对于发生在时刻 t 的每个查询，需要找出在 t 时刻在选举中领先的候选人的编号。
在 t 时刻投出的选票也将被计入我们的查询之中。在平局的情况下，最近获得投票的候选人将会获胜。
实现 TopVotedCandidate 类：
TopVotedCandidate(int[] persons, int[] times) 使用 persons 和 times 数组初始化对象。 int q(int t) 根据前面描述的规则，返回在时刻 t 在选举中领先的候选人的编号。 示例： 输入：
[&amp;ldquo;TopVotedCandidate&amp;rdquo;, &amp;ldquo;q&amp;rdquo;, &amp;ldquo;q&amp;rdquo;, &amp;ldquo;q&amp;rdquo;, &amp;ldquo;q&amp;rdquo;, &amp;ldquo;q&amp;rdquo;, &amp;ldquo;q&amp;rdquo;]
[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]</description>
    </item>
    
    <item>
      <title>Leetcode 748. 最短补全词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-748.-%E6%9C%80%E7%9F%AD%E8%A1%A5%E5%85%A8%E8%AF%8D/</link>
      <pubDate>Fri, 10 Dec 2021 17:25:57 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-748.-%E6%9C%80%E7%9F%AD%E8%A1%A5%E5%85%A8%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/shortest-completing-word/
难度： 简单
题目描述 给你一个字符串 licensePlate 和一个字符串数组 words ，请你找出并返回 words 中的 最短补全词 。
补全词 是一个包含 licensePlate 中所有的字母的单词。在所有补全词中，最短的那个就是 最短补全词 。
在匹配 licensePlate 中的字母时：
忽略 licensePlate 中的 数字和空格 。 不区分大小写 。 如果某个字母在 licensePlate 中出现不止一次，那么该字母在补全词中的出现次数应当一致或者更多。 例如：licensePlate = &amp;quot;aBc 12c&amp;quot;，那么它的补全词应当包含字母 &#39;a&#39;、&#39;b&#39; （忽略大写）和两个 &#39;c&#39; 。可能的 补全词 有 &amp;quot;abccdef&amp;quot;、&amp;quot;caaacab&amp;quot; 以及 &amp;quot;cbca&amp;quot; 。
请你找出并返回 words 中的 最短补全词 。题目数据保证一定存在一个最短补全词。当有多个单词都符合最短补全词的匹配条件时取 words 中 最靠前的 那个。
示例 1： 输入： licensePlate = &amp;ldquo;1s3 PSt&amp;rdquo;, words = [&amp;ldquo;step&amp;rdquo;, &amp;ldquo;steps&amp;rdquo;, &amp;ldquo;stripe&amp;rdquo;, &amp;ldquo;stepple&amp;rdquo;]
输出： &amp;ldquo;steps&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 794. 有效的井字游戏</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-794.-%E6%9C%89%E6%95%88%E7%9A%84%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Thu, 09 Dec 2021 10:16:48 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-794.-%E6%9C%89%E6%95%88%E7%9A%84%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/valid-tic-tac-toe-state/
难度： 中等
题目描述 给你一个字符串数组 board 表示井字游戏的棋盘。当且仅当在井字游戏过程中，棋盘有可能达到 board 所显示的状态时，才返回 true 。
井字游戏的棋盘是一个 3 x 3 数组，由字符 &#39; &#39;，&#39;X&#39; 和 &#39;O&#39; 组成。字符 &#39; &#39; 代表一个空位。
以下是井字游戏的规则：
玩家轮流将字符放入空位（&#39; &#39;）中。 玩家 1 总是放字符 &#39;X&#39; ，而玩家 2 总是放字符 &#39;O&#39; 。 &#39;X&#39; 和 &#39;O&#39; 只允许放置在空位中，不允许对已放有字符的位置进行填充。 当有 3 个相同（且非空）的字符填充任何行、列或对角线时，游戏结束。 当所有位置非空时，也算为游戏结束。 如果游戏结束，玩家不允许再放置字符。 示例 1： 输入： board = [&amp;ldquo;O &amp;ldquo;,&amp;rdquo; &amp;ldquo;,&amp;rdquo; &amp;ldquo;]
输出： false
解释： 玩家 1 总是放字符 &amp;ldquo;X&amp;rdquo; 。
示例 2： 输入： board = [&amp;ldquo;XOX&amp;rdquo;,&amp;rdquo; X &amp;ldquo;,&amp;rdquo; &amp;ldquo;]</description>
    </item>
    
    <item>
      <title>Leetcode 1034. 边界着色</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1034.-%E8%BE%B9%E7%95%8C%E7%9D%80%E8%89%B2/</link>
      <pubDate>Tue, 07 Dec 2021 10:14:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1034.-%E8%BE%B9%E7%95%8C%E7%9D%80%E8%89%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/coloring-a-border/
难度： 中等
题目描述 给你一个大小为 m x n 的整数矩阵 grid ，表示一个网格。另给你三个整数 row、col 和 color 。网格中的每个值表示该位置处的网格块的颜色。
当两个网格块的颜色相同，而且在四个方向中任意一个方向上相邻时，它们属于同一 连通分量 。
连通分量的边界 是指连通分量中的所有与不在分量中的网格块相邻（四个方向上）的所有网格块，或者在网格的边界上（第一行/列或最后一行/列）的所有网格块。
请你使用指定颜色 color 为所有包含网格块 grid[row][col] 的 连通分量的边界 进行着色，并返回最终的网格 grid 。
示例 1： 输入： grid = [[1,1],[1,2]], row = 0, col = 0, color = 3
输出： [[3,3],[3,2]]
示例 2： 输入： grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3
输出： [[1,3,3],[2,3,3]]
示例 3： 输入： grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2</description>
    </item>
    
    <item>
      <title>Leetcode 1816. 截断句子</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1816.-%E6%88%AA%E6%96%AD%E5%8F%A5%E5%AD%90/</link>
      <pubDate>Mon, 06 Dec 2021 10:21:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1816.-%E6%88%AA%E6%96%AD%E5%8F%A5%E5%AD%90/</guid>
      <description>链接： https://leetcode-cn.com/problems/truncate-sentence/
难度： 简单
题目描述 句子 是一个单词列表，列表中的单词之间用单个空格隔开，且不存在前导或尾随空格。每个单词仅由大小写英文字母组成（不含标点符号）。
例如，&amp;quot;Hello World&amp;quot;、&amp;quot;HELLO&amp;quot; 和 &amp;quot;hello world hello world&amp;quot; 都是句子。 给你一个句子 s​​​​​​ 和一个整数 k​​​​​​ ，请你将 s​​ 截断 ​，​​​使截断后的句子仅含 前 k​​​​​​ 个单词。返回 截断 s​​​​​​ 后得到的句子。
示例 1： 输入： s = &amp;ldquo;Hello how are you Contestant&amp;rdquo;, k = 4
输出： &amp;ldquo;Hello how are you&amp;rdquo;
解释：
s 中的单词为 [&amp;ldquo;Hello&amp;rdquo;, &amp;ldquo;how&amp;rdquo; &amp;ldquo;are&amp;rdquo;, &amp;ldquo;you&amp;rdquo;, &amp;ldquo;Contestant&amp;rdquo;]
前 4 个单词为 [&amp;ldquo;Hello&amp;rdquo;, &amp;ldquo;how&amp;rdquo;, &amp;ldquo;are&amp;rdquo;, &amp;ldquo;you&amp;rdquo;]
因此，应当返回 &amp;ldquo;Hello how are you&amp;rdquo;
示例 2： 输入： s = &amp;ldquo;What is the solution to this problem&amp;rdquo;, k = 4</description>
    </item>
    
    <item>
      <title>Leetcode 372. 超级次方</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-372.-%E8%B6%85%E7%BA%A7%E6%AC%A1%E6%96%B9/</link>
      <pubDate>Sun, 05 Dec 2021 11:48:08 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-372.-%E8%B6%85%E7%BA%A7%E6%AC%A1%E6%96%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/super-pow/
难度： 中等
题目描述 你的任务是计算 ab 对 1337 取模，a 是一个正整数，b 是一个非常大的正整数且会以数组形式给出。
示例 1： 输入： a = 2, b = [3]
输出： 8
示例 2： 输入： a = 2, b = [1,0]
输出： 1024
示例 3： 输入： a = 1, b = [4,3,3,8,5,2]
输出： 1
示例 4： 输入： a = 2147483647, b = [2,0,0]
输出： 1198
提示： 1 &amp;lt;= a &amp;lt;= 231 - 1 1 &amp;lt;= b.length &amp;lt;= 2000 0 &amp;lt;= b[i] &amp;lt;= 9 b 不含前导 0 解题思路 快速幂 两个因数相乘取模的值，与每个因数各自取模后相乘再取模的值一致。</description>
    </item>
    
    <item>
      <title>Leetcode 383. 赎金信</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-383.-%E8%B5%8E%E9%87%91%E4%BF%A1/</link>
      <pubDate>Sat, 04 Dec 2021 19:28:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-383.-%E8%B5%8E%E9%87%91%E4%BF%A1/</guid>
      <description>链接： https://leetcode-cn.com/problems/ransom-note/
难度： 简单
题目描述 为了不在赎金信中暴露字迹，从杂志上搜索各个需要的字母，组成单词来表达意思。
给你一个赎金信 (ransomNote) 字符串和一个杂志(magazine)字符串，判断 ransomNote 能不能由 magazines 里面的字符构成。
如果可以构成，返回 true ；否则返回 false 。
magazine 中的每个字符只能在 ransomNote 中使用一次。
示例 1： 输入： ransomNote = &amp;ldquo;a&amp;rdquo;, magazine = &amp;ldquo;b&amp;rdquo;
输出： false
示例 2： 输入： ransomNote = &amp;ldquo;aa&amp;rdquo;, magazine = &amp;ldquo;ab&amp;rdquo;
输出：false
示例 3： 输入： ransomNote = &amp;ldquo;aa&amp;rdquo;, magazine = &amp;ldquo;aab&amp;rdquo;
输出： true
提示： 1 &amp;lt;= ransomNote.length, magazine.length &amp;lt;= 105 ransomNote 和 magazine 由小写英文字母组成 解题思路 哈希 遍历 magazine 字符串，使用哈希表统计每个字符出现的次数，然后尝试将 ransomNote 中的每个字符从哈希表中删除：</description>
    </item>
    
    <item>
      <title>Leetcode 1005. K 次取反后最大化的数组和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1005.-k-%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/</link>
      <pubDate>Fri, 03 Dec 2021 10:16:51 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1005.-k-%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/
难度： 简单
题目描述 给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组：
选择某个下标 i 并将 nums[i] 替换为 -nums[i] 。 重复这个过程恰好 k 次。可以多次选择同一个下标 i 。
以这种方式修改数组后，返回数组 可能的最大和 。
示例 1： 输入： nums = [4,2,3], k = 1
输出： 5
解释： 选择下标 1 ，nums 变为 [4,-2,3] 。
示例 2： 输入： nums = [3,-1,0,2], k = 3
输出： 6
解释： 选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。
示例 3： 输入： nums = [2,-3,-1,5,-4], k = 2</description>
    </item>
    
    <item>
      <title>Leetcode 506. 相对名次</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-506.-%E7%9B%B8%E5%AF%B9%E5%90%8D%E6%AC%A1/</link>
      <pubDate>Thu, 02 Dec 2021 19:55:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-506.-%E7%9B%B8%E5%AF%B9%E5%90%8D%E6%AC%A1/</guid>
      <description>链接： https://leetcode-cn.com/problems/relative-ranks/
难度： 简单
题目描述 给你一个长度为 n 的整数数组 score ，其中 score[i] 是第 i 位运动员在比赛中的得分。所有得分都 互不相同 。
运动员将根据得分 决定名次 ，其中名次第 1 的运动员得分最高，名次第 2 的运动员得分第 2 高，依此类推。运动员的名次决定了他们的获奖情况：
名次第 1 的运动员获金牌 &amp;quot;Gold Medal&amp;quot; 。 名次第 2 的运动员获银牌 &amp;quot;Silver Medal&amp;quot; 。 名次第 3 的运动员获铜牌 &amp;quot;Bronze Medal&amp;quot; 。 从名次第 4 到第 n 的运动员，只能获得他们的名次编号（即，名次第 x 的运动员获得编号 &amp;quot;x&amp;quot;）。 使用长度为 n 的数组 answer 返回获奖，其中 answer[i] 是第 i 位运动员的获奖情况。
示例 1： 输入： score = [5,4,3,2,1]
输出： [&amp;ldquo;Gold Medal&amp;rdquo;,&amp;ldquo;Silver Medal&amp;rdquo;,&amp;ldquo;Bronze Medal&amp;rdquo;,&amp;ldquo;4&amp;rdquo;,&amp;ldquo;5&amp;rdquo;]</description>
    </item>
    
    <item>
      <title>Leetcode 1446. 连续字符</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1446.-%E8%BF%9E%E7%BB%AD%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Wed, 01 Dec 2021 10:19:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1446.-%E8%BF%9E%E7%BB%AD%E5%AD%97%E7%AC%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/consecutive-characters/
难度： 简单
题目描述 给你一个字符串 s ，字符串的「能量」定义为：只包含一种字符的最长非空子字符串的长度。
请你返回字符串的能量。
示例 1： 输入： s = &amp;ldquo;leetcode&amp;rdquo;
输出： 2
解释： 子字符串 &amp;ldquo;ee&amp;rdquo; 长度为 2 ，只包含字符 &amp;rsquo;e&amp;rsquo; 。
示例 2： 输入： s = &amp;ldquo;abbcccddddeeeeedcba&amp;rdquo;
输出： 5
解释： 子字符串 &amp;ldquo;eeeee&amp;rdquo; 长度为 5 ，只包含字符 &amp;rsquo;e&amp;rsquo; 。
示例 3： 输入： s = &amp;ldquo;triplepillooooow&amp;rdquo;
输出： 5
示例 4： 输入： s = &amp;ldquo;hooraaaaaaaaaaay&amp;rdquo;
输出： 11
示例 5： 输入： s = &amp;ldquo;tourist&amp;rdquo;
输出： 1
提示： 1 &amp;lt;= s.length &amp;lt;= 500 s 只包含小写英文字母。 解题思路 模拟 从头到尾遍历整个字符串，当与前面的字符相同时，当前连续相同该字符的长度加一；否则，将其长度置为 1。</description>
    </item>
    
    <item>
      <title>Leetcode 400. 第 N 位数字</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-400.-%E7%AC%AC-n-%E4%BD%8D%E6%95%B0%E5%AD%97/</link>
      <pubDate>Tue, 30 Nov 2021 10:30:37 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-400.-%E7%AC%AC-n-%E4%BD%8D%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/nth-digit/
难度： 中等
题目描述 给你一个整数 n ，请你在无限的整数序列 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...] 中找出并返回第 n 位数字。
示例 1： 输入： n = 3
输出： 3
示例 2： 输入： n = 11
输出： 0
解释： 第 11 位数字在序列 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, &amp;hellip; 里是 0 ，它是 10 的一部分。
提示： 1 &amp;lt;= n &amp;lt;= 231 - 1 解题思路 模拟 字符串按照数字顺序排列，其按照数字长度为 1、2、3、.</description>
    </item>
    
    <item>
      <title>Leetcode 786. 第 K 个最小的素数分数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-786.-%E7%AC%AC-k-%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/</link>
      <pubDate>Mon, 29 Nov 2021 10:26:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-786.-%E7%AC%AC-k-%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/
难度： 困难
题目描述 给你一个按递增顺序排序的数组 arr 和一个整数 k 。数组 arr 由 1 和若干 素数 组成，且其中所有整数互不相同。
对于每对满足 0 &amp;lt; i &amp;lt; j &amp;lt; arr.length 的 i 和 j ，可以得到分数 arr[i] / arr[j] 。
那么第 k 个最小的分数是多少呢? 以长度为 2 的整数数组返回你的答案, 这里 answer[0] == arr[i] 且 answer[1] == arr[j] 。
示例 1： 输入： arr = [1,2,3,5], k = 3
输出： [2,5]
解释： 已构造好的分数,排序后如下所示:
1/5, 1/3, 2/5, 1/2, 3/5, 2/3
很明显第三个最小的分数是 2/5
示例 2： 输入： arr = [1,7], k = 1</description>
    </item>
    
    <item>
      <title>Leetcode 438. 找到字符串中所有字母异位词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-438.-%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</link>
      <pubDate>Sun, 28 Nov 2021 10:03:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-438.-%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/
难度： 中等
题目描述 给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。
异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。
示例 1： 输入： s = &amp;ldquo;cbaebabacd&amp;rdquo;, p = &amp;ldquo;abc&amp;rdquo;
输出： [0,6]
解释：
起始索引等于 0 的子串是 &amp;ldquo;cba&amp;rdquo;, 它是 &amp;ldquo;abc&amp;rdquo; 的异位词。
起始索引等于 6 的子串是 &amp;ldquo;bac&amp;rdquo;, 它是 &amp;ldquo;abc&amp;rdquo; 的异位词。
示例 2： 输入： s = &amp;ldquo;abab&amp;rdquo;, p = &amp;ldquo;ab&amp;rdquo;
输出： [0,1,2]
解释：
起始索引等于 0 的子串是 &amp;ldquo;ab&amp;rdquo;, 它是 &amp;ldquo;ab&amp;rdquo; 的异位词。
起始索引等于 1 的子串是 &amp;ldquo;ba&amp;rdquo;, 它是 &amp;ldquo;ab&amp;rdquo; 的异位词。
起始索引等于 2 的子串是 &amp;ldquo;ab&amp;rdquo;, 它是 &amp;ldquo;ab&amp;rdquo; 的异位词。</description>
    </item>
    
    <item>
      <title>Leetcode 519. 随机翻转矩阵</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-519.-%E9%9A%8F%E6%9C%BA%E7%BF%BB%E8%BD%AC%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Sat, 27 Nov 2021 13:18:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-519.-%E9%9A%8F%E6%9C%BA%E7%BF%BB%E8%BD%AC%E7%9F%A9%E9%98%B5/</guid>
      <description>链接： https://leetcode-cn.com/problems/random-flip-matrix/
难度： 中等
题目描述 给你一个 m x n 的二元矩阵 matrix ，且所有值被初始化为 0 。请你设计一个算法，随机选取一个满足 matrix[i][j] == 0 的下标 (i, j) ，并将它的值变为 1 。所有满足 matrix[i][j] == 0 的下标 (i, j) 被选取的概率应当均等。
尽量最少调用内置的随机函数，并且优化时间和空间复杂度。
实现 Solution 类：
Solution(int m, int n) 使用二元矩阵的大小 m 和 n 初始化该对象 int[] flip() 返回一个满足 matrix[i][j] == 0 的随机下标 [i, j] ，并将其对应格子中的值变为 1 void reset() 将矩阵中所有的值重置为 0 示例： 输入：
[&amp;ldquo;Solution&amp;rdquo;, &amp;ldquo;flip&amp;rdquo;, &amp;ldquo;flip&amp;rdquo;, &amp;ldquo;flip&amp;rdquo;, &amp;ldquo;reset&amp;rdquo;, &amp;ldquo;flip&amp;rdquo;]
[[3, 1], [], [], [], [], []]</description>
    </item>
    
    <item>
      <title>Leetcode 700. 二叉搜索树中的搜索</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-700.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Fri, 26 Nov 2021 10:15:50 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-700.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/</guid>
      <description>链接： https://leetcode-cn.com/problems/search-in-a-binary-search-tree/
难度： 简单
题目描述 给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL 。
例如，
给定二叉搜索树:
4 / \ 2 7 / \ 1 3 和值: 2 你应该返回如下子树:
2 / \ 1 3 在上述示例中，如果要找的值是 5 ，但因为没有节点值为 5 ，我们应该返回 NULL 。
解题思路 二分查找 题设中给出的树是一颗二叉搜索树，则对于其中任意一个结点，其左子树所有结点值均小于当前结点，右子树所有结点值均大于当前结点，故采用二分查找的方式：
当当前结点值 = val 时，直接返回该结点； 当当前结点值 &amp;lt; val 时，去做左子树中查找； 当当前结点值 &amp;gt; val 时，去做右子树中查找； 当当前结点为空时，说明找不到，直接返回 NULL 。 func searchBST(root *TreeNode, val int) *TreeNode { for node := root; node != nil; { if val == node.</description>
    </item>
    
    <item>
      <title>Leetcode 423. 从英文中重建数字</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-423.-%E4%BB%8E%E8%8B%B1%E6%96%87%E4%B8%AD%E9%87%8D%E5%BB%BA%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 24 Nov 2021 10:12:51 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-423.-%E4%BB%8E%E8%8B%B1%E6%96%87%E4%B8%AD%E9%87%8D%E5%BB%BA%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/
难度： 中等
题目描述 给你一个字符串 s ，其中包含字母顺序打乱的用英文单词表示的若干数字（0-9）。按 升序 返回原始的数字。
示例 1： 输入： s = &amp;ldquo;owoztneoer&amp;rdquo;
输出： &amp;ldquo;012&amp;rdquo;
示例 2： 输入： s = &amp;ldquo;fviefuro&amp;rdquo;
输出： &amp;ldquo;45&amp;rdquo;
提示： 1 &amp;lt;= s.length &amp;lt;= 105 s[i] 为 [&amp;quot;e&amp;quot;,&amp;quot;g&amp;quot;,&amp;quot;f&amp;quot;,&amp;quot;i&amp;quot;,&amp;quot;h&amp;quot;,&amp;quot;o&amp;quot;,&amp;quot;n&amp;quot;,&amp;quot;s&amp;quot;,&amp;quot;r&amp;quot;,&amp;quot;u&amp;quot;,&amp;quot;t&amp;quot;,&amp;quot;w&amp;quot;,&amp;quot;v&amp;quot;,&amp;quot;x&amp;quot;,&amp;quot;z&amp;quot;]这些字符之一 s 保证是一个符合题目要求的字符串 解题思路 哈希 使用哈希表记录每个字母出现时次数，其中 [&amp;quot;z&amp;quot;，&amp;quot;w&amp;quot;, &amp;quot;u&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;g&amp;quot;] 可以唯一的确定包含的数字 [0, 2, 4, 6, 8]，仍然使用哈希表记录每个数字出现的次数，并将数字对应的字母从哈希表中减去。
在剩余的字母中，[&amp;quot;o&amp;quot;, &amp;quot;t&amp;quot;, &amp;quot;f&amp;quot;, &amp;quot;s&amp;quot;] 可以唯一的确定包含的数字 [1, 3, 5, 7]，最后只剩构成 9 的字符，使用 i 代表即可。
故按照 [&amp;quot;z&amp;quot;，&amp;quot;w&amp;quot;, &amp;quot;u&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;g&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;t&amp;quot;, &amp;quot;f&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot;i&amp;quot;] 的顺序，确定数字 [0, 2, 4, 6, 8, 1, 3, 5, 7, 9] 的数量，每次将确定数字对应的字母删除掉。</description>
    </item>
    
    <item>
      <title>Leetcode 384. 打乱数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-384.-%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 22 Nov 2021 10:15:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-384.-%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/shuffle-an-array/
难度： 中等
题目描述 给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。
实现 Solution class:
Solution(int[] nums) 使用整数数组 nums 初始化对象 int[] reset() 重设数组到它的初始状态并返回 int[] shuffle() 返回数组随机打乱后的结果 示例 1： 输入：
[&amp;ldquo;Solution&amp;rdquo;, &amp;ldquo;shuffle&amp;rdquo;, &amp;ldquo;reset&amp;rdquo;, &amp;ldquo;shuffle&amp;rdquo;]
[[[1, 2, 3]], [], [], []]
输出：
[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]
解释：
Solution solution = new Solution([1, 2, 3]);
solution.shuffle(); // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]
solution.reset(); // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]</description>
    </item>
    
    <item>
      <title>Leetcode 559. N 叉树的最大深度</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-559.-n-%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</link>
      <pubDate>Sun, 21 Nov 2021 10:32:51 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-559.-n-%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/
难度： 简单
题目描述 给定一个 N 叉树，找到其最大深度。
最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。
N 叉树输入按层序遍历序列化表示，每组子节点由空值分隔（请参见示例）。
示例 1： 输入： root = [1,null,3,2,4,null,5,6]
输出： 3
示例 2： 输入： root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
输出： 5
提示： 树的深度不会超过 1000 。 树的节点数目位于 [0, 104] 之间。 解题思路 后序遍历 一颗树的最大深度是其所有子树的最大深度加一。递归的求解某个结点各个子树的深度，即可比较求得以当前结点为根结点的子树的最大深度。
func maxDepth(root *Node) int { if root == nil { return 0 } _maxDepth := 0 for _, node := range root.Children { depth := maxDepth(node) if _maxDepth &amp;lt; depth { _maxDepth = depth } } return _maxDepth + 1 } 复杂度 时间复杂度：$ O(N), N = size(Tree) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>Leetcode 594. 最长和谐子序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-594.-%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sat, 20 Nov 2021 23:59:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-594.-%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-harmonious-subsequence/
难度： 简单
题目描述 和谐数组是指一个数组里元素的最大值和最小值之间的差别 正好是 1 。
现在，给你一个整数数组 nums ，请你在所有可能的子序列中找到最长的和谐子序列的长度。
数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。
示例 1： 输入： nums = [1,3,2,2,5,2,3,7]
输出： 5
解释： 最长的和谐子序列是 [3,2,2,2,3]
示例 2： 输入： nums = [1,2,3,4]
输出： 2
示例 3： 输入： nums = [1,1,1,1]
输出： 0
提示： 1 &amp;lt;= nums.length &amp;lt;= 2 * 104 -109 &amp;lt;= nums[i] &amp;lt;= 109 解题思路 排序 + 滑动窗口 将整个数组排序，两段相邻的元素相同的子数组，并且差值为 1 时，在原数组中可以构成和谐数组，记录最大值。
func findLHS(nums []int) int { sort.Ints(nums) max := 0 begin := 0 for i, num := range nums { // 无法构成和谐数组，当前窗口向右滑动 if num-nums[begin] &amp;gt; 1 { begin++ } if num-nums[begin] == 1 &amp;amp;&amp;amp; max &amp;lt; i-begin+1 { max = i - begin + 1 } } return max } 复杂度 时间复杂度：$ O(N\log{N}), N = len(nums) $ 空间复杂度：$ O(\log{N}) $ 哈希 使用哈希表记录每个数字出现的次数。</description>
    </item>
    
    <item>
      <title>Leetcode 397. 整数替换</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-397.-%E6%95%B4%E6%95%B0%E6%9B%BF%E6%8D%A2/</link>
      <pubDate>Fri, 19 Nov 2021 10:07:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-397.-%E6%95%B4%E6%95%B0%E6%9B%BF%E6%8D%A2/</guid>
      <description>链接： https://leetcode-cn.com/problems/integer-replacement/
难度： 中等
题目描述 给定一个正整数 n ，你可以做如下操作：
如果 n 是偶数，则用 n / 2 替换 n 。 如果 n 是奇数，则可以用 n + 1 或 n - 1 替换 n 。 n 变为 1 所需的最小替换次数是多少？
示例 1： 输入： n = 8
输出： 3
解释： 8 -&amp;gt; 4 -&amp;gt; 2 -&amp;gt; 1
示例 2： 输入： n = 7
输出： 4
解释： 7 -&amp;gt; 8 -&amp;gt; 4 -&amp;gt; 2 -&amp;gt; 1
或 7 -&amp;gt; 6 -&amp;gt; 3 -&amp;gt; 2 -&amp;gt; 1</description>
    </item>
    
    <item>
      <title>Leetcode 563. 二叉树的坡度</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-563.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9D%A1%E5%BA%A6/</link>
      <pubDate>Thu, 18 Nov 2021 10:13:03 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-563.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9D%A1%E5%BA%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/binary-tree-tilt/
难度： 简单
题目描述 给定一个二叉树，计算 整个树 的坡度 。
一个树的 节点的坡度 定义即为，该节点左子树的节点之和和右子树节点之和的 差的绝对值 。如果没有左子树的话，左子树的节点之和为 0 ；没有右子树的话也是一样。空结点的坡度是 0 。
整个树 的坡度就是其所有节点的坡度之和。
示例 1： 输入： root = [1,2,3]
输出： 1
解释：
节点 2 的坡度：|0-0| = 0（没有子节点）
节点 3 的坡度：|0-0| = 0（没有子节点）
节点 1 的坡度：|2-3| = 1（左子树就是左子节点，所以和是 2 ；右子树就是右子节点，所以和是 3 ）
坡度总和：0 + 0 + 1 = 1
示例 2： 输入： root = [4,2,9,3,5,null,7]
输出： 15
解释：
节点 3 的坡度：|0-0| = 0（没有子节点）
节点 5 的坡度：|0-0| = 0（没有子节点）</description>
    </item>
    
    <item>
      <title>Leetcode 318. 最大单词长度乘积</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-318.-%E6%9C%80%E5%A4%A7%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E4%B9%98%E7%A7%AF/</link>
      <pubDate>Wed, 17 Nov 2021 10:19:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-318.-%E6%9C%80%E5%A4%A7%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E4%B9%98%E7%A7%AF/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-product-of-word-lengths/
难度： 中等
题目描述 给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。
示例 1： 输入: [&amp;ldquo;abcw&amp;rdquo;,&amp;ldquo;baz&amp;rdquo;,&amp;ldquo;foo&amp;rdquo;,&amp;ldquo;bar&amp;rdquo;,&amp;ldquo;xtfn&amp;rdquo;,&amp;ldquo;abcdef&amp;rdquo;]
输出: 16
解释: 这两个单词为 &amp;ldquo;abcw&amp;rdquo;, &amp;ldquo;xtfn&amp;rdquo;。
示例 2： 输入: [&amp;ldquo;a&amp;rdquo;,&amp;ldquo;ab&amp;rdquo;,&amp;ldquo;abc&amp;rdquo;,&amp;ldquo;d&amp;rdquo;,&amp;ldquo;cd&amp;rdquo;,&amp;ldquo;bcd&amp;rdquo;,&amp;ldquo;abcd&amp;rdquo;]
输出: 4
解释: 这两个单词为 &amp;ldquo;ab&amp;rdquo;, &amp;ldquo;cd&amp;rdquo;。
示例 3: 输入: [&amp;ldquo;a&amp;rdquo;,&amp;ldquo;aa&amp;rdquo;,&amp;ldquo;aaa&amp;rdquo;,&amp;ldquo;aaaa&amp;rdquo;]
输出: 0
解释: 不存在这样的两个单词。
提示： 2 &amp;lt;= words.length &amp;lt;= 1000 1 &amp;lt;= words[i].length &amp;lt;= 1000 words[i] 仅包含小写字母 解题思路 暴力求解 将字符串两两比较判定，使用哈希表确定是否有公共字符，有则跳过，没有将两个字符串长度相乘并更新最大值。
func maxProduct(words []string) int { max := 0 for i := len(words) - 1; i &amp;gt; 0; i-- { exist := make([]bool, 26) for k := range words[i] { exist[words[i][k]-&amp;#39;a&amp;#39;] = true } Other: for j := i - 1; j &amp;gt;= 0; j-- { for k := range words[j] { if exist[words[j][k]-&amp;#39;a&amp;#39;] { continue Other } } if max &amp;lt; len(words[i])*len(words[j]) { max = len(words[i]) * len(words[j]) } } } return max } 复杂度 时间复杂度：$ O(N^2L), N = len(words), L = len(words[i]) $ 空间复杂度：$ O(L) $ 排序 在暴力的基础上优化，将 words 按照长度排序，从最长的字符串 word[i] 开始遍历，寻找下一个与 words[i] 没有公共字符的字符串 word[j]，找到即求得 word[i] 关联的最大值，无需继续遍历；当 len(word[i]) * len(word[j]) 小于最大值的时候，也无需继续遍历。</description>
    </item>
    
    <item>
      <title>Leetcode 319. 灯泡开关</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-319.-%E7%81%AF%E6%B3%A1%E5%BC%80%E5%85%B3/</link>
      <pubDate>Mon, 15 Nov 2021 10:15:49 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-319.-%E7%81%AF%E6%B3%A1%E5%BC%80%E5%85%B3/</guid>
      <description>链接： https://leetcode-cn.com/problems/bulb-switcher/
难度： 中等
题目描述 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。
第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。
找出并返回 n 轮后有多少个亮着的灯泡。
示例 1： 输入： n = 3
输出： 1
解释：
初始时, 灯泡状态 [关闭, 关闭, 关闭].
第一轮后, 灯泡状态 [开启, 开启, 开启].
第二轮后, 灯泡状态 [开启, 关闭, 开启].
第三轮后, 灯泡状态 [开启, 关闭, 关闭].
你应该返回 1，因为只有一个灯泡还亮着。
示例 2： 输入： n = 0
输出： 0
示例 3： 输入： n = 1
输出： 1
提示： 0 &amp;lt;= n &amp;lt;= 109 解题思路 数学 对于第 x 个灯泡来说，当进行第 i 轮切换时，只有满足 i 是 x 的约数时，其灯泡状态才会发生变化。</description>
    </item>
    
    <item>
      <title>Leetcode 677. 键值映射</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-677.-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/</link>
      <pubDate>Sun, 14 Nov 2021 10:55:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-677.-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/map-sum-pairs/
难度： 中等
题目描述 实现一个 MapSum 类，支持两个方法，insert 和 sum：
MapSum() 初始化 MapSum 对象 void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。 int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。 示例： 输入：
[&amp;ldquo;MapSum&amp;rdquo;, &amp;ldquo;insert&amp;rdquo;, &amp;ldquo;sum&amp;rdquo;, &amp;ldquo;insert&amp;rdquo;, &amp;ldquo;sum&amp;rdquo;]
[[], [&amp;ldquo;apple&amp;rdquo;, 3], [&amp;ldquo;ap&amp;rdquo;], [&amp;ldquo;app&amp;rdquo;, 2], [&amp;ldquo;ap&amp;rdquo;]]
输出：
[null, null, 3, null, 5]
解释：
MapSum mapSum = new MapSum();
mapSum.insert(&amp;ldquo;apple&amp;rdquo;, 3);
mapSum.sum(&amp;ldquo;ap&amp;rdquo;); // return 3 (apple = 3)</description>
    </item>
    
    <item>
      <title>Leetcode 520. 检测大写字母</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-520.-%E6%A3%80%E6%B5%8B%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D/</link>
      <pubDate>Sat, 13 Nov 2021 20:49:36 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-520.-%E6%A3%80%E6%B5%8B%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/detect-capital/
难度： 简单
题目描述 我们定义，在以下情况时，单词的大写用法是正确的：
全部字母都是大写，比如 &amp;quot;USA&amp;quot; 。 单词中所有字母都不是大写，比如 &amp;quot;leetcode&amp;quot; 。 如果单词不只含有一个字母，只有首字母大写， 比如 &amp;quot;Google&amp;quot; 。 给你一个字符串 word 。如果大写用法正确，返回 true ；否则，返回 false 。
示例 1： 输入： word = &amp;ldquo;USA&amp;rdquo;
输出： true
示例 2： 输入： word = &amp;ldquo;FlaG&amp;rdquo;
输出： false
提示： 1 &amp;lt;= word.length &amp;lt;= 100 word 由小写和大写英文字母组成 解题思路 分类讨论 满足条件的字符串或者全部为小写字母，或者首字母为大写字母，其余字母的大小写一致。根据这个进行分类讨论：
当 word 长度小于 2 时，返回 true； 当首字母为小写字母时，需要判定后续字母必须全部小写； 当首字母是大写时，后续的字母均需要和第二个字母大小写相同。 func detectCapitalUse(word string) bool { if len(word) &amp;lt;= 1 { return true } i := 1 isCapital := false // 剩余字母的大小写 if word[0] &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; word[0] &amp;lt;= &amp;#39;Z&amp;#39; { // 当首字母是大写时，确定第二个字母的大小写，并从第三个字母开始判断 if word[1] &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; word[1] &amp;lt;= &amp;#39;Z&amp;#39; { isCapital = true } i = 2 } // 判断后续字母的大小写 for ; i &amp;lt; len(word); i++ { if (word[i] &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; word[i] &amp;lt;= &amp;#39;Z&amp;#39;) !</description>
    </item>
    
    <item>
      <title>Leetcode 375. 猜数字大小 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-375.-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F-ii/</link>
      <pubDate>Fri, 12 Nov 2021 11:30:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-375.-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/
难度： 中等
题目描述 我们正在玩一个猜数游戏，游戏规则如下：
我从 1 到 n 之间选择一个数字。 你来猜我选了哪个数字。 如果你猜到正确的数字，就会 赢得游戏 。 如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。 每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏 。 给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。
示例 1： 输入： n = 10
输出： 16
解释： 制胜策略如下：
数字范围是 [1,10] 。你先猜测数字为 7 。 如果这是我选中的数字，你的总费用为 $0 。否则，你需要支付 $7 。 如果我的数字更大，则下一步需要猜测的数字范围是 [8,10] 。你可以猜测数字为 9 。 如果这是我选中的数字，你的总费用为 $7 。否则，你需要支付 $9 。 如果我的数字更大，那么这个数字一定是 10 。你猜测数字为 10 并赢得游戏，总费用为 $7 + $9 = $16 。 如果我的数字更小，那么这个数字一定是 8 。你猜测数字为 8 并赢得游戏，总费用为 $7 + $9 = $16 。 如果我的数字更小，则下一步需要猜测的数字范围是 [1,6] 。你可以猜测数字为 3 。 如果这是我选中的数字，你的总费用为 $7 。否则，你需要支付 $3 。 如果我的数字更大，则下一步需要猜测的数字范围是 [4,6] 。你可以猜测数字为 5 。 如果这是我选中的数字，你的总费用为 $7 + $3 = $10 。否则，你需要支付 $5 。 如果我的数字更大，那么这个数字一定是 6 。你猜测数字为 6 并赢得游戏，总费用为 $7 + $3 + $5 = $15 。 如果我的数字更小，那么这个数字一定是 4 。你猜测数字为 4 并赢得游戏，总费用为 $7 + $3 + $5 = $15 。 如果我的数字更小，则下一步需要猜测的数字范围是 [1,2] 。你可以猜测数字为 1 。 如果这是我选中的数字，你的总费用为 $7 + $3 = $10 。否则，你需要支付 $1 。 如果我的数字更大，那么这个数字一定是 2 。你猜测数字为 2 并赢得游戏，总费用为 $7 + $3 + $1 = $11 。 在最糟糕的情况下，你需要支付 $16 。因此，你只需要 $16 就可以确保自己赢得游戏。</description>
    </item>
    
    <item>
      <title>Leetcode 629. K个逆序对数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-629.-k%E4%B8%AA%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 11 Nov 2021 10:32:02 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-629.-k%E4%B8%AA%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/valid-triangle-number/
难度： 困难
题目描述 给出两个整数 n 和 k，找出所有包含从 1 到 n 的数字，且恰好拥有 k 个逆序对的不同的数组的个数。
逆序对的定义如下：对于数组的第 i 个和第 j 个元素，如果满足 i &amp;lt; j 且 a[i] &amp;gt; a[j]，则其为一个逆序对；否则不是。
由于答案可能很大，只需要返回 答案 mod 109 + 7 的值。
示例 1： 输入: n = 3, k = 0
输出: 1
解释: 只有数组 [1,2,3] 包含了从1到3的整数并且正好拥有 0 个逆序对。
示例 2： 输入: n = 3, k = 1
输出: 2
解释: 数组 [1,3,2] 和 [2,1,3] 都有 1 个逆序对。</description>
    </item>
    
    <item>
      <title>Leetcode 495. 提莫攻击</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-495.-%E6%8F%90%E8%8E%AB%E6%94%BB%E5%87%BB/</link>
      <pubDate>Wed, 10 Nov 2021 10:21:09 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-495.-%E6%8F%90%E8%8E%AB%E6%94%BB%E5%87%BB/</guid>
      <description>链接： https://leetcode-cn.com/problems/teemo-attacking/
难度： 简单
题目描述 在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄。他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。
当提莫攻击艾希，艾希的中毒状态正好持续 duration 秒。
正式地讲，提莫在 t 发起发起攻击意味着艾希在时间区间 [t, t + duration - 1]（含 t 和 t + duration - 1）处于中毒状态。如果提莫在中毒影响结束 前 再次攻击，中毒状态计时器将会 重置 ，在新的攻击之后，中毒影响将会在 duration 秒后结束。
给你一个 非递减 的整数数组 timeSeries ，其中 timeSeries[i] 表示提莫在 timeSeries[i] 秒时对艾希发起攻击，以及一个表示中毒持续时间的整数 duration 。
返回艾希处于中毒状态的 总 秒数。
示例 1： 输入： timeSeries = [1,4], duration = 2
输出： 4
解释： 提莫攻击对艾希的影响如下：
第 1 秒，提莫攻击艾希并使其立即中毒。中毒状态会维持 2 秒，即第 1 秒和第 2 秒。 第 4 秒，提莫再次攻击艾希，艾希中毒状态又持续 2 秒，即第 4 秒和第 5 秒。</description>
    </item>
    
    <item>
      <title>Leetcode 859. 亲密字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-859.-%E4%BA%B2%E5%AF%86%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 09 Nov 2021 10:50:05 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-859.-%E4%BA%B2%E5%AF%86%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/buddy-strings/
难度： 简单
题目描述 给你两个字符串 s 和 goal ，只要我们可以通过交换 s 中的两个字母得到与 goal 相等的结果，就返回 true ；否则返回 false 。
交换字母的定义是：取两个下标 i 和 j （下标从 0 开始）且满足 i != j ，接着交换 s[i] 和 s[j] 处的字符。
例如，在 &amp;quot;abcd&amp;quot; 中交换下标 0 和下标 2 的元素可以生成 &amp;quot;cbad&amp;quot; 。
示例 1： 输入： s = &amp;ldquo;ab&amp;rdquo;, goal = &amp;ldquo;ba&amp;rdquo;
输出： true
解释： 你可以交换 s[0] = &amp;lsquo;a&amp;rsquo; 和 s[1] = &amp;lsquo;b&amp;rsquo; 生成 &amp;ldquo;ba&amp;rdquo;，此时 s 和 goal 相等。
示例 2： 输入： s = &amp;ldquo;ab&amp;rdquo;, goal = &amp;ldquo;ab&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 299. 猜数字游戏</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-299.-%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Mon, 08 Nov 2021 22:46:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-299.-%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/bulls-and-cows/
难度： 中等
题目描述 你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：
写出一个秘密数字，并请朋友猜这个数字是多少。朋友每猜测一次，你就会给他一个包含下述信息的提示：
猜测数字中有多少位属于数字和确切位置都猜对了（称为 &amp;ldquo;Bulls&amp;rdquo;, 公牛）， 有多少位属于数字猜对了但是位置不对（称为 &amp;ldquo;Cows&amp;rdquo;, 奶牛）。也就是说，这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字。 给你一个秘密数字 secret 和朋友猜测的数字 guess ，请你返回对朋友这次猜测的提示。
提示的格式为 &amp;quot;xAyB&amp;quot; ，x 是公牛个数， y 是奶牛个数，A 表示公牛，B 表示奶牛。
请注意秘密数字和朋友猜测的数字都可能含有重复数字。
示例 1： 输入: secret = &amp;ldquo;1807&amp;rdquo;, guess = &amp;ldquo;7810&amp;rdquo;
输出: &amp;ldquo;1A3B&amp;rdquo;
解释: 数字和位置都对（公牛）用 &amp;lsquo;|&amp;rsquo; 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。
&amp;ldquo;1807&amp;rdquo;
|
&amp;ldquo;7810&amp;rdquo;
示例 2： 输入: secret = &amp;ldquo;1123&amp;rdquo;, guess = &amp;ldquo;0111&amp;rdquo;
输出: &amp;ldquo;1A1B&amp;rdquo;
解释: 数字和位置都对（公牛）用 &amp;lsquo;|&amp;rsquo; 连接，数字猜对位置不对（奶牛）的采用斜体加粗标识。
&amp;ldquo;1123&amp;rdquo; &amp;ldquo;1123&amp;rdquo;
| or |
&amp;ldquo;0111&amp;rdquo; &amp;ldquo;0111&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 598. 范围求和 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-598.-%E8%8C%83%E5%9B%B4%E6%B1%82%E5%92%8C-ii/</link>
      <pubDate>Sun, 07 Nov 2021 10:14:48 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-598.-%E8%8C%83%E5%9B%B4%E6%B1%82%E5%92%8C-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/range-addition-ii/
难度： 简单
题目描述 给定一个初始元素全部为 0，大小为 m*n 的矩阵 M 以及在 M 上的一系列更新操作。
操作用二维数组表示，其中的每个操作用一个含有两个正整数 a 和 b 的数组表示，含义是将所有符合 0 &amp;lt;= i &amp;lt; a 以及 0 &amp;lt;= j &amp;lt; b 的元素 M[i][j] 的值都增加 1。
在执行给定的一系列操作后，你需要返回矩阵中含有最大整数的元素个数。
示例： 输入:
m = 3, n = 3 operations = [[2,2],[3,3]] 输出: 4
解释:
初始状态, M =
[[0, 0, 0],
[0, 0, 0],
[0, 0, 0]]
执行完操作 [2,2] 后, M =
[[1, 1, 0],
[1, 1, 0],</description>
    </item>
    
    <item>
      <title>Leetcode 268. 丢失的数字</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-268.-%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sat, 06 Nov 2021 12:14:29 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-268.-%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/missing-number/
难度： 简单
题目描述 给定一个包含 [0, n] 中 n 个数的数组 nums ，找出 [0, n] 这个范围内没有出现在数组中的那个数。
示例 1： 输入： nums = [3,0,1]
输出： 2
解释： n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。
示例 2： 输入： nums = [0,1]
输出： 2
解释： n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。
示例 3： 输入： nums = [9,6,4,2,3,5,7,0,1]
输出： 8
解释： n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。</description>
    </item>
    
    <item>
      <title>Leetcode 1218. 最长定差子序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1218.-%E6%9C%80%E9%95%BF%E5%AE%9A%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Fri, 05 Nov 2021 22:33:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1218.-%E6%9C%80%E9%95%BF%E5%AE%9A%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/
难度： 中等
题目描述 给你一个整数数组 arr 和一个整数 difference，请你找出并返回 arr 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 difference 。
子序列 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 arr 派生出来的序列。
示例1： 输入： arr = [1,2,3,4], difference = 1
输出： 4
解释： 最长的等差子序列是 [1,2,3,4]。
示例 2： 输入： arr = [1,3,5,7], difference = 1
输出： 1
解释： 最长的等差子序列是任意单个元素。
示例 3： 输入： arr = [1,5,7,8,5,3,4,2,1], difference = -2
输出： 4
解释： 最长的等差子序列是 [7,5,3,1]。
提示： 1 &amp;lt;= arr.length &amp;lt;= 105 -104 &amp;lt;= arr[i], difference &amp;lt;= 104 解题思路 动态规划 对于 arr 中的某个元素 num ，其能否和之前的元素构成等差数列，取决于在其前面是否出现了 num - difference 这个元素，并可以不断向前追溯从而求得队列长度。所以要记录当前出现过的元素，同时为优化追溯过程，需要记录数列长度，故可以使用动态规划求解。</description>
    </item>
    
    <item>
      <title>Leetcode 367. 有效的完全平方数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-367.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</link>
      <pubDate>Thu, 04 Nov 2021 21:44:09 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-367.-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/valid-perfect-square/
难度： 简单
题目描述 给定一个 正整数 num ，编写一个函数，如果 num 是一个完全平方数，则返回 true ，否则返回 false 。
进阶： 不要 使用任何内置的库函数，如 sqrt 。
示例 1： 输入： num = 16
输出： true
示例 2： 输入： num = 14
输出： false
提示： 1 &amp;lt;= num &amp;lt;= 231 - 1 解题思路 暴力求解 从 i = 1 开始每次累加 1，直到 i * i &amp;gt;= num 时为止。
若此时 i * i = num ，则返回 true；否则，返回 false 。
func isPerfectSquare(num int) bool { i := 1 for ; i*i &amp;lt; num; i++ { } if i*i == num { return true } return false } 复杂度 时间复杂度：$ O(\sqrt{num}) $ 空间复杂度：$ O(1) $ 二分查找 若 num 是一个完全平方数，则其平方根位于区间 [1, num] 中，可以使用二分查找求解，设区间中间为 mid，左右端点为 l 和 r ：</description>
    </item>
    
    <item>
      <title>Leetcode 237. 删除链表中的节点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-237.-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 02 Nov 2021 22:55:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-237.-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/delete-node-in-a-linked-list/
难度： 简单
题目描述 请编写一个函数，用于 删除单链表中某个特定节点 。在设计函数时需要注意，你无法访问链表的头节点 head ，只能直接访问 要被删除的节点 。
题目数据保证需要删除的节点 不是末尾节点 。
示例 1： 输入： head = [4,5,1,9], node = 5
输出： [4,1,9]
解释： 指定链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9
示例 2： 输入： head = [4,5,1,9], node = 1
输出： [4,5,9]
解释： 指定链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 5 -&amp;gt; 9
示例 3： 输入： head = [1,2,3,4], node = 3
输出： [1,2,4]
示例 4： 输入： head = [0,1], node = 0</description>
    </item>
    
    <item>
      <title>Leetcode 575. 分糖果</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-575.-%E5%88%86%E7%B3%96%E6%9E%9C/</link>
      <pubDate>Mon, 01 Nov 2021 23:18:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-575.-%E5%88%86%E7%B3%96%E6%9E%9C/</guid>
      <description>链接： https://leetcode-cn.com/problems/distribute-candies/
难度： 简单
题目描述 Alice 有 n 枚糖，其中第 i 枚糖的类型为 candyType[i] 。Alice 注意到她的体重正在增长，所以前去拜访了一位医生。
医生建议 Alice 要少摄入糖分，只吃掉她所有糖的 n / 2 即可（n 是一个偶数）。Alice 非常喜欢这些糖，她想要在遵循医生建议的情况下，尽可能吃到最多不同种类的糖。
给你一个长度为 n 的整数数组 candyType ，返回： Alice 在仅吃掉 n / 2 枚糖的情况下，可以吃到糖的最多种类数。
示例 1： 输入： candyType = [1,1,2,2,3,3]
输出： 3
解释： Alice 只能吃 6 / 2 = 3 枚糖，由于只有 3 种糖，她可以每种吃一枚。
示例 2： 输入： candyType = [1,1,2,3]
输出： 2
解释： Alice 只能吃 4 / 2 = 2 枚糖，不管她选择吃的种类是 [1,2]、[1,3] 还是 [2,3]，她只能吃到两种不同类的糖。</description>
    </item>
    
    <item>
      <title>Leetcode 500. 键盘行</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-500.-%E9%94%AE%E7%9B%98%E8%A1%8C/</link>
      <pubDate>Sun, 31 Oct 2021 13:42:17 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-500.-%E9%94%AE%E7%9B%98%E8%A1%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/keyboard-row/
难度： 简单
题目描述 给你一个字符串数组 words ，只返回可以使用在 美式键盘 同一行的字母打印出来的单词。键盘如下图所示。
美式键盘 中：
第一行由字符 &amp;quot;qwertyuiop&amp;quot; 组成。 第二行由字符 &amp;quot;asdfghjkl&amp;quot; 组成。 第三行由字符 &amp;quot;zxcvbnm&amp;quot; 组成。 示例 1： 输入： words = [&amp;ldquo;Hello&amp;rdquo;,&amp;ldquo;Alaska&amp;rdquo;,&amp;ldquo;Dad&amp;rdquo;,&amp;ldquo;Peace&amp;rdquo;]
输出： [&amp;ldquo;Alaska&amp;rdquo;,&amp;ldquo;Dad&amp;rdquo;]
示例 2： 输入： words = [&amp;ldquo;omk&amp;rdquo;]
输出： []
示例 3： 输入： words = [&amp;ldquo;adsdf&amp;rdquo;,&amp;ldquo;sfd&amp;rdquo;]
输出： [&amp;ldquo;adsdf&amp;rdquo;,&amp;ldquo;sfd&amp;rdquo;]
提示： 1 &amp;lt;= words.length &amp;lt;= 20 1 &amp;lt;= words[i].length &amp;lt;= 100 words[i] 由英文字母（小写和大写字母）组成 解题思路 哈希 使用哈希表记录每个字母对应的行号。之后遍历每个字符串，判断每个字母行号是否相同。
func findWords(words []string) []string { row := make(map[byte]int) for line, chars := range []string{&amp;#34;qwertyuiop&amp;#34;, &amp;#34;asdfghjkl&amp;#34;, &amp;#34;zxcvbnm&amp;#34;} { for i := range chars { row[chars[i]] = line row[chars[i]-&amp;#39;a&amp;#39;+&amp;#39;A&amp;#39;] = line } } ans := make([]string, 0, len(words)) Outer: for _, word := range words { line := row[word[0]] for i := 1; i &amp;lt; len(word); i++ { if row[word[i]] !</description>
    </item>
    
    <item>
      <title>Leetcode 260. 只出现一次的数字 III</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-260.-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-iii/</link>
      <pubDate>Sat, 30 Oct 2021 11:40:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-260.-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-iii/</guid>
      <description>链接： https://leetcode-cn.com/problems/single-number-iii/
难度： 中等
题目描述 给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。
进阶： 你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？
示例 1： 输入： nums = [1,2,1,3,2,5]
输出： [3,5]
解释： [5, 3] 也是有效的答案。
示例 2： 输入： nums = [-1,0]
输出： [-1,0]
示例 3： 输入： nums = [0,1]
输出： [1,0]
提示： 2 &amp;lt;= nums.length &amp;lt;= 3 * 104 -231 &amp;lt;= nums[i] &amp;lt;= 231 - 1 除两个只出现一次的整数外，nums 中的其他数字都出现两次 解题思路 哈希 使用哈希表统计数字的出现次数，将出现次数为 1 的加入到结果中。
func singleNumber(nums []int) []int { cnt := make(map[int]int) for _, num := range nums { cnt[num]++ } ans := make([]int, 0, 2) for num, c := range cnt { if c == 1 { ans = append(ans, num) } } return ans } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ 异或 + 拆分 将整个数组进行异或操作，得到最后的两个数字的异或值。从其中找出为 1 的位，按照此位将数组中的数字分为两组，则同一对数字必然在同一组，不同的两个数在不同组，对两组分别求异或即可得出结果。</description>
    </item>
    
    <item>
      <title>Leetcode 869. 重新排序得到 2 的幂</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-869.-%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0-2-%E7%9A%84%E5%B9%82/</link>
      <pubDate>Thu, 28 Oct 2021 12:49:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-869.-%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0-2-%E7%9A%84%E5%B9%82/</guid>
      <description>链接： https://leetcode-cn.com/problems/reordered-power-of-2/
难度： 中等
题目描述 给定正整数 N ，我们按任何顺序（包括原始顺序）将数字重新排序，注意其前导数字不能为零。
如果我们可以通过上述方式得到 2 的幂，返回 true；否则，返回 false。
示例 1： 输入： 1
输出： true
示例 2： 输入： 10
输出： false
示例 3： 输入： 16
输出： true
示例 4： 输入： 24
输出： false
示例 5： 输入： 46
输出： true
提示： 1 &amp;lt;= N &amp;lt;= 109 解题思路 排序 + 哈希表 遍历范围内所有 2 的幂，按照每一位数字顺序进行排序形成字符串并构成一个哈希表。
对于每个数字，按照每一位数字顺序进行排序形成字符串，查表即可。
func reorderedPowerOf2(n int) bool { proc := func(num int) string { t := make([]byte, 0, 10) for ; num &amp;gt; 0; num /= 10 { t = append(t, byte(num%10)+&amp;#39;0&amp;#39;) } sort.</description>
    </item>
    
    <item>
      <title>Leetcode 496. 下一个更大元素 I</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-496.-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0-i/</link>
      <pubDate>Tue, 26 Oct 2021 11:32:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-496.-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0-i/</guid>
      <description>链接： https://leetcode-cn.com/problems/next-greater-element-i/
难度： 简单
题目描述 给你两个 没有重复元素 的数组 nums1 和 nums2 ，其中 nums1 是 nums2 的子集。
请你找出 nums1 中每个元素在 nums2 中的下一个比其大的值。
nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出 -1 。
示例 1： 输入: nums1 = [4,1,2], nums2 = [1,3,4,2].
输出: [-1,3,-1]
解释:
对于 num1 中的数字 4 ，你无法在第二个数组中找到下一个更大的数字，因此输出 -1 。
对于 num1 中的数字 1 ，第二个数组中数字1右边的下一个较大数字是 3 。
对于 num1 中的数字 2 ，第二个数组中没有下一个更大的数字，因此输出 -1 。
示例 2： 输入: nums1 = [2,4], nums2 = [1,2,3,4].</description>
    </item>
    
    <item>
      <title>Leetcode 240. 搜索二维矩阵 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-240.-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-ii/</link>
      <pubDate>Mon, 25 Oct 2021 11:40:02 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-240.-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/search-a-2d-matrix-ii/
难度： 中等
题目描述 编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：
每行的元素从左到右升序排列。 每列的元素从上到下升序排列。 示例 1： 输入： matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
输出： true
示例 2： 输入： matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
输出： false
提示： m == matrix.length n == matrix[i].length 1 &amp;lt;= n, m &amp;lt;= 300 -109 &amp;lt;= matrix[i][j] &amp;lt;= 109 每行的所有元素从左到右升序排列 每列的所有元素从上到下升序排列 -109 &amp;lt;= target &amp;lt;= 109 解题思路 暴力求解 遍历整个矩阵，寻找 target。
func searchMatrix(matrix [][]int, target int) bool { for _, line := range matrix { for _, cell := range line { if cell == target { return true } } } return false } 复杂度 时间复杂度：$ O(mn)$ 空间复杂度：$ O(1) $ 二分查找 由于矩阵每一行是有序的，针对每一行二分查找 target。</description>
    </item>
    
    <item>
      <title>Leetcode 492. 构造矩形</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-492.-%E6%9E%84%E9%80%A0%E7%9F%A9%E5%BD%A2/</link>
      <pubDate>Sat, 23 Oct 2021 12:04:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-492.-%E6%9E%84%E9%80%A0%E7%9F%A9%E5%BD%A2/</guid>
      <description>链接： https://leetcode-cn.com/problems/construct-the-rectangle/
难度： 简单
题目描述 作为一位web开发者， 懂得怎样去规划一个页面的尺寸是很重要的。 现给定一个具体的矩形页面面积，你的任务是设计一个长度为 L 和宽度为 W 且满足以下要求的矩形的页面。要求：
你设计的矩形页面必须等于给定的目标面积。 宽度 W 不应大于长度 L，换言之，要求 L &amp;gt;= W 。 长度 L 和宽度 W 之间的差距应当尽可能小。 你需要按顺序输出你设计的页面的长度 L 和宽度 W。
示例 ： 输入: 4
输出: [2, 2]
解释: 目标面积是 4， 所有可能的构造方案有 [1,4], [2,2], [4,1]。
但是根据要求2，[1,4] 不符合要求; 根据要求3，[2,2] 比 [4,1] 更能符合要求. 所以输出长度 L 为 2， 宽度 W 为 2。
提示： 给定的面积不大于 10,000,000 且为正整数。 你设计的页面的长度和宽度必须都是正整数。 解题思路 模拟 令 W 从 $ \sqrt{area} $ 开始，找到符合条件的首个 L 的即返回。</description>
    </item>
    
    <item>
      <title>Leetcode 229. 求众数 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-229.-%E6%B1%82%E4%BC%97%E6%95%B0-ii/</link>
      <pubDate>Fri, 22 Oct 2021 10:50:56 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-229.-%E6%B1%82%E4%BC%97%E6%95%B0-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/majority-element-ii/
难度： 中等
题目描述 给定一个大小为 n 的整数数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。
示例 1： 输入： [3,2,3]
输出： [3]
示例 2： 输入： nums = [1]
输出： [1]
示例 3： 输入： [1,1,1,3,3,2,2,2]
输出： [1,2]
提示： 1 &amp;lt;= nums.length &amp;lt;= 5 * 104 -109 &amp;lt;= nums[i] &amp;lt;= 109 解题思路 哈希 使用哈希表统计每个数字出现的数量，当其首次超过 ⌊ n/3 ⌋ 次时候，加入到结果集合中。
func majorityElement(nums []int) []int { major := make([]int, 0, 2) minCnt := len(nums)/3 + 1 cnt := make(map[int]int) for _, num := range nums { cnt[num]++ if cnt[num] == minCnt { major = append(major, num) } } return major } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ </description>
    </item>
    
    <item>
      <title>Leetcode 66. 加一</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-66.-%E5%8A%A0%E4%B8%80/</link>
      <pubDate>Thu, 21 Oct 2021 11:53:08 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-66.-%E5%8A%A0%E4%B8%80/</guid>
      <description>链接： https://leetcode-cn.com/problems/plus-one/
难度： 简单
题目描述 给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储 单个 数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。
示例 1： 输入： digits = [1,2,3]
输出： [1,2,4]
解释： 输入数组表示数字 123。
示例 2： 输入： digits = [4,3,2,1]
输出： [4,3,2,2]
解释： 输入数组表示数字 4321。
示例 3： 输入： digits = [0]
输出： [1]
提示： 1 &amp;lt;= digits.length &amp;lt;= 100 0 &amp;lt;= digits[i] &amp;lt;= 9 解题思路 模拟 从尾部开始计算，使用进位标识 c 记录是否需要进位，初始 c 为 1。
当当前数字加上进位 c 后，若为 10 则当前位置为 0，c 为 1，继续运算； 否则，c 置为 0，求解结束，直接返回。 正常循环结束时，说明最高位还有进位，新开数组首个元素置为 1，其余元素拷贝过去返回。</description>
    </item>
    
    <item>
      <title>Leetcode 453. 最小操作次数使数组元素相等</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-453.-%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89/</link>
      <pubDate>Wed, 20 Oct 2021 10:14:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-453.-%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89/</guid>
      <description>链接： https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements/
难度： 简单
题目描述 给你一个长度为 n 的整数数组，每次操作将会使 n - 1 个元素增加 1 。返回让数组所有元素相等的最小操作次数。
示例 1： 输入： nums = [1,2,3]
输出： 3
解释：
只需要3次操作（注意每次操作会增加两个元素的值）：
[1,2,3] =&amp;gt; [2,3,3] =&amp;gt; [3,4,3] =&amp;gt; [4,4,4]
示例 2： 输入： nums = [1,1,1]
输出： 0
提示： n == nums.length 1 &amp;lt;= nums.length &amp;lt;= 105 -109 &amp;lt;= nums[i] &amp;lt;= 109 答案保证符合 32-bit 整数 解题思路 数学 因为最终目标是使得所有元素数字相等，则每次操作使 n - 1 个元素增加 1，可以变换为操作使其中一个元素减 1，则只需求解将所有元素变为最小值的操作步骤次数。
func minMoves(nums []int) int { ans := 0 min := math.</description>
    </item>
    
    <item>
      <title>Leetcode 211. 添加与搜索单词 - 数据结构设计</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-211.-%E6%B7%BB%E5%8A%A0%E4%B8%8E%E6%90%9C%E7%B4%A2%E5%8D%95%E8%AF%8D-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 19 Oct 2021 12:58:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-211.-%E6%B7%BB%E5%8A%A0%E4%B8%8E%E6%90%9C%E7%B4%A2%E5%8D%95%E8%AF%8D-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>链接： https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/
难度： 中等
题目描述 请你设计一个数据结构，支持 添加新单词 和 查找字符串是否与任何先前添加的字符串匹配 。
实现词典类 WordDictionary ：
WordDictionary() 初始化词典对象 void addWord(word) 将 word 添加到数据结构中，之后可以对它进行匹配 bool search(word) 如果数据结构中存在字符串与 word 匹配，则返回 true ；否则，返回 false 。word 中可能包含一些 &#39;.&#39; ，每个 . 都可以表示任何一个字母。 示例： 输入：
[&amp;ldquo;WordDictionary&amp;rdquo;,&amp;ldquo;addWord&amp;rdquo;,&amp;ldquo;addWord&amp;rdquo;,&amp;ldquo;addWord&amp;rdquo;,&amp;ldquo;search&amp;rdquo;,&amp;ldquo;search&amp;rdquo;,&amp;ldquo;search&amp;rdquo;,&amp;ldquo;search&amp;rdquo;]
[[],[&amp;ldquo;bad&amp;rdquo;],[&amp;ldquo;dad&amp;rdquo;],[&amp;ldquo;mad&amp;rdquo;],[&amp;ldquo;pad&amp;rdquo;],[&amp;ldquo;bad&amp;rdquo;],[&amp;quot;.ad&amp;quot;],[&amp;ldquo;b..&amp;rdquo;]]
输出：
[null,null,null,null,false,true,true,true]
解释：
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord(&amp;ldquo;bad&amp;rdquo;);
wordDictionary.addWord(&amp;ldquo;dad&amp;rdquo;);
wordDictionary.addWord(&amp;ldquo;mad&amp;rdquo;);
wordDictionary.search(&amp;ldquo;pad&amp;rdquo;); // return False
wordDictionary.search(&amp;ldquo;bad&amp;rdquo;); // return True
wordDictionary.search(&amp;quot;.ad&amp;quot;); // return True
wordDictionary.search(&amp;ldquo;b..&amp;rdquo;); // return True
提示： 1 &amp;lt;= word.length &amp;lt;= 500 addWord 中的 word 由小写英文字母组成 search 中的 word 由 &#39;.</description>
    </item>
    
    <item>
      <title>Leetcode 476. 数字的补数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-476.-%E6%95%B0%E5%AD%97%E7%9A%84%E8%A1%A5%E6%95%B0/</link>
      <pubDate>Mon, 18 Oct 2021 09:44:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-476.-%E6%95%B0%E5%AD%97%E7%9A%84%E8%A1%A5%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-complement/
难度： 简单
题目描述 给你一个 正 整数 num ，输出它的补数。补数是对该数的二进制表示取反。
示例 1： 输入： num = 5
输出： 2
解释： 5 的二进制表示为 101（没有前导零位），其补数为 010。所以你需要输出 2 。
示例 2： 输入： num = 1
输出： 0
解释： 1 的二进制表示为 1（没有前导零位），其补数为 0。所以你需要输出 0 。
提示： 给定的整数 num 保证在 32 位带符号整数的范围内。 num &amp;gt;= 1 你可以假定二进制数不包含前导零位。 解题思路 位运算 从二进制的最后一位开始，直到首个 1 为止，当遇到 0 时，将结果对应位置为 1。
func findComplement(num int) int { ans := 0 for bit := 1; bit &amp;lt;= num; bit &amp;lt;&amp;lt;= 1 { if num &amp;amp; bit == 0 { ans |= bit } } return ans } 复杂度 时间复杂度：$ O(\log{num}) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 230. 二叉搜索树中第K小的元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-230.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sun, 17 Oct 2021 10:43:50 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-230.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/
难度： 中等
题目描述 给定一个二叉搜索树的根节点 root ，和一个整数 k ，请你设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。
示例 1： 输入： root = [3,1,4,null,2], k = 1
输出： 1
示例 2： 输入： root = [5,3,6,2,4,null,null,1], k = 3
输出： 3
提示： 树中的节点数为 n 。 1 &amp;lt;= k &amp;lt;= n &amp;lt;= 104 0 &amp;lt;= Node.val &amp;lt;= 104 进阶： 如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化算法？
解题思路 中序遍历 中序遍历，每遇到一个结点， k = k - 1，当 k 减为 0 时，返回当前结点的值。
func kthSmallest(root *TreeNode, k int) int { var dfs func(node *TreeNode) int dfs = func(node *TreeNode) int { if node == nil { return -1 } ans := dfs(node.</description>
    </item>
    
    <item>
      <title>Leetcode 282. 给表达式添加运算符</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-282.-%E7%BB%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B7%BB%E5%8A%A0%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sat, 16 Oct 2021 12:14:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-282.-%E7%BB%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B7%BB%E5%8A%A0%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/expression-add-operators/
难度： 中等
题目描述 给定一个仅包含数字 0-9 的字符串 num 和一个目标值整数 target ，在 num 的数字之间添加 二元 运算符（不是一元）+、- 或 * ，返回所有能够得到目标值的表达式。
示例 1： 输入: num = &amp;ldquo;123&amp;rdquo;, target = 6
输出: [&amp;ldquo;1+2+3&amp;rdquo;, &amp;ldquo;123&amp;rdquo;]
示例 2： 输入: num = &amp;ldquo;232&amp;rdquo;, target = 8
输出: [&amp;ldquo;23+2&amp;rdquo;, &amp;ldquo;2+32&amp;rdquo;]
示例 3： 输入: num = &amp;ldquo;105&amp;rdquo;, target = 5
输出: [&amp;ldquo;1*0+5&amp;rdquo;,&amp;ldquo;10-5&amp;rdquo;]
示例 4： 输入: num = &amp;ldquo;00&amp;rdquo;, target = 0
输出: [&amp;ldquo;0+0&amp;rdquo;, &amp;ldquo;0-0&amp;rdquo;, &amp;ldquo;0*0&amp;rdquo;]
示例 5： 输入: num = &amp;ldquo;3456237490&amp;rdquo;, target = 9191</description>
    </item>
    
    <item>
      <title>Leetcode 38. 外观数列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-38.-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</link>
      <pubDate>Fri, 15 Oct 2021 14:55:19 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-38.-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-and-say/
难度： 中等
题目描述 给定一个正整数 n ，输出外观数列的第 n 项。
「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。
你可以将其视作是由递归公式定义的数字字符串序列：
countAndSay(1) = &amp;quot;1&amp;quot; countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。 前五项如下： 1. 1 2. 11 3. 21 4. 1211 5. 111221 第一项是数字 1 描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 &amp;#34;11&amp;#34; 描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 &amp;#34;21&amp;#34; 描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 &amp;#34;1211&amp;#34; 描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 &amp;#34;111221&amp;#34; 要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</description>
    </item>
    
    <item>
      <title>Leetcode 94. 二叉树的中序遍历</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-94.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Thu, 14 Oct 2021 14:53:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-94.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>链接： https://leetcode-cn.com/problems/binary-tree-inorder-traversal/
难度： 简单
题目描述 给定一个二叉树的根节点 root ，返回它的 中序 遍历。
示例 1： 输入： root = [1,null,2,3]
输出： [1,3,2]
示例 2： 输入： root = []
输出： []
示例 3： 输入： root = [1]
输出： [1]
示例 4： 输入： root = [1,2]
输出： [2,1]
示例 5： 输入： root = [1,null,2]
输出： [1,2]
提示： 树中节点数目在范围 [0, 100] 内 100 &amp;lt;= Node.val &amp;lt;= 100 **进阶: ** 递归算法很简单，你可以通过迭代算法完成吗？
解题思路 递归 func inorderTraversal(root *TreeNode) []int { if root == nil { return nil } ans := inorderTraversal(root.</description>
    </item>
    
    <item>
      <title>Leetcode 53. 最大子序和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-53.-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</link>
      <pubDate>Thu, 14 Oct 2021 13:28:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-53.-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-subarray/
难度： 简单
题目描述 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
示例 1： 输入： nums = [-2,1,-3,4,-1,2,1,-5,4]
输出： 6
解释： 连续子数组 [4,-1,2,1] 的和最大，为 6 。
示例 2： 输入： nums = [1]
输出： 1
示例 3： 输入： nums = [0]
输出： 0
示例 4： 输入： nums = [-1]
输出： -1
示例 5： 输入： nums = [-100000]
输出： -100000
提示： 1 &amp;lt;= nums.length &amp;lt;= 105 -104 &amp;lt;= nums[i] &amp;lt;= 104 进阶： 如果你已经实现复杂度为 $O(n)$ 的解法，尝试使用更为精妙的 分治法 求解。</description>
    </item>
    
    <item>
      <title>Leetcode 234. 回文链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-234.-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 14 Oct 2021 12:56:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-234.-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/palindrome-linked-list/
难度： 简单
题目描述 给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。
示例 1： 输入： head = [1,2,2,1]
输出： true
示例 2： 输入： head = [1,2]
输出： false
提示： 链表中节点数目在范围 [1, 105] 内 0 &amp;lt;= Node.val &amp;lt;= 9 进阶： 你能否用 $O(n)$ 时间复杂度和 $O(1)$ 空间复杂度解决此题？
解题思路 顺序表 将链表中的元素记录到数组中，判定其是否回文。
func isPalindrome(head *ListNode) bool { str := make([]int, 0, 1e5) for ; head != nil; head = head.Next { str = append(str, head.Val) } for i := len(str)/2 - 1; i &amp;gt;= 0; i-- { if str[i] !</description>
    </item>
    
    <item>
      <title>剑指 Offer II 069. 山峰数组的顶部</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-069.-%E5%B1%B1%E5%B3%B0%E6%95%B0%E7%BB%84%E7%9A%84%E9%A1%B6%E9%83%A8/</link>
      <pubDate>Thu, 14 Oct 2021 10:43:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-069.-%E5%B1%B1%E5%B3%B0%E6%95%B0%E7%BB%84%E7%9A%84%E9%A1%B6%E9%83%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/B1IidL/
难度： 简单
题目描述 符合下列属性的数组 arr 称为 山峰数组（山脉数组） ：
arr.length &amp;gt;= 3 存在 i（0 &amp;lt; i &amp;lt; arr.length - 1）使得： arr[0] &amp;lt; arr[1] &amp;lt; ... arr[i-1] &amp;lt; arr[i] arr[i] &amp;gt; arr[i+1] &amp;gt; ... &amp;gt; arr[arr.length - 1] 给定由整数组成的山峰数组 arr ，返回任何满足 arr[0] &amp;lt; arr[1] &amp;lt; ... arr[i - 1] &amp;lt; arr[i] &amp;gt; arr[i + 1] &amp;gt; ... &amp;gt; arr[arr.length - 1] 的下标 i ，即山峰顶部。
示例 1： 输入： arr = [0,1,0]</description>
    </item>
    
    <item>
      <title>Leetcode 412. Fizz Buzz</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-412.-fizz-buzz/</link>
      <pubDate>Wed, 13 Oct 2021 10:46:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-412.-fizz-buzz/</guid>
      <description>链接： https://leetcode-cn.com/problems/fizz-buzz/
难度： 简单
题目描述 写一个程序，输出从 1 到 n 数字的字符串表示。
如果 n 是3的倍数，输出“Fizz”； 如果 n 是5的倍数，输出“Buzz”； 如果 n 同时是3和5的倍数，输出 “FizzBuzz”。 示例： n = 15, 返回: [ &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;Fizz&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;Buzz&amp;#34;, &amp;#34;Fizz&amp;#34;, &amp;#34;7&amp;#34;, &amp;#34;8&amp;#34;, &amp;#34;Fizz&amp;#34;, &amp;#34;Buzz&amp;#34;, &amp;#34;11&amp;#34;, &amp;#34;Fizz&amp;#34;, &amp;#34;13&amp;#34;, &amp;#34;14&amp;#34;, &amp;#34;FizzBuzz&amp;#34; ] 解题思路 模拟 从 1 到 n 对每个数进行判定，将其转换为正确的字符串添加进结果中。
func fizzBuzz(n int) []string { ans := make([]string, 0, n) for i := 1; i &amp;lt;= n; i++ { if i % 3 == 0 &amp;amp;&amp;amp; i % 5 == 0 { ans = append(ans, &amp;#34;FizzBuzz&amp;#34;) } else if i % 3 == 0 { ans = append(ans, &amp;#34;Fizz&amp;#34;) } else if i % 5 == 0 { ans = append(ans, &amp;#34;Buzz&amp;#34;) } else { ans = append(ans, strconv.</description>
    </item>
    
    <item>
      <title>Leetcode 124. 二叉树中的最大路径和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-124.-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/</link>
      <pubDate>Tue, 12 Oct 2021 18:59:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-124.-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/
难度： 困难
题目描述 路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。
路径和 是路径中各节点值的总和。
给你一个二叉树的根节点 root ，返回其 最大路径和 。
示例 1： 输入： root = [1,2,3]
输出： 6
解释： 最优路径是 2 -&amp;gt; 1 -&amp;gt; 3 ，路径和为 2 + 1 + 3 = 6
示例 2： 输入： root = [-10,9,20,null,null,15,7]
输出： 42
解释： 最优路径是 15 -&amp;gt; 20 -&amp;gt; 7 ，路径和为 15 + 20 + 7 = 42
提示： 树中节点数目范围是 [1, 3 * 104] -1000 &amp;lt;= Node.</description>
    </item>
    
    <item>
      <title>Leetcode 114. 二叉树展开为链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-114.-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 12 Oct 2021 18:29:58 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-114.-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/
难度： 中等
题目描述 给你二叉树的根结点 root ，请你将它展开为一个单链表：
展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。 展开后的单链表应该与二叉树 先序遍历 顺序相同。 示例 1： 输入： root = [1,2,5,3,4,null,6]
输出： [1,null,2,null,3,null,4,null,5,null,6]
示例 2： 输入： root = []
输出： []
示例 3： 输入： root = [0]
输出： [0]
提示： 树中结点数在范围 [0, 2000] 内 -100 &amp;lt;= Node.val &amp;lt;= 100 进阶： 你可以使用原地算法（$O(1)$ 额外空间）展开这棵树吗？
解题思路 先序遍历 使用一个记录目前展开链表的尾部，先序遍历二叉树，每遇到一个新结点，将其加入到尾部。
func flatten(root *TreeNode) { head := new(TreeNode) tail := head var dfs func(node *TreeNode) dfs = func(node *TreeNode) { if node == nil { return } left := node.</description>
    </item>
    
    <item>
      <title>Leetcode 92. 反转链表 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-92.-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-ii/</link>
      <pubDate>Tue, 12 Oct 2021 16:28:21 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-92.-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/reverse-linked-list-ii/
难度： 中等
题目描述 给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &amp;lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。
示例 1： 输入： head = [1,2,3,4,5], left = 2, right = 4
输出： [1,4,3,2,5]
示例 2： 输入： head = [5], left = 1, right = 1
输出： [5]
提示： 链表中节点数目为 n 1 &amp;lt;= n &amp;lt;= 500 -500 &amp;lt;= Node.val &amp;lt;= 500 1 &amp;lt;= left &amp;lt;= right &amp;lt;= n 进阶： 你可以使用一趟扫描完成反转吗？</description>
    </item>
    
    <item>
      <title>Leetcode 146. LRU 缓存机制</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-146.-lru-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 12 Oct 2021 14:06:10 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-146.-lru-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>链接： https://leetcode-cn.com/problems/lru-cache/
难度： 中等
题目描述 运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制 。
实现 LRUCache 类：
LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。 void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。 进阶： 你是否可以在 O(1) 时间复杂度内完成这两种操作？
示例： 输入:
[&amp;ldquo;LRUCache&amp;rdquo;, &amp;ldquo;put&amp;rdquo;, &amp;ldquo;put&amp;rdquo;, &amp;ldquo;get&amp;rdquo;, &amp;ldquo;put&amp;rdquo;, &amp;ldquo;get&amp;rdquo;, &amp;ldquo;put&amp;rdquo;, &amp;ldquo;get&amp;rdquo;, &amp;ldquo;get&amp;rdquo;, &amp;ldquo;get&amp;rdquo;]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
输出:
[null, null, null, 1, null, -1, null, -1, 3, 4]</description>
    </item>
    
    <item>
      <title>Leetcode 122. 买卖股票的最佳时机 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-122.-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-ii/</link>
      <pubDate>Tue, 12 Oct 2021 13:45:49 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-122.-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/
难度： 中等
题目描述 给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意： 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1： 输入: prices = [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2： 输入: prices = [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</description>
    </item>
    
    <item>
      <title>Leetcode 121. 买卖股票的最佳时机</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-121.-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Tue, 12 Oct 2021 13:34:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-121.-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</guid>
      <description>链接： https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/
难度： 简单
题目描述 给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
示例 1： 输入： [7,1,5,3,6,4]
输出： 5
解释： 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
示例 2： 输入： prices = [7,6,4,3,1]
输出： 0
解释： 在这种情况下, 没有交易完成, 所以最大利润为 0。
提示： 1 &amp;lt;= prices.length &amp;lt;= 105 0 &amp;lt;= prices[i] &amp;lt;= 104 解题思路 遍历 使用 min 记录到目前为止股票的最小值，每次使用当前股票价格减去 min ，更新最大利润。</description>
    </item>
    
    <item>
      <title>Leetcode 103. 二叉树的锯齿形层序遍历</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-103.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Tue, 12 Oct 2021 13:08:58 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-103.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>链接： https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/
难度： 中等
题目描述 给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。
例如： 给定二叉树 [3,9,20,null,null,15,7],
3 / \ 9 20 / \ 15 7 返回锯齿形层序遍历如下：
[ [3], [20,9], [15,7] ] 解题思路 层序遍历 使用一个双端队列记录遍历到的结点，初始时根结点入队。
奇偶分离，偶数层从头至尾遍历完当前整层的所有元素，子结点先左后右从队尾入队；奇数层从尾至头遍历整层所有元素，子结点先右后左从队头入队。
每次遍历到的结点值加入到结果队列中，直至队列为空为止。
func zigzagLevelOrder(root *TreeNode) [][]int { if root == nil { return make([][]int, 0) } ans := make([][]int, 0, 1) deque := list.New() deque.PushBack(root) for deque.Len() &amp;gt; 0 { t := make([]int, 0, deque.Len()) for i := deque.Len(); i &amp;gt; 0; i-- { node := deque.</description>
    </item>
    
    <item>
      <title>Leetcode 29. 两数相除</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-29.-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</link>
      <pubDate>Tue, 12 Oct 2021 11:13:55 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-29.-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</guid>
      <description>链接： https://leetcode-cn.com/problems/divide-two-integers/
难度： 中等
题目描述 给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。
返回被除数 dividend 除以除数 divisor 得到的商。
整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2
示例1： 输入: dividend = 10, divisor = 3
输出: 3
解释: 10/3 = truncate(3.33333..) = truncate(3) = 3
示例2： 输入: dividend = 7, divisor = -3
输出: -2
解释: 7/-3 = truncate(-2.33333..) = -2
提示： 被除数和除数均为 32 位有符号整数。 除数不为 0。 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1 解题思路 减法模拟 + 位运算 使用多次的减法来计算，由于负数的取值范围更大，将正数变换为负数求解。</description>
    </item>
    
    <item>
      <title>Leetcode 273. 整数转换英文表示</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-273.-%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2%E8%8B%B1%E6%96%87%E8%A1%A8%E7%A4%BA/</link>
      <pubDate>Mon, 11 Oct 2021 21:29:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-273.-%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2%E8%8B%B1%E6%96%87%E8%A1%A8%E7%A4%BA/</guid>
      <description>链接： https://leetcode-cn.com/problems/integer-to-english-words/
难度： 困难
题目描述 将非负整数 num 转换为其对应的英文表示。
示例 1： 输入： num = 123
输出： &amp;ldquo;One Hundred Twenty Three&amp;rdquo;
示例 2： 输入： num = 12345
输出： &amp;ldquo;Twelve Thousand Three Hundred Forty Five&amp;rdquo;
示例 3： 输入： num = 1234567
输出： &amp;ldquo;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&amp;rdquo;
示例 4： 输入： num = 1234567891
输出： &amp;ldquo;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 441. 排列硬币</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-441.-%E6%8E%92%E5%88%97%E7%A1%AC%E5%B8%81/</link>
      <pubDate>Sun, 10 Oct 2021 13:25:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-441.-%E6%8E%92%E5%88%97%E7%A1%AC%E5%B8%81/</guid>
      <description>链接： https://leetcode-cn.com/problems/arranging-coins/
难度： 简单
题目描述 你总共有 n 枚硬币，并计划将它们按阶梯状排列。对于一个由 k 行组成的阶梯，其第 i 行必须正好有 i 枚硬币。阶梯的最后一行 可能 是不完整的。
给你一个数字 n ，计算并返回可形成 完整阶梯行 的总行数。
示例 1： 输入： n = 5
输出： 2
解释： 因为第三行不完整，所以返回 2 。
示例 2： 输入： n = 8
输出： 3
解释： 因为第四行不完整，所以返回 3 。
提示： 1 &amp;lt;= n &amp;lt;= 231 - 1 解题思路 模拟 按照题设排列，直到不够排成一行为止，返回排列完成的行数。
func arrangeCoins(n int) int { ans := 0 for i := 1; n &amp;gt;= i; i++ { ans++ n -= i } return ans } 复杂度 时间复杂度：$ O(\sqrt{n}) $ 空间复杂度：$ O(1) $ 数学 每一行到排列构成等差数列，根据等差数列求和公式可得： $$ \begin{aligned} \frac{x(x+1)}{2} &amp;amp;= n \\ x^2 + x - 2n &amp;amp;= 0 \end{aligned} $$ 求得： $$ x = \frac{-1\pm\sqrt{1+8n}}{2} $$ 得到排列完成的行数为：$\lfloor\frac{\sqrt{8n+1}-1}{2}\rfloor$</description>
    </item>
    
    <item>
      <title>Leetcode 187. 重复的DNA序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-187.-%E9%87%8D%E5%A4%8D%E7%9A%84dna%E5%BA%8F%E5%88%97/</link>
      <pubDate>Fri, 08 Oct 2021 10:51:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-187.-%E9%87%8D%E5%A4%8D%E7%9A%84dna%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/repeated-dna-sequences/
难度： 中等
题目描述 所有 DNA 都由一系列缩写为 &#39;A&#39;，&#39;C&#39;，&#39;G&#39; 和 &#39;T&#39; 的核苷酸组成，例如：&amp;quot;ACGAATTCCG&amp;quot;。在研究 DNA 时，识别 DNA 中的重复序列有时会对研究非常有帮助。
编写一个函数来找出所有目标子串，目标子串的长度为 10，且在 DNA 字符串 s 中出现次数超过一次。
示例 1： 输入： s = &amp;ldquo;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&amp;rdquo;
输出： [&amp;ldquo;AAAAACCCCC&amp;rdquo;,&amp;ldquo;CCCCCAAAAA&amp;rdquo;]
示例 2： 输入： s = &amp;ldquo;AAAAAAAAAAAAA&amp;rdquo;
输出： [&amp;ldquo;AAAAAAAAAA&amp;rdquo;]
提示： 0 &amp;lt;= s.length &amp;lt;= 105 s[i] 为 &amp;lsquo;A&amp;rsquo;、&amp;lsquo;C&amp;rsquo;、&amp;lsquo;G&amp;rsquo; 或 &amp;lsquo;T&amp;rsquo; 解题思路 哈希 使用哈希表记录每个长度为 10 的字串的出现次数，出现次数大于 1 时，添加到结果队列中。
func findRepeatedDnaSequences(s string) []string { ans := make([]string, 0) cnt := make(map[string]int) for i := 10; i &amp;lt;= len(s); i++ { cnt[s[i-10:i]]++ if cnt[s[i-10:i]] == 2 { ans = append(ans, s[i-10:i]) } } return ans } 复杂度 时间复杂度：$ O(N) , N = len(s) $ 空间复杂度：$ O(N) $ </description>
    </item>
    
    <item>
      <title>Leetcode 31. 下一个排列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-31.-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</link>
      <pubDate>Thu, 07 Oct 2021 16:16:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-31.-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/next-permutation/
难度： 中等
题目描述 实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列（即，组合出下一个更大的整数）。
如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
必须 原地 修改，只允许使用额外常数空间。
示例 1： 输入： nums = [1,2,3]
输出： [1,3,2]
示例 2： 输入： nums = [3,2,1]
输出： [1,2,3]
示例 3： 输入： nums = [1,1,5]
输出： [1,5,1]
示例 4： 输入： nums = [1]
输出： [1]
提示： 1 &amp;lt;= nums.length &amp;lt;= 100 0 &amp;lt;= nums[i] &amp;lt;= 100 解题思路 模拟 寻找下一个排列，其必然比当前排列要大，需要改变部分元素的顺序来获得。则其中一个较小的元素必然被其他更大的元素所替换，且其应该尽量的靠右。
为找到这个元素 i ，从尾部开始遍历，找到其后存在比当前元素大的元素，即找到使得后半部分不满足非严格降序的首个元素，则该元素需要被比他大的元素替换。当找不到时，说明这是最大排列，反转后变为最小排列。
然后找替换元素 j ，其要大于 i ，且尽量小。由于 i 素其后的元素非严格降序排序，可以倒序遍历，找到首个大于 i 的元素即为 j ，将 i 和 j 交换。</description>
    </item>
    
    <item>
      <title>Leetcode 148. 排序链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-148.-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 07 Oct 2021 14:36:29 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-148.-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/sort-list/
难度： 中等
题目描述 给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。
进阶：
你可以在 $O(n\log{n})$ 时间复杂度和常数级空间复杂度下，对链表进行排序吗？
示例 1： 输入： head = [4,2,1,3]
输出： [1,2,3,4]
示例 2： 输入： head = [-1,5,3,4,0]
输出： [-1,0,3,4,5]
示例 3： 输入： head = []
输出： []
提示： 链表的长度范围为 [1, 5 * 104] 1 &amp;lt;= node.val &amp;lt;= 1000 解题思路 归并排序 从 i = 1 开始，每相邻的 2i个链表进行归并排序，直到 2i ≥ len(List) 为止。
对于尾部不足 2i 的部分进行特殊处理，第一个链表长度为 2i-1，剩余部分为第二个链表。当剩余部分为空时，说明此部分已经排好序，进行下一轮归并即可。
func sortList(head *ListNode) *ListNode { head = &amp;amp;ListNode{ Val: 0, Next: head, } length := 0 for node := head.</description>
    </item>
    
    <item>
      <title>Leetcode 143. 重排链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-143.-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 07 Oct 2021 13:23:22 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-143.-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/reorder-list/
难度： 中等
题目描述 给定一个单链表 L 的头节点 head ，单链表 L 表示为：
L0 → L1 → … → Ln-1 → Ln
请将其重新排列后变为：
L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …
不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
示例 1： 输入: head = [1,2,3,4]
输出: [1,4,2,3]
示例 2： 输入: head = [1,2,3,4,5]
输出: [1,5,2,4,3]
提示： 链表的长度范围为 [1, 5 * 104] 1 &amp;lt;= node.val &amp;lt;= 1000 解题思路 顺序表 使用一个数组记录链表中的所有结点，按照顺序选出结点组成新的链表。
func reorderList(head *ListNode) { length := 0 for node := head; node !</description>
    </item>
    
    <item>
      <title>Leetcode 434. 字符串中的单词数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-434.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/</link>
      <pubDate>Thu, 07 Oct 2021 13:05:49 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-434.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-segments-in-a-string/
难度： 简单
题目描述 统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。
请注意，你可以假定字符串里不包括任何不可打印的字符。
示例： 输入: &amp;ldquo;Hello, my name is John&amp;rdquo;
输出: 5
解释: 这里的单词是指连续的不是空格的字符，所以 &amp;ldquo;Hello,&amp;rdquo; 算作 1 个单词。
解题思路 遍历计数 遍历字符串，使用一个 hasWord 布尔值记录是否有单词：
当遇到空格时，可能是单词结尾，若 hasWord = true ，单词数量加一，hasWord 置为 false； 当遇到非空格时，表示有新单词，hasWord 置为 true。 func countSegments(s string) int { ans := 0 hasWord := false for i := range s { if s[i] == &amp;#39; &amp;#39; { if hasWord { ans++ hasWord = false } } else { hasWord = true } } if hasWord { ans++ } return ans } 复杂度 时间复杂度：$ O(N), N = len(s) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 25. K 个一组翻转链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-25.-k-%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 07 Oct 2021 11:51:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-25.-k-%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/reverse-nodes-in-k-group/
难度： 困难
题目描述 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。
k 是一个正整数，它的值小于或等于链表的长度。
如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。
进阶：
你可以设计一个只使用常数额外空间的算法来解决此问题吗？ 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。 示例 1： 输入： head = [1,2,3,4,5], k = 2
输出： [2,1,4,3,5]
示例 2： 输入： head = [1,2,3,4,5], k = 3
输出： [3,2,1,4,5]
示例 3： 输入： head = [1,2,3,4,5], k = 1
输出： [1,2,3,4,5]
示例 4： 输入： head = [1], k = 1
输出： [1]
提示： 列表中节点的数量在范围 sz 内 1 &amp;lt;= sz &amp;lt;= 5000 0 &amp;lt;= Node.</description>
    </item>
    
    <item>
      <title>Leetcode 69. Sqrt(x)</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-69.-sqrtx/</link>
      <pubDate>Wed, 06 Oct 2021 23:00:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-69.-sqrtx/</guid>
      <description>链接： https://leetcode-cn.com/problems/sqrtx/
难度： 简单
题目描述 给你一个非负整数 x ，计算并返回 x 的 算术平方根 。
由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。
注意： 不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。
示例 1： 输入： x = 4
输出： 2
示例 2： 输入： x = 8
输出： 2
解释： 8 的算术平方根是 2.82842&amp;hellip;, 由于返回类型是整数，小数部分将被舍去。
提示： 00 &amp;lt;= x &amp;lt;= 231 - 1 解题思路 枚举 从零开始枚举平方根 i ，直到 i*i &amp;gt; x 为止，返回最大的有效值 i-1。
func mySqrt(x int) int { ans := 0 for ; ans*ans &amp;lt;= x; ans++ { } return ans-1 } 复杂度 时间复杂度：$ O(\sqrt{x}) $ 空间复杂度：$ O(1) $ 位运算 从 215 开始，尝试将其累加到结果中，然后右移一位，直到为 0 为止。</description>
    </item>
    
    <item>
      <title>Leetcode 3. 无重复字符的最长子串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-3.-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Wed, 06 Oct 2021 22:51:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-3.-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/
难度： 中等
题目描述 给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。
示例 1： 输入: &amp;ldquo;abcabcbb&amp;rdquo;
输出: 3
解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。
示例 2： 输入: &amp;ldquo;bbbbb&amp;rdquo;
输出: 1
解释: 因为无重复字符的最长子串是 &amp;ldquo;b&amp;rdquo;，所以其长度为 1。
示例 3： 输入: &amp;ldquo;pwwkew&amp;rdquo;
输出: 3
解释: 因为无重复字符的最长子串是 &amp;ldquo;wke&amp;rdquo;，所以其长度为 3。
请注意，你的答案必须是 子串 的长度，&amp;ldquo;pwke&amp;rdquo; 是一个子序列，不是子串。
示例 4： 输入: s = &amp;quot;&amp;quot;
输出: 0
提示： 0 &amp;lt;= s.length &amp;lt;= 5 * 104 s 由英文字母、数字、符号和空格组成 解题思路 哈希 + 双指针 使用哈希表记录每个字符出现的下标，并记录有效字串开始的下标 start：当出现重复字符时，将 start 修正为重复字符出现的下一个位置。</description>
    </item>
    
    <item>
      <title>Leetcode 414. 第三大的数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-414.-%E7%AC%AC%E4%B8%89%E5%A4%A7%E7%9A%84%E6%95%B0/</link>
      <pubDate>Wed, 06 Oct 2021 14:16:55 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-414.-%E7%AC%AC%E4%B8%89%E5%A4%A7%E7%9A%84%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/third-maximum-number/
难度： 简单
题目描述 给你一个非空数组，返回此数组中 第三大的数 。如果不存在，则返回数组中最大的数。
示例 1： 输入： [3, 2, 1]
输出： 1
解释： 第三大的数是 1 。
示例 2： 输入： [1, 2]
输出： 2
解释： 第三大的数不存在, 所以返回最大的数 2 。
示例 3： 输入： [2, 2, 3, 1]
输出： 1
解释： 注意，要求返回第三大的数，是指在所有不同数字中排第三大的数。
此例中存在两个值为 2 的数，它们都排第二。在所有不同数字中排第三大的数为 1 。
提示： 1 &amp;lt;= nums.length &amp;lt;= 104 -231 &amp;lt;= nums[i] &amp;lt;= 231 - 1 进阶： 你能设计一个时间复杂度 O(n) 的解决方案吗？
解题思路 排序 对数组进行一轮排序，尝试从最大值开始寻找第三大的值，找到则返回；否则返回最大值。
func thirdMax(nums []int) int { sort.</description>
    </item>
    
    <item>
      <title>剑指 Offer 41. 数据流中的中位数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-41.-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Tue, 05 Oct 2021 20:42:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-41.-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/
难度： 困难
题目描述 如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。
例如，
[2,3,4] 的中位数是 3
[2,3] 的中位数是 (2 + 3) / 2 = 2.5
设计一个支持以下两种操作的数据结构：
void addNum(int num) - 从数据流中添加一个整数到数据结构中。 double findMedian() - 返回目前所有元素的中位数。 示例 1： 输入：
[&amp;ldquo;MedianFinder&amp;rdquo;,&amp;ldquo;addNum&amp;rdquo;,&amp;ldquo;addNum&amp;rdquo;,&amp;ldquo;findMedian&amp;rdquo;,&amp;ldquo;addNum&amp;rdquo;,&amp;ldquo;findMedian&amp;rdquo;]
[[],[1],[2],[],[3],[]]
输出： [null,null,null,1.50000,null,2.00000]
示例 2： 输入：
[&amp;ldquo;MedianFinder&amp;rdquo;,&amp;ldquo;addNum&amp;rdquo;,&amp;ldquo;findMedian&amp;rdquo;,&amp;ldquo;addNum&amp;rdquo;,&amp;ldquo;findMedian&amp;rdquo;]
[[],[2],[],[3],[]]
输出： [null,null,2.00000,null,2.50000]
限制： 最多会对 addNum、findMedian 进行 50000 次调用。 解题思路 双堆 分别使用大顶堆和小顶堆记录排序后的前半部分元素和后半部分元素，若元素数量不为偶数时，多余的一个元素记录到小顶堆中。
则对于 findMedian 操作，当元素数量为奇数时，即两个堆元素数量不同时，返回小顶堆堆顶元素；为偶数时，即两个堆元素数量相同时，返回两个堆堆顶元素的平均值。
对于 addNum 操作，需要修正两个堆的元素数量，保证小顶堆的元素数量不小于大顶堆，且差 ≤ 1：
当两个堆的元素数量相同时，将该元素加入大顶堆中，并将大顶堆堆顶元素移动到小顶堆中； 当两个堆的元素数量不同时，将该元素加入小顶堆中，并将小顶堆堆顶元素移动到大顶堆中。 type Heap struct { sort.IntSlice reverse bool } func (this *Heap) Less(i, j int) bool { if this.</description>
    </item>
    
    <item>
      <title>剑指 Offer 43. 1～n 整数中 1 出现的次数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-43.-1n-%E6%95%B4%E6%95%B0%E4%B8%AD-1-%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Tue, 05 Oct 2021 20:16:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-43.-1n-%E6%95%B4%E6%95%B0%E4%B8%AD-1-%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/
难度： 困难
题目描述 输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。
例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。
示例 1： 输入： n = 12
输出： 5
示例 2： 输入： n = 13
输出： 6
限制： 1 &amp;lt;= n &amp;lt; 231 解题思路 逐位计数 按照个、十、百&amp;hellip;的顺序逐位统计。
不妨设当前位的基数为 i，则对于前缀 0 ~ n/i-1，其必然可以取到 1，其后缀为 0 ~ i-1，故累加 n/i * i 次。
对于前缀为 n/i 的部分，需要判别当前位：
若当前位 &amp;gt; 1，则还可以取得后缀 0 ~ i-1，累加 i 次； 若当前位 = 1，则后缀可以取得 0 ~ n%i，累加 n%i + 1 次； 若当前位为 0，则无法取到。 func countDigitOne(n int) int { ans := 0 for i, x := 1, n; x &amp;gt; 0; x, i = x/10, i*10 { ans += x / 10 * i switch x % 10 { case 0: case 1: ans += n%i + 1 default: ans += i } } return ans } 复杂度 时间复杂度：$ O(\log{n}) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 59 - I. 滑动窗口的最大值</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-59-i.-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Tue, 05 Oct 2021 18:12:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-59-i.-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/
难度： 困难
题目描述 给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。
示例： 输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7]
解释:
滑动窗口的位置 最大值
[1 3 -1] -3 5 3 6 7 3
1 [3 -1 -3] 5 3 6 7 3
1 3 [-1 -3 5] 3 6 7 5
1 3 -1 [-3 5 3] 6 7 5
1 3 -1 -3 [5 3 6] 7 6
1 3 -1 -3 5 [3 6 7] 7</description>
    </item>
    
    <item>
      <title>Leetcode 284. 顶端迭代器</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-284.-%E9%A1%B6%E7%AB%AF%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Tue, 05 Oct 2021 13:38:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-284.-%E9%A1%B6%E7%AB%AF%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/peeking-iterator/
难度： 中等
题目描述 请你设计一个迭代器，除了支持 hasNext 和 next 操作外，还支持 peek 操作。
实现 PeekingIterator 类：
PeekingIterator(int[] nums) 使用指定整数数组 nums 初始化迭代器。 int next() 返回数组中的下一个元素，并将指针移动到下个元素处。 bool hasNext() 如果数组中存在下一个元素，返回 true ；否则，返回 false 。 int peek() 返回数组中的下一个元素，但 不 移动指针。 示例： 输入：
[&amp;ldquo;PeekingIterator&amp;rdquo;, &amp;ldquo;next&amp;rdquo;, &amp;ldquo;peek&amp;rdquo;, &amp;ldquo;next&amp;rdquo;, &amp;ldquo;next&amp;rdquo;, &amp;ldquo;hasNext&amp;rdquo;]
[[[1, 2, 3]], [], [], [], [], []]
输出：
[null, 1, 2, 2, 3, false]
解释：
PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]
peekingIterator.next(); // 返回 1 ，指针移动到下一个元素 [1,2,3]</description>
    </item>
    
    <item>
      <title>Leetcode 482. 密钥格式化</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-482.-%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F%E5%8C%96/</link>
      <pubDate>Mon, 04 Oct 2021 11:44:14 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-482.-%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid>
      <description>链接： https://leetcode-cn.com/problems/license-key-formatting/
难度： 简单
题目描述 有一个密钥字符串 S ，只包含字母，数字以及 &amp;lsquo;-&amp;rsquo;（破折号）。其中， N 个 &amp;lsquo;-&amp;rsquo; 将字符串分成了 N+1 组。
给你一个数字 K，请你重新格式化字符串，使每个分组恰好包含 K 个字符。特别地，第一个分组包含的字符个数必须小于等于 K，但至少要包含 1 个字符。两个分组之间需要用 &amp;lsquo;-&amp;rsquo;（破折号）隔开，并且将所有的小写字母转换为大写字母。
给定非空字符串 S 和数字 K，按照上面描述的规则进行格式化。
示例 1： 输入： S = &amp;ldquo;5F3Z-2e-9-w&amp;rdquo;, K = 4
输出： &amp;ldquo;5F3Z-2E9W&amp;rdquo;
解释： 字符串 S 被分成了两个部分，每部分 4 个字符；
注意，两个额外的破折号需要删掉。
示例 2： 输入： S = &amp;ldquo;2-5g-3-J&amp;rdquo;, K = 2
输出： &amp;ldquo;2-5G-3J&amp;rdquo;
解释： 字符串 S 被分成了 3 个部分，按照前面的规则描述，第一部分的字符可以少于给定的数量，其余部分皆为 2 个字符。
提示： S 的长度可能很长，请按需分配大小。K 为正整数。 S 只包含字母数字（a-z，A-Z，0-9）以及破折号&amp;rsquo;-&amp;rsquo; S 非空 解题思路 计数 遍历一遍列表，统计所有字母的数量，若首个分组不足 k 个，需要额外处理，之后按 k 个一组进行分组。</description>
    </item>
    
    <item>
      <title>Leetcode 166. 分数到小数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-166.-%E5%88%86%E6%95%B0%E5%88%B0%E5%B0%8F%E6%95%B0/</link>
      <pubDate>Sun, 03 Oct 2021 20:06:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-166.-%E5%88%86%E6%95%B0%E5%88%B0%E5%B0%8F%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/fraction-to-recurring-decimal/
难度： 中等
题目描述 给定两个整数，分别表示分数的分子 numerator 和分母 denominator，以 字符串形式返回小数 。
如果小数部分为循环小数，则将循环的部分括在括号内。
如果存在多个答案，只需返回 任意一个 。
对于所有给定的输入，保证 答案字符串的长度小于 104 。
示例 1： 输入： numerator = 1, denominator = 2
输出： &amp;ldquo;0.5&amp;rdquo;
示例 2： 输入： numerator = 2, denominator = 1
输出： &amp;ldquo;2&amp;rdquo;
示例 3： 输入： numerator = 2, denominator = 3
输出： &amp;ldquo;0.(6)&amp;rdquo;
示例 4： 输入： numerator = 4, denominator = 333
输出： &amp;ldquo;0.(012)&amp;rdquo;
示例 5： 输入： numerator = 1, denominator = 5</description>
    </item>
    
    <item>
      <title>剑指 Offer II 001. 整数除法</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-001.-%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/</link>
      <pubDate>Sat, 02 Oct 2021 18:12:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-ii-001.-%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/</guid>
      <description>链接： https://leetcode-cn.com/problems/xoh6Oh/
难度： 简单
题目描述 给定两个整数 a 和 b ，求它们的除法的商 a/b ，要求不得使用乘号 &#39;*&#39;、除号 &#39;/&#39; 以及求余符号 &#39;%&#39; 。
注意： 整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231−1]。本题中，如果除法结果溢出，则返回 231 − 1 示例 1： 输入： a = 15, b = 2
输出： 7
解释： 15/2 = truncate(7.5) = 7
示例 2： 输入： a = 7, b = -3
输出： -2
解释： 7/-3 = truncate(-2.33333..) = -2
示例 3： 输入： a = 0, b = 1</description>
    </item>
    
    <item>
      <title>剑指 Offer 68 - II. 二叉树的最近公共祖先</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-68-ii.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <pubDate>Sat, 02 Oct 2021 17:21:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-68-ii.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/
难度： 简单
题目描述 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
例如，给定如下二叉搜索树: root = [3,5,1,6,2,0,8,null,null,7,4]
示例 1： 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。
示例 2： 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出: 5
解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。
说明： 所有节点的值都是唯一的。 p、q 为不同节点且均存在于给定的二叉树中。 解题思路 深度优先搜索 + 记录路径 利用深度优先搜索找出从根结点开始分别到 p 和 q 的路径，然后找出两条路径中最后一个相同的结点并返回。</description>
    </item>
    
    <item>
      <title>Leetcode 405. 数字转换为十六进制数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-405.-%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0/</link>
      <pubDate>Sat, 02 Oct 2021 16:16:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-405.-%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/
难度： 简单
题目描述 给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 补码运算 方法。
注意: 十六进制中所有字母(a-f)都必须是小写。 十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符&#39;0&amp;rsquo;来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。 给定的数确保在32位有符号整数范围内。 不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。 示例 1： 输入: 26
输出: &amp;ldquo;1a&amp;rdquo;
示例 2： 输入: -1
输出: &amp;ldquo;ffffffff&amp;rdquo;
解题思路 数学 将负数补码转换为正数，使用数学方法，除16取余，逆序排列。对0进行特判。
func toHex(num int) string { if num == 0 { return &amp;#34;0&amp;#34; } digit := []byte(&amp;#34;0123456789abcdef&amp;#34;) ans := make([]byte, 0, 8) t := uint32(num) for ; t != 0; t /= 16 { ans = append(ans, digit[t%16]) } for i := len(ans)/2 - 1; i &amp;gt;= 0; i-- { ans[i], ans[len(ans)-1-i] = ans[len(ans)-1-i], ans[i] } return string(ans) } 复杂度 时间复杂度：O(\log{num}) 空间复杂度：O(\log{num}) 位运算 四个2进制位构成16进制，每次将末尾四个2进制位转换为16进制，并向右移动4位，直到 num 为0 或 转换次数到达上限。对0进行特判。</description>
    </item>
    
    <item>
      <title>剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-68-i.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <pubDate>Sat, 02 Oct 2021 15:05:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-68-i.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/
难度： 简单
题目描述 给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]
示例 1： 输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
输出: 6
解释: 节点 2 和节点 8 的最近公共祖先是 6。
示例 2： 输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
输出: 2
解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。
说明： 所有节点的值都是唯一的。 p、q 为不同节点且均存在于给定的二叉搜索树中。 解题思路 搜索 利用二叉树搜索数的性质：</description>
    </item>
    
    <item>
      <title>剑指 Offer 67. 把字符串转换成整数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-67.-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/</link>
      <pubDate>Sat, 02 Oct 2021 13:19:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-67.-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/
难度： 中等
题目描述 写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。
首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
在任何情况下，若函数不能进行有效的转换时，请返回 0。
说明： 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231, 231 − 1]。如果数值超过这个范围，请返回 INT_MAX (231 − 1) 或 INT_MIN (−231) 。
示例 1： 输入: &amp;ldquo;42&amp;rdquo;
输出: 42
示例 2： 输入: &amp;quot; -42&amp;quot;
输出: -42
解释: 第一个非空白字符为 &amp;lsquo;-&amp;rsquo;, 它是一个负号。
我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3： 输入: &amp;ldquo;4193 with words&amp;rdquo;
输出: 4193
解释: 转换截止于数字 &amp;lsquo;3&amp;rsquo; ，因为它的下一个字符不为数字。
示例 4： 输入: &amp;ldquo;words and 987&amp;rdquo;
输出: 0</description>
    </item>
    
    <item>
      <title>剑指 Offer 66. 构建乘积数组</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-66.-%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 01 Oct 2021 22:53:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-66.-%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/
难度： 中等
题目描述 给定一个数组 A[0,1,…,n-1]，请构建一个数组 B[0,1,…,n-1]，其中 B[i] 的值是数组 A 中除了下标 i 以外的元素的积, 即 B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]。不能使用除法。
示例： 输入: [1,2,3,4,5]
输出: [120,60,40,30,24]
限制： 所有元素乘积之和不会溢出 32 位整数 a.length &amp;lt;= 100000 解题思路 前后缀积 计算前缀积 prefixProduct 和后缀积 suffixProduct，然后求得 B[i] = prefixProduct[i-1] * suffixProduct[i+1]。
func constructArr(a []int) []int { if len(a) == 0 { return make([]int, 0) } ans := make([]int, len(a)) ans[0] = 1 for i, prefixProduct := 1, 1; i &amp;lt; len(a); i++ { prefixProduct *= a[i-1] ans[i] = prefixProduct } for i, suffixProduct := len(a)-2, 1; i &amp;gt;= 0; i-- { suffixProduct *= a[i+1] ans[i] *= suffixProduct } return ans } 复杂度 时间复杂度：$ O(N), N = len(a) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 65. 不用加减乘除做加法</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-65.-%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/</link>
      <pubDate>Fri, 01 Oct 2021 22:35:56 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-65.-%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/</guid>
      <description>链接： https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/
难度： 简单
题目描述 写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。
示例： 输入: a = 1, b = 1
输出: 2
限制： a, b 均可能是负数或 0 结果不会溢出 32 位整数 解题思路 位运算 以二进制位为单位进行运算，从最低位开始，使用位操作符诸位运算。
由于负数在计算机中存储的是补码，直接诸位求和即可，用 c 表示进位，利用 数字电路设计 得到计算方法如下：
当前位计算结果为：$a\oplus b\oplus c$ 进位的计算结果为：$(a\oplus b)c + ab$ func add(a int, b int) int { ans := 0 c := 0 for bit := 1; bit != 0; bit &amp;lt;&amp;lt;= 1 { ans |= (a ^ b ^ c) &amp;amp; bit c = (((a ^ b) &amp;amp; c) | (a &amp;amp; b)) &amp;amp; bit &amp;lt;&amp;lt; 1 } return ans } 复杂度 时间复杂度：$ O(\log{MaxInt32}) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 64. 求1&#43;2&#43;…&#43;n</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-64.-%E6%B1%821-2-n/</link>
      <pubDate>Fri, 01 Oct 2021 20:44:05 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-64.-%E6%B1%821-2-n/</guid>
      <description>链接： https://leetcode-cn.com/problems/qiu-12n-lcof/
难度： 中等
题目描述 求 1+2+...+n ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。
示例 1： 输入: n = 3
输出: 6
示例 2： 输入: n = 9
输出: 45
限制： 1 &amp;lt;= n &amp;lt;= 10000 解题思路 递归 利用布尔表达式的短路返回，实现递归到终止条件。
func sumNums(n int) int { ans := 0 var sum func(n int) bool sum = func(n int) bool { ans += n return n &amp;gt; 0 &amp;amp;&amp;amp; sum(n-1) } sum(n) return ans } 复杂度 时间复杂度：$ O(n) $ 空间复杂度：$ O(n) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 63. 股票的最大利润</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-63.-%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/</link>
      <pubDate>Fri, 01 Oct 2021 20:29:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-63.-%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/
难度： 中等
题目描述 假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？
示例 1： 输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2： 输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
限制： 0 &amp;lt;= 数组长度 &amp;lt;= 105 解题思路 暴力求解 枚举买卖点，记录最大值。
func maxProfit(prices []int) int { ans := 0 for i := range prices { for j := i + 1; j &amp;lt; len(prices); j++ { if ans &amp;lt; prices[j]-prices[i] { ans = prices[j] - prices[i] } } } return ans } 复杂度 时间复杂度：$ O(N^2), N = len(prices) $ 空间复杂度：$ O(1) $ 遍历 使用 min 记录到目前为止股票的最小值，每次使用当前股票价格减去 min ，更新最大利润。</description>
    </item>
    
    <item>
      <title>剑指 Offer 62. 圆圈中最后剩下的数字</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-62.-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 01 Oct 2021 14:38:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-62.-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/
难度： 简单
题目描述 0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。
例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。
示例 1： 输入: n = 5, m = 3
输出: 3
示例 2： 输入: n = 10, m = 17
输出: 2
限制： 1 &amp;lt;= n &amp;lt;= 105 1 &amp;lt;= m &amp;lt;= 106 解题思路 递归 令 f(n, m) 表示从 n 个数字中不断删除第 m 个数字后剩余的数字， 则需要删除的数字为 (m-1) % n，然后变成了从 n-1 个数字中删除第 m 个数字。
f(n-1, m) 可以得到从第 n-1 个数字中不断删除第 m 个数字后剩余的数字，该表达式是按照从第一个数字开始计数；然而在删除一个数字后，需要从 m % n 开始计数，故需要找到两者间的映射关系，即 f(n, m) = F(f(n-1, m))。</description>
    </item>
    
    <item>
      <title>剑指 Offer 61. 扑克牌中的顺子</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-61.-%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/</link>
      <pubDate>Fri, 01 Oct 2021 14:17:17 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-61.-%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/</guid>
      <description>链接： https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/
难度： 简单
题目描述 从若干副扑克牌中随机抽 5 张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。
示例 1： 输入: [1,2,3,4,5]
输出: True
示例 2： 输入: [0,0,1,2,5]
输出: True
限制： 数组长度为 5 数组的数取值为 [0, 13] . 解题思路 排序 排序，统计大小王的数量，判断其余相邻牌的差值：
当差值为 0 时，不构成顺子，返回 false； 当差值不为 0 时，使用大小王去补。 最后，当大小王数量不为负时，返回 true，否则返回 false 。 func isStraight(nums []int) bool { sort.Ints(nums) cnt := 0 for i := 0; i &amp;lt; len(nums); i++ { if nums[i] == 0 { cnt++ continue } if i-1 &amp;gt;= 0 &amp;amp;&amp;amp; nums[i-1] !</description>
    </item>
    
    <item>
      <title>剑指 Offer 59 - II. 队列的最大值</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-59-ii.-%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Fri, 01 Oct 2021 13:26:38 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-59-ii.-%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/
难度： 中等
题目描述 请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是$O(1)$。
若队列为空，pop_front 和 max_value 需要返回 -1 。
示例 1： 输入:
[&amp;ldquo;MaxQueue&amp;rdquo;,&amp;ldquo;push_back&amp;rdquo;,&amp;ldquo;push_back&amp;rdquo;,&amp;ldquo;max_value&amp;rdquo;,&amp;ldquo;pop_front&amp;rdquo;,&amp;ldquo;max_value&amp;rdquo;]
[[],[1],[2],[],[],[]]
输出: [null,null,null,2,1,2]
示例 2： 输入:
[&amp;ldquo;MaxQueue&amp;rdquo;,&amp;ldquo;pop_front&amp;rdquo;,&amp;ldquo;max_value&amp;rdquo;]
[[],[],[]]
输出: [null,-1,-1]
限制： 1 &amp;lt;= push_back,pop_front,max_value的总操作数 &amp;lt;= 10000 1 &amp;lt;= value &amp;lt;= 105 解题思路 双队列 除正常存储数据的队列外，需要额外使用一个队列维护最大值信息。
可以发现，当某一个值入队后，之前入队的所有小于该值的元素对于 max_value 均无影响；仅当该值出队后，由此值后面的次大元素接任。
所以这个额外队列的队列头记录当前队列的最大值，后续按值非严格递减的顺序记录其他值。
当入队时，需要从尾部开始将小于当前值的元素全部删除，然后该值入队； 当出队时，若队首元素是最大值，则两个队列都要出队。 type MaxQueue struct { queue *list.List maxQueue *list.List } func Constructor() MaxQueue { return MaxQueue{ queue: list.New(), maxQueue: list.New(), } } func (this *MaxQueue) Max_value() int { if this.</description>
    </item>
    
    <item>
      <title>Leetcode 1436. 旅行终点站</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1436.-%E6%97%85%E8%A1%8C%E7%BB%88%E7%82%B9%E7%AB%99/</link>
      <pubDate>Fri, 01 Oct 2021 13:11:21 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1436.-%E6%97%85%E8%A1%8C%E7%BB%88%E7%82%B9%E7%AB%99/</guid>
      <description>链接： https://leetcode-cn.com/problems/destination-city/
难度： 中等
题目描述 给你一份旅游线路图，该线路图中的旅行线路用数组 paths 表示，其中 paths[i] = [cityAi, cityBi] 表示该线路将会从 cityAi 直接前往 cityBi 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市。
题目数据保证线路图会形成一条不存在循环的线路，因此恰有一个旅行终点站。
示例 1： 输入： paths = [[&amp;ldquo;London&amp;rdquo;,&amp;ldquo;New York&amp;rdquo;],[&amp;ldquo;New York&amp;rdquo;,&amp;ldquo;Lima&amp;rdquo;],[&amp;ldquo;Lima&amp;rdquo;,&amp;ldquo;Sao Paulo&amp;rdquo;]]
输出： &amp;ldquo;Sao Paulo&amp;rdquo;
解释： 从 &amp;ldquo;London&amp;rdquo; 出发，最后抵达终点站 &amp;ldquo;Sao Paulo&amp;rdquo; 。本次旅行的路线是 &amp;ldquo;London&amp;rdquo; -&amp;gt; &amp;ldquo;New York&amp;rdquo; -&amp;gt; &amp;ldquo;Lima&amp;rdquo; -&amp;gt; &amp;ldquo;Sao Paulo&amp;rdquo; 。
示例 2: 输入： paths = [[&amp;ldquo;B&amp;rdquo;,&amp;ldquo;C&amp;rdquo;],[&amp;ldquo;D&amp;rdquo;,&amp;ldquo;B&amp;rdquo;],[&amp;ldquo;C&amp;rdquo;,&amp;ldquo;A&amp;rdquo;]]
输出： &amp;ldquo;A&amp;rdquo;
解释： 所有可能的线路是：
&amp;ldquo;D&amp;rdquo; -&amp;gt; &amp;ldquo;B&amp;rdquo; -&amp;gt; &amp;ldquo;C&amp;rdquo; -&amp;gt; &amp;ldquo;A&amp;rdquo;.
&amp;ldquo;B&amp;rdquo; -&amp;gt; &amp;ldquo;C&amp;rdquo; -&amp;gt; &amp;ldquo;A&amp;rdquo;.
&amp;ldquo;C&amp;rdquo; -&amp;gt; &amp;ldquo;A&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>剑指 Offer 58 - II. 左旋转字符串</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-58-ii.-%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Thu, 30 Sep 2021 20:41:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-58-ii.-%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/
难度： 简单
题目描述 字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串&amp;quot;abcdefg&amp;quot;和数字2，该函数将返回左旋转两位得到的结果&amp;quot;cdefgab&amp;quot;。
示例 1： 输入: s = &amp;ldquo;abcdefg&amp;rdquo;, k = 2
输出: &amp;ldquo;cdefgab&amp;rdquo;
示例 2： 输入: s = &amp;ldquo;lrloseumgh&amp;rdquo;, k = 6
输出: &amp;ldquo;umghlrlose&amp;rdquo;
限制： 1 &amp;lt;= k &amp;lt; s.length &amp;lt;= 10000 解题思路 暴力求解 每次循环移动一个字符，重复 n 次。
func reverseLeftWords(s string, n int) string { chars := []byte(s) for i := 0; i &amp;lt; n; i++ { char := s[0] for j := 0; j &amp;lt; len(s); j++ { chars[j] = chars[j+1] } chars[len(s)-1] = char } return string(chars) } 复杂度 时间复杂度：$ O(Ln), L = len(s) $ 空间复杂度：$ O(1) $ 切片 移动后的结果为：前 n 个字符移动到字符串的尾部，使用切片即可。</description>
    </item>
    
    <item>
      <title>剑指 Offer 58 - I. 翻转单词顺序</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-58-i.-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Thu, 30 Sep 2021 20:21:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-58-i.-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/
难度： 简单
题目描述 输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串&amp;quot;I am a student. &amp;quot;，则输出&amp;quot;student. a am I&amp;quot;。
示例 1： 输入: &amp;ldquo;the sky is blue&amp;rdquo;
输出: &amp;ldquo;blue is sky the&amp;rdquo;
示例 2： 输入: &amp;quot; hello world! &amp;quot;
输出: &amp;ldquo;world! hello&amp;rdquo;
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3： 输入: &amp;ldquo;a good example&amp;rdquo;
输出: &amp;ldquo;example good a&amp;rdquo;
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
说明： 无空格字符构成一个单词。 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。 解题思路 模拟 将整个句子识别拆分为单词数组，将整个单词数组反转，然后使用 &#39; &#39; 作为连接符将整个单词数组连接起来。
func reverseWords(s string) string { ss := make([]string, 0, 10) start := 0 for i := range s { if s[i] == &amp;#39; &amp;#39; { if start == i { start++ continue } ss = append(ss, s[start:i]) start = i+1 } } for i := 0; i &amp;lt; len(ss)/2; i++ { ss[i], ss[len(ss)-1-i] = ss[len(ss)-1-i], ss[i] } return strings.</description>
    </item>
    
    <item>
      <title>剑指 Offer 57 - II. 和为s的连续正数序列</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-57-ii.-%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</link>
      <pubDate>Thu, 30 Sep 2021 20:04:58 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-57-ii.-%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/
难度： 简单
题目描述 输入一个递增排序的数组和一个数字 s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。
示例 1： 输入： target = 9
输出： [[2,3,4],[4,5]]
示例 2： 输入： target = 15
输出： [[1,2,3,4,5],[4,5,6],[7,8]]
限制： 1 &amp;lt;= target &amp;lt;= 105 解题思路 双指针 使用两个指针 i 和 j 代表连续正整数区间的两个端点，另使用变量 sum 记录该段区间的和。
当 sum 小于 target 时，j 移动； 当 sum 大于 target 时，i 移动； 当 sum 等于 target 时，将区间加入到结果队列中，i 移动。 遍历到 j 大于 target 时结束，返回
func findContinuousSequence(target int) [][]int { ans := make([][]int, 0, 1) sum := 1 for i, j := 1, 1; j &amp;lt; target; { if sum &amp;lt; target { j++ sum += j } else if sum &amp;gt; target { sum -= i i++ } else { t := make([]int, 0, j-i+1) for k := i; k &amp;lt;= j; k++ { t = append(t, k) } ans = append(ans, t) sum -= i i++ } } return ans } 复杂度 时间复杂度：$ O(target) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 543. 二叉树的直径</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-543.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</link>
      <pubDate>Thu, 30 Sep 2021 12:00:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-543.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/diameter-of-binary-tree/
难度： 简单
题目描述 给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。
示例： 给定二叉树
1 / \ 2 3 / \ 4 5 返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。
注意： 两结点之间的路径长度是以它们之间边的数目表示。 解题思路 后序遍历 某个子树的最大直径或者为左右子树的最大直径，或者为跨越当前根结点的左右子树的高度和。
递归的遍历每棵子树，返回找到的最大直径。
func diameterOfBinaryTree(root *TreeNode) int { var dfs func(node *TreeNode) (int, int) dfs = func(node *TreeNode) (int, int) { if node == nil { return 0, 0 } lDepth, lMax := dfs(node.Left) rDepth, rMax := dfs(node.Right) depth := lDepth if depth &amp;lt; rDepth { depth = rDepth } max := lDepth + rDepth if max &amp;lt; lMax { max = lMax } if max &amp;lt; rMax { max = rMax } return depth+1, max } _, max := dfs(root) return max } 复杂度 时间复杂度：$ O(N), N = size(Tree) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>Leetcode 199. 二叉树的右视图</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-199.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Thu, 30 Sep 2021 11:24:18 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-199.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</guid>
      <description>链接： https://leetcode-cn.com/problems/binary-tree-right-side-view/
难度： 中等
题目描述 给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。
示例 1： 输入: [1,2,3,null,5,null,4]
输出: [1,3,4]
示例 2： 输入: [1,null,3]
输出: [1,3]
示例 3： 输入: []
输出: []
提示： 二叉树的节点个数的范围是 [0,100] -100 &amp;lt;= Node.val &amp;lt;= 100 解题思路 先序遍历 先序遍历二叉树，同时传递深度信息，对于每个遍历到的结点，修改对应深度的结点为当前结点。
func rightSideView(root *TreeNode) []int { ans := make([]int, 0, 10) var dfs func(node *TreeNode, depth int) dfs = func(node *TreeNode, depth int) { if node == nil { return } if depth == len(ans) { ans = append(ans, node.</description>
    </item>
    
    <item>
      <title>Leetcode 19. 删除链表的倒数第 N 个结点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-19.-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E7%BB%93%E7%82%B9/</link>
      <pubDate>Thu, 30 Sep 2021 10:58:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-19.-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E7%BB%93%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/
难度： 中等
题目描述 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。
进阶： 你能尝试使用一趟扫描实现吗？
示例 1： 输入： head = [1,2,3,4,5], n = 2
输出： [1,2,3,5]
示例 2： 输入： head = [1], n = 1
输出： []
示例 3： 输入： head = [1,2], n = 1
输出： [1]
提示： 链表中结点的数目为 sz 1 &amp;lt;= sz &amp;lt;= 30 0 &amp;lt;= Node.val &amp;lt;= 100 1 &amp;lt;= n &amp;lt;= sz 解题思路 计算链表长度 遍历一遍列表，得到链表长度，从而求得距离链表头的偏移量，再次遍历将其删除即可。
当删除的是第一个结点是需要特判，返回 head.Next。
func removeNthFromEnd(head *ListNode, n int) *ListNode { length := 0 for node := head; node !</description>
    </item>
    
    <item>
      <title>Leetcode 46. 全排列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-46.-%E5%85%A8%E6%8E%92%E5%88%97/</link>
      <pubDate>Thu, 30 Sep 2021 10:40:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-46.-%E5%85%A8%E6%8E%92%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/permutations/
难度： 中等
题目描述 给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。
示例 1： 输入： nums = [1,2,3]
输出： [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
示例 2： 输入： nums = [0,1]
输出： [[0,1],[1,0]]
示例 3： 输入： nums = [1]
输出： [[1]]
提示： 1 &amp;lt;= nums.length &amp;lt;= 6 -10 &amp;lt;= nums[i] &amp;lt;= 10 nums 中的所有整数 互不相同 解题思路 回溯 每次从可选数字中选出一个数，加入到栈中，直到栈中元素数量与原数组相同，则其为其中一个的全排列，加入到结果中，回溯，重复上述步骤，直到搜索到所有情况。
func permute(nums []int) [][]int { cnt := 1 for i := 2; i &amp;lt;= len(nums); i++ { cnt *= i } ans := make([][]int, 0, cnt) choice := make(map[int]struct{}) var backtracking func(stack []int) backtracking = func(stack []int) { if len(stack) == len(nums) { t := make([]int, len(stack)) copy(t, stack) ans = append(ans, t) return } for _, num := range nums { if _, ok := choice[num]; ok { continue } choice[num] = struct{}{} stack = append(stack, num) backtracking(stack) stack = stack[:len(stack)-1] delete(choice, num) } } backtracking(make([]int, 0, len(nums))) return ans } 复杂度 时间复杂度：$ O(N*N!</description>
    </item>
    
    <item>
      <title>Leetcode 223. 矩形面积</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-223.-%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF/</link>
      <pubDate>Thu, 30 Sep 2021 10:21:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-223.-%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF/</guid>
      <description>链接： https://leetcode-cn.com/problems/rectangle-area/
难度： 中等
题目描述 给你 二维 平面上两个 由直线构成的 矩形，请你计算并返回两个矩形覆盖的总面积。
每个矩形由其 左下 顶点和 右上 顶点坐标表示：
第一个矩形由其左下顶点 (ax1, ay1) 和右上顶点 (ax2, ay2) 定义。 第二个矩形由其左下顶点 (bx1, by1) 和右上顶点 (bx2, by2) 定义。 示例 1： 输入： ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2
输出： 45
示例 2： 输入： ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2</description>
    </item>
    
    <item>
      <title>剑指 Offer 56 - II. 数组中数字出现的次数 II</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-56-ii.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0-ii/</link>
      <pubDate>Wed, 29 Sep 2021 20:54:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-56-ii.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/
难度： 中等
题目描述 在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。
示例 1： 输入： nums = [3,4,3,3]
输出： 4
示例 2： 输入： nums = [9,1,7,9,7,9,7]
输出： 1
限制： 1 &amp;lt;= nums.length &amp;lt;= 10000 1 &amp;lt;= nums[i] &amp;lt; 231 解题思路 哈希 使用哈希表记录每个数字出现的次数，找到出现次数为 1 的返回即可。
func singleNumber(nums []int) int { cnt := make(map[int]int) for _, num := range nums { cnt[num]++ } for num, v := range cnt { if v == 1 { return num } } return 0 } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ 排序 将整个数组排序，没三个一组进行首尾比较，相同继续，不同返回。</description>
    </item>
    
    <item>
      <title>剑指 Offer 56 - I. 数组中数字出现的次数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-56-i.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Wed, 29 Sep 2021 19:35:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-56-i.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/
难度： 中等
题目描述 一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是$O(n)$，空间复杂度是$O(1)$。
示例 1： 输入： nums = [4,1,4,6]
输出： [1,6] 或 [6,1]
示例 2： 输入： nums = [1,2,10,4,1,4,3,3]
输出： [2,10] 或 [10,2]
限制： 2 &amp;lt;= nums.length &amp;lt;= 10000 解题思路 异或 + 拆分 将整个数组进行异或操作，得到最后的两个数字的异或值。从其中找出为 1 的位，按照此位将数组中的数字分为两组，则同一对数字必然在同一组，不同的两个数在不同组，对两组分别求异或即可得出结果。
func singleNumbers(nums []int) []int { xor := 0 for _, num := range nums { xor ^= num } bit := 1 for ; xor&amp;amp;bit == 0; bit &amp;lt;&amp;lt;= 1 { } ans0 := 0 ans1 := 0 for _, num := range nums { if num&amp;amp;bit == 0 { ans0 ^= num } else { ans1 ^= num } } return []int{ans0, ans1} } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 437. 路径总和 III</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-437.-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-iii/</link>
      <pubDate>Tue, 28 Sep 2021 14:08:48 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-437.-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-iii/</guid>
      <description>链接： https://leetcode-cn.com/problems/path-sum-iii/
难度： 中等
题目描述 给定一个二叉树的根节点 root ，和一个整数 targetSum ，求该二叉树里节点值之和等于 targetSum 的 路径 的数目。
路径 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。
示例 1： 输入： root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
输出： 3
解释： 和等于 8 的路径有 3 条，如图所示。
示例 2： 输入： root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
输出： 3
提示： 二叉树的节点个数的范围是 [0,1000] -109 &amp;lt;= Node.val &amp;lt;= 109 -1000 &amp;lt;= targetSum &amp;lt;= 1000 解题思路 深度优先搜索 + 前缀和 采用深度优先搜索，并将从根到当前结点的路径和保存到哈希表中，记录该和出现的数量。
每当到达一个新结点时，查找到该结点的前缀和减去 target 是否存在于路径中，存在将其次数累加进结果中，然后递归的处理子结点，也将查询结果累加进结果中。
为保证从根结点开始的路径满足条件，初始哈希表中设置前缀和为 0 的次数为 1。
func pathSum(root *TreeNode, targetSum int) int { cnt := make(map[int]int) cnt[0] = 1 var dfs func(node *TreeNode, sum int) int dfs = func(node *TreeNode, sum int) int { if node == nil { return 0 } sum += node.</description>
    </item>
    
    <item>
      <title>剑指 Offer 55 - II. 平衡二叉树</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-55-ii.-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 28 Sep 2021 13:21:08 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-55-ii.-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/
难度： 简单
题目描述 输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。
示例 1： 给定二叉树 [3,9,20,null,null,15,7]
3 / \ 9 20 / \ 15 7 返回 true 。
示例 2： 给定二叉树 [1,2,2,3,3,null,null,4,4]
1 / \ 2 2 / \ 3 3 / \ 4 4 返回 false 。
限制： 0 &amp;lt;= 树的结点个数 &amp;lt;= 10000 解题思路 深度优先搜索 递归的遍历每个结点的左右子树，当左右子树均为平衡树且左右子树的最大深度差值 ≤ 1 时，返回 true。
func isBalanced(root *TreeNode) bool { var dfs func(root *TreeNode) (int, bool) dfs = func(root *TreeNode) (int, bool) { if root == nil { return 0, true } leftDepth, leftBalance := dfs(root.</description>
    </item>
    
    <item>
      <title>剑指 Offer 55 - I. 二叉树的深度</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-55-i.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</link>
      <pubDate>Tue, 28 Sep 2021 12:16:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-55-i.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/
难度： 简单
题目描述 输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。
例如：
给定二叉树 [3,9,20,null,null,15,7]，
3 / \ 9 20 / \ 15 7 返回它的最大深度 3 。
提示： 节点总数 &amp;lt;= 10000 解题思路 深度优先搜索 递归的遍历每个结点的左右子树，获得子树最大深度，+1 后返回，当结点不存在时，树高为空
func maxDepth(root *TreeNode) int { if root == nil { return 0 } depth := maxDepth(root.Left) rDepth := maxDepth(root.Right) if depth &amp;lt; rDepth { depth = rDepth } return depth + 1 } 复杂度 时间复杂度：$ O(N), N = size(Tree) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 53 - II. 0～n-1中缺失的数字</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-53-ii.-0n-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Tue, 28 Sep 2021 11:25:44 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-53-ii.-0n-1%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/
难度： 简单
题目描述 一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。
示例 1： 输入: [0,1,3]
输出: 2
示例 2： 输入: [0,1,2,3,4,5,6,7,9]
输出: 8
提示： 1 &amp;lt;= 数组长度 &amp;lt;= 10000 解题思路 哈希 使用哈希表标识出现过数字，遍历数据，将位于数组中的数字添加到哈希表中，然后在哈希表中寻找没有出现过的数。
func missingNumber(nums []int) int { exist := make(map[int]struct{}) for _, num := range nums { exist[num] = struct{}{} } for i := 0; i &amp;lt; len(nums); i++ { if _, ok := exist[i]; !ok { return i } } return len(nums) } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ 顺序查找 由于数组递增，只需要找到与下标不相同的数，返回其下标即可。</description>
    </item>
    
    <item>
      <title>剑指 Offer 32 - III. 从上到下打印二叉树 III</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-32-iii.-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91-iii/</link>
      <pubDate>Mon, 27 Sep 2021 19:19:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-32-iii.-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91-iii/</guid>
      <description>链接： https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/
难度： 简单
题目描述 从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。
例如:
给定二叉树: [3,9,20,null,null,15,7],
3 / \ 9 20 / \ 15 7 返回其层次遍历结果：
[ [3], [20,9], [15,7] ] 提示： 节点总数 &amp;lt;= 1000 解题思路 层序遍历 使用一个双端队列记录遍历到的结点，初始时根结点入队。
奇偶分离，偶数层从头至尾遍历完当前整层的所有元素，子结点先左后右从队尾入队；奇数层从尾至头遍历整层所有元素，子结点先右后左从队头入队。
每次遍历到的结点值加入到结果队列中，直至队列为空为止。
func levelOrder(root *TreeNode) [][]int { ans := make([][]int, 0) if root == nil { return ans } q := list.New() q.PushBack(root) for q.Len() &amp;gt; 0 { // 先偶数层 tmp := make([]int, 0, 1) for i := q.Len(); i &amp;gt; 0 ; i-- { node := q.</description>
    </item>
    
    <item>
      <title>剑指 Offer 32 - II. 从上到下打印二叉树 II</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-32-ii.-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91-ii/</link>
      <pubDate>Mon, 27 Sep 2021 19:05:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-32-ii.-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/
难度： 简单
题目描述 从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。
例如:
给定二叉树: [3,9,20,null,null,15,7],
3 / \ 9 20 / \ 15 7 返回其层次遍历结果：
[ [3], [9,20], [15,7] ] 提示： 节点总数 &amp;lt;= 1000 解题思路 层序遍历 使用一个队列记录遍历到的结点，初始时根结点入队，每次从头至尾遍历完当前整层的所有元素，并加入到结果队列，按顺序依次将左右非空子结点入队，直到队列为空。
func levelOrder(root *TreeNode) [][]int { ans := make([][]int, 0) if root == nil { return ans } q := list.New() q.PushBack(root) for q.Len() &amp;gt; 0 { ans = append(ans, make([]int, 0, 1)) for i := q.Len(); i &amp;gt; 0 ; i-- { node := q.</description>
    </item>
    
    <item>
      <title>剑指 Offer 32 - I. 从上到下打印二叉树</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-32-i.-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Mon, 27 Sep 2021 18:48:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-32-i.-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/
难度： 中等
题目描述 从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。
例如:
给定二叉树: [3,9,20,null,null,15,7],
3 / \ 9 20 / \ 15 7 返回：
[3,9,20,15,7]
提示： 节点总数 &amp;lt;= 1000 解题思路 层序遍历 使用一个队列记录遍历到的结点，初始时根结点入队，每次从队头取出一个结点，将其值加入到结果队列，并按顺序将左右非空子结点入队，直到队列为空。
func levelOrder(root *TreeNode) []int { ans := make([]int, 0) if root == nil { return ans } q := list.New() q.PushBack(root) for q.Len() &amp;gt; 0 { node := q.Front().Value.(*TreeNode) q.Remove(q.Front()) ans = append(ans, node.Val) if node.Left != nil { q.PushBack(node.Left) } if node.Right !</description>
    </item>
    
    <item>
      <title>剑指 Offer 14- II. 剪绳子 II</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-14-ii.-%E5%89%AA%E7%BB%B3%E5%AD%90-ii/</link>
      <pubDate>Mon, 27 Sep 2021 17:54:22 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-14-ii.-%E5%89%AA%E7%BB%B3%E5%AD%90-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/
难度： 中等
题目描述 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&amp;gt;1并且m&amp;gt;1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
示例 1： 输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2： 输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
提示： 2 &amp;lt;= n &amp;lt;= 1000 解题思路 数学 + 贪心 + 快速幂 根据几何均值不等式: $$ a_1a_2&amp;hellip;a_m \leq (\frac{a_1+a_2+&amp;hellip;+a_m}{m})，当且仅当 a_1=a_2=&amp;hellip;=a_m 时，等式成立 $$ 可以得知，当将绳子等分时，可以获得最大值。</description>
    </item>
    
    <item>
      <title>剑指 Offer 14- I. 剪绳子</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-14-i.-%E5%89%AA%E7%BB%B3%E5%AD%90/</link>
      <pubDate>Mon, 27 Sep 2021 17:22:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-14-i.-%E5%89%AA%E7%BB%B3%E5%AD%90/</guid>
      <description>链接： https://leetcode-cn.com/problems/jian-sheng-zi-lcof/
难度： 中等
题目描述 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&amp;gt;1并且m&amp;gt;1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
示例 1： 输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2： 输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
提示： 2 &amp;lt;= n &amp;lt;= 58 解题思路 动态规划 使用 dp[i] 表示绳子长度为 i 时的最大乘积。则：
初始，dp[1] = 0 dp[i] = max(dp[j], j) * (dp[i-j], i-j), 1 ≤ j &amp;lt; i func cuttingRope(n int) int { dp := make([]int, n+1) dp[1] = 1 for i := 2; i &amp;lt;= n; i++ { for j := 1; j &amp;lt; i; j++ { factor1 := dp[j] if factor1 &amp;lt; j { factor1 = j } factor2 := dp[i-j] if factor2 &amp;lt; i-j { factor2 = i - j } if dp[i] &amp;lt; factor1*factor2 { dp[i] = factor1 * factor2 } } } return dp[n] } 复杂度 时间复杂度：$ O(n^2) $ 空间复杂度：$ O(n) $ </description>
    </item>
    
    <item>
      <title>Leetcode 371. 两整数之和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-371.-%E4%B8%A4%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Sun, 26 Sep 2021 09:38:03 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-371.-%E4%B8%A4%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/sum-of-two-integers/
难度： 中等
题目描述 给你两个整数 a 和 b ，不使用 运算符 + 和 - ​​​​​​​，计算并返回两整数之和。 示例 1： 输入： a = 1, b = 2
输出： 3
示例 2： 输入： a = 2, b = 3
输出： 5
提示： -1000 &amp;lt;= a, b &amp;lt;= 1000 解题思路 位运算 以二进制位为单位进行运算，从最低位开始，使用位操作符诸位运算。
由于负数在计算机中存储的是补码，直接诸位求和即可，用 c 表示进位，利用 数字电路设计 得到计算方法如下：
当前位计算结果为：$a\oplus b\oplus c$ 进位的计算结果为：$(a\oplus b)c + ab$ func getSum(a int, b int) int { c := 0 ans := 0 for bit := 1; bit !</description>
    </item>
    
    <item>
      <title>Leetcode 583. 两个字符串的删除操作</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-583.-%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 25 Sep 2021 10:46:36 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-583.-%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/</guid>
      <description>链接： https://leetcode-cn.com/problems/delete-operation-for-two-strings/
难度： 中等
题目描述 给定两个单词 word1 和 word2，找到使得 word1 和 word2 相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。
示例： 输入: &amp;ldquo;sea&amp;rdquo;, &amp;ldquo;eat&amp;rdquo;
输出: 2
解释: 第一步将&amp;quot;sea&amp;quot;变为&amp;quot;ea&amp;quot;，第二步将&amp;quot;eat&amp;quot;变为&amp;quot;ea&amp;quot;
提示： 给定单词的长度不超过500。 给定单词中的字符只含有小写字母。 进阶： 你可以设计一个时间复杂度为 $O(n)$ 的解决方案吗？
解题思路 动态规划 最长公共子序列(LCS)的变种，求得最长公共子序列的长度，返回剩余字符的数量。
使用 dp[i][j] 表示分别以 i 和 j 为 word1 和 word2 前缀长度的最长公共子序列，其状态转移方程如下：
初始时，dp[0][j] = dp[i][0] = 0 当 word1[i] = word2[j] 时，dp[i][j] = dp[i-1][j-1] + 1；否则，dp[i][j] = max(dp[i-1][j], dp[i][j-1]) func minDistance(word1 string, word2 string) int { dp := make([][]int, len(word1)+1) dp[0] = make([]int, len(word2)+1) for i := range word1 { dp[i+1] = make([]int, len(word2)+1) for j := range word2 { if word1[i] == word2[j] { dp[i+1][j+1] = dp[i][j] + 1 continue } dp[i+1][j+1] = dp[i+1][j] if dp[i+1][j+1] &amp;lt; dp[i][j+1] { dp[i+1][j+1] = dp[i][j+1] } } } return len(word1) + len(word2) - (dp[len(word1)][len(word2)] &amp;lt;&amp;lt; 1) } 复杂度 时间复杂度：$ O(NM), N = len(word1), M = len(word2) $ 空间复杂度：$ O(NM) $ 动态规划 使用 dp[i][j] 表示分别以 i 和 j 为 word1 和 word2 前缀结尾的最少删除操作次数，其状态转移方程如下：</description>
    </item>
    
    <item>
      <title>Leetcode 430. 扁平化多级双向链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-430.-%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%9A%E7%BA%A7%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 24 Sep 2021 10:35:19 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-430.-%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%9A%E7%BA%A7%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/
难度： 中等
题目描述 多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。
给你位于列表第一级的头节点，请你扁平化列表，使所有结点出现在单级双链表中。
示例 1： 输入： head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
输出： [1,2,3,7,8,11,12,9,10,4,5,6]
解释：
输入的多级列表如下图所示：
扁平化后的链表如下图：
示例 2： 输入： head = [1,2,null,3]
输出： [1,3,2]
解释：
输入的多级列表如下图所示：
1---2---NULL | 3---NULL 示例 3： 输入： head = []
输出： []
如何表示测试用例中的多级链表？ 以 示例 1 为例：
1---2---3---4---5---6--NULL | 7---8---9---10--NULL | 11--12--NULL 序列化其中的每一级之后：
[1,2,3,4,5,6,null] [7,8,9,10,null] [11,12,null] 为了将每一级都序列化到一起，我们需要每一级中添加值为 null 的元素，以表示没有节点连接到上一级的上级节点。
[1,2,3,4,5,6,null] [null,null,7,8,9,10,null] [null,11,12,null] 合并所有序列化结果，并去除末尾的 null 。
[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12] 提示： 节点数目不超过 1000 1 &amp;lt;= Node.val &amp;lt;= 105 解题思路 深度优先搜索 采用深度优先搜索，遍历当前链表，当遇到 Child 非空时，优先遍历 Child 链表，每次遍历结束返回链表尾部的指针。</description>
    </item>
    
    <item>
      <title>Leetcode 326. 3的幂</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-326.-3%E7%9A%84%E5%B9%82/</link>
      <pubDate>Thu, 23 Sep 2021 14:50:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-326.-3%E7%9A%84%E5%B9%82/</guid>
      <description>链接： https://leetcode-cn.com/problems/power-of-three/
难度： 简单
题目描述 给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 true ；否则，返回 false 。
整数 n 是 3 的幂次方需满足：存在整数 x 使得 n == 3x
示例 1： 输入： n = 27
输出： true
示例 2： 输入： n = 0
输出： false
示例 3： 输入： n = 9
输出： true
示例 4： 输入： n = 45
输出： false
提示： -231 &amp;lt;= n &amp;lt;= 231 - 1 解题思路 试除法 当当前数字可以被 3 的整除，则除以 3，知道不能被 3 整除为止。</description>
    </item>
    
    <item>
      <title>剑指 Offer 60. n个骰子的点数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-60.-n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/</link>
      <pubDate>Wed, 22 Sep 2021 20:29:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-60.-n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/
难度： 中等
题目描述 把 n 个骰子扔在地上，所有骰子朝上一面的点数之和为 s。输入 n，打印出 s 的所有可能的值出现的概率。
你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
示例 1： 输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
示例 2： 输入: 2
输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
限制： 1 &amp;lt;= n &amp;lt;= 11 解题思路 动态规划 由于每个骰子的掷出的点数是独立的，使用 dp[i][j] 表示掷出 i 个骰子，点数之和为 j 的概率：
初始，dp[0][0] = 1 后续，dp[i][j] = d[i-1][j-1] / 6 + dp[i-1][j-2] / 6 + ... + dp[i-1][j-6] / 6 使用滚动数组的方式降低空间复杂度。
func dicesProbability(n int) []float64 { dp := []float64{1} for i := 1; i &amp;lt;= n; i++ { dpNew := make([]float64, len(dp)+5) for j := range dp { for k := j; k &amp;lt; j+6; k++ { dpNew[k] += dp[j] / 6 } } dp = dpNew } return dp } 复杂度 时间复杂度：$ O(n^2) $ 空间复杂度：$ O(n) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 57. 和为s的两个数字</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-57.-%E5%92%8C%E4%B8%BAs%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 22 Sep 2021 19:39:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-57.-%E5%92%8C%E4%B8%BAs%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/
难度： 简单
题目描述 输入一个递增排序的数组和一个数字 s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。
示例 1： 输入： nums = [2,7,11,15], target = 9
输出： [2,7] 或者 [7,2]
示例 2： 输入： nums = [10,26,30,31,47,60], target = 40
输出： [10,30] 或者 [30,10]
限制： 1 &amp;lt;= nums.length &amp;lt;= 105 1 &amp;lt;= nums[i] &amp;lt;= 106 解题思路 哈希 使用哈希表记录每个数字是否出现过，遍历数组，计算对应的另一个数，若已出现过则返回这两个数。
func twoSum(nums []int, target int) []int { hash := make(map[int]struct{}) for _, num := range nums { if _, ok := hash[target-num]; ok { return []int{num, target - num} } hash[num] = struct{}{} } return make([]int, 0) } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ 双指针 使用两个指针 i, j 从头尾分别向中间遍历：</description>
    </item>
    
    <item>
      <title>剑指 Offer 54. 二叉搜索树的第k大节点</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-54.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E5%A4%A7%E8%8A%82%E7%82%B9/</link>
      <pubDate>Wed, 22 Sep 2021 18:54:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-54.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E5%A4%A7%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/
难度： 简单
题目描述 给定一棵二叉搜索树，请找出其中第k大的节点。
示例 1： 输入: root = [3,1,4,null,2], k = 1
3 / \ 1 4 \ 2 输出: 4
示例 2： 输入: root = [5,3,6,2,4,null,null,1], k = 3
5 / \ 3 6 / \ 2 4 / 1 输出: 4
限制： 1 ≤ k ≤ 二叉搜索树元素个数 解题思路 中序遍历 二叉搜索树的中序遍历结果是有序的，可以先遍历右子树，这样遍历的结果是倒序的。
使用 cnt 记录当前遍历到的节点数量，每次遍历到结点时，其值加一。当 cnt 等于 k 时，记录此值，并通知上方已找到，提前返回。
func kthLargest(root *TreeNode, k int) int { cnt := 0 ans := 0 var dfs func(node *TreeNode) bool dfs = func(node *TreeNode) bool { if node == nil { return false } if dfs(node.</description>
    </item>
    
    <item>
      <title>Leetcode 725. 分隔链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-725.-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 22 Sep 2021 14:11:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-725.-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/split-linked-list-in-parts/
难度： 中等
题目描述 给你一个头结点为 head 的单链表和一个整数 k ，请你设计一个算法将链表分隔为 k 个连续的部分。
每部分的长度应该尽可能的相等：任意两部分的长度差距不能超过 1 。这可能会导致有些部分为 null 。
这 k 个部分应该按照在链表中出现的顺序排列，并且排在前面的部分的长度应该大于或等于排在后面的长度。
返回一个由上述 k 部分组成的数组。
示例 1： 输入： head = [1,2,3], k = 5
输出： [[1],[2],[3],[],[]]
解释：
第一个元素 output[0] 为 output[0].val = 1 ，output[0].next = null 。
最后一个元素 output[4] 为 null ，但它作为 ListNode 的字符串表示是 [] 。
示例 2： 输入： head = [1,2,3,4,5,6,7,8,9,10], k = 3
输出： [[1,2,3,4],[5,6,7],[8,9,10]]
解释：
输入被分成了几个连续的部分，并且每部分的长度相差不超过 1 。前面部分的长度大于等于后面部分的长度。
提示： 链表中节点的数目在范围 [0, 1000] 0 &amp;lt;= Node.</description>
    </item>
    
    <item>
      <title>剑指 Offer 50. 第一个只出现一次的字符</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-50.-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Tue, 21 Sep 2021 23:36:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-50.-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/
难度： 简单
题目描述 在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。
示例 1： 输入： s = &amp;ldquo;abaccdeff&amp;rdquo;
输出： &amp;lsquo;b&amp;rsquo;
示例 2： 输入： s = &amp;quot;&amp;quot;
输出： &amp;rsquo; &#39;
限制： 0 &amp;lt;= s 的长度 &amp;lt;= 50000 解题思路 哈希 + 两次遍历 第一次遍历，使用哈希表记录每个字符是否重复出现；第二次遍历，返回找到的第一个不重复的字符，找不到返回 &#39; &#39;。
func firstUniqChar(s string) byte { repeat := make(map[byte]bool) for i := range s { _, ok := repeat[s[i]] if !ok { repeat[s[i]] = false } else { repeat[s[i]] = true } } for i := range s { if !</description>
    </item>
    
    <item>
      <title>Leetcode 58. 最后一个单词的长度</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-58.-%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Tue, 21 Sep 2021 22:30:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-58.-%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/length-of-last-word/
难度： 简单
题目描述 给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中最后一个单词的长度。
单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。
示例 1： 输入： s = &amp;ldquo;Hello World&amp;rdquo;
输出： 5
示例 2： 输入： s = &amp;quot; fly me to the moon &amp;quot;
输出： 4
示例 3： 输入： s = &amp;ldquo;luffy is still joyboy&amp;rdquo;
输出： 6
提示： 1 &amp;lt;= s.length &amp;lt;= 104 s 仅有英文字母和空格 &#39; &#39; 组成 s 中至少存在一个单词 解题思路 倒序遍历 从尾到头倒序遍历，当字符为 &#39; &#39; 时，若长度为 0 ，说明是尾部空格，继续遍历；否则说明尾部单词遍历完毕，返回长度。
func lengthOfLastWord(s string) int { ans := 0 for i := len(s)-1; i &amp;gt;= 0; i-- { if s[i] == &amp;#39; &amp;#39; { if ans == 0 { continue } break } ans++ } return ans } 复杂度 时间复杂度：$ O(N), N = len(s) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 49. 丑数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-49.-%E4%B8%91%E6%95%B0/</link>
      <pubDate>Tue, 21 Sep 2021 17:50:14 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-49.-%E4%B8%91%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/chou-shu-lcof/
难度： 中等
题目描述 我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。
示例： 输入: n = 10
输出: 12
解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。
说明： 1 是丑数。 n 不超过 1690。 解题思路 堆 + 哈希 维护一个小顶堆和哈希表，初始堆中元素为 1，每次弹出堆顶最小元素，然后将其分别乘以 2、3、5加入堆中，此处需要使用哈希表去重。
弹出的第 n 个数即为第 n 个丑数。
type MinHeap struct { sort.IntSlice } func (this *MinHeap) Push(x interface{}) { this.IntSlice = append(this.IntSlice, x.(int)) } func (this *MinHeap) Pop() interface{} { x := this.</description>
    </item>
    
    <item>
      <title>剑指 Offer 48. 最长不含重复字符的子字符串</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-48.-%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 21 Sep 2021 16:18:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-48.-%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/
难度： 中等
题目描述 请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。
示例 1： 输入: &amp;ldquo;abcabcbb&amp;rdquo;
输出: 3
解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。
示例 2： 输入: &amp;ldquo;bbbbb&amp;rdquo;
输出: 1
解释: 因为无重复字符的最长子串是 &amp;ldquo;b&amp;rdquo;，所以其长度为 1。
示例 3： 输入: &amp;ldquo;pwwkew&amp;rdquo;
输出: 3
解释: 因为无重复字符的最长子串是 &amp;ldquo;wke&amp;rdquo;，所以其长度为 3。
请注意，你的答案必须是 子串 的长度，&amp;ldquo;pwke&amp;rdquo; 是一个子序列，不是子串。
提示： s.length &amp;lt;= 40000 解题思路 哈希 + 双指针 使用哈希表记录每个字符出现过下标，并记录有效数组开始的下标 start：当出现重复字符时，将 start 修正为重复字符出现的下一个下标。
func lengthOfLongestSubstring(s string) int { ans := 0 pos := make(map[byte]int) start := 0 for i := 0; i &amp;lt; len(s); i++ { p, ok := pos[s[i]] if ok &amp;amp;&amp;amp; start &amp;lt;= p { start = p + 1 } pos[s[i]] = i if ans &amp;lt; i-start+1 { ans = i - start + 1 } } return ans } 复杂度 时间复杂度：$ O(N), N = len(s) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 47. 礼物的最大价值</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-47.-%E7%A4%BC%E7%89%A9%E7%9A%84%E6%9C%80%E5%A4%A7%E4%BB%B7%E5%80%BC/</link>
      <pubDate>Tue, 21 Sep 2021 15:11:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-47.-%E7%A4%BC%E7%89%A9%E7%9A%84%E6%9C%80%E5%A4%A7%E4%BB%B7%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof/
难度： 中等
题目描述 在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？
示例： 输入:
[ [1,3,1], [1,5,1], [4,2,1] ] 输出: 12
解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物
提示： 0 &amp;lt; grid.length &amp;lt;= 200 0 &amp;lt; grid[0].length &amp;lt;= 200 解题思路 动态规划 使用 dp[i][j] 记录到达位置 (i,j) 的最大值，则其只能从上边或者左边移动到当前位置，故状态转移方程为：
dp[0][0] = grid[0][0] dp[i][j] = max(dp[i-1][j], dp[i, j-1]) + grid[i][j] func maxValue(grid [][]int) int { dp := make([][]int, len(grid)) for i := 0; i &amp;lt; len(grid); i++ { dp[i] = make([]int, len(grid[0])) for j := 0; j &amp;lt; len(grid[0]); j++ { if i-1 &amp;gt;= 0 { dp[i][j] = dp[i-1][j] } if j-1 &amp;gt;= 0 &amp;amp;&amp;amp; dp[i][j] &amp;lt; dp[i][j-1] { dp[i][j] = dp[i][j-1] } dp[i][j] += grid[i][j] } } return dp[len(dp)-1][len(dp[0])-1] } 复杂度 时间复杂度：$ O(mn) $ 空间复杂度：$ O(mn) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 46. 把数字翻译成字符串</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-46.-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 20 Sep 2021 20:51:55 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-46.-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/
难度： 中等
题目描述 给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。
示例： 输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是&amp;quot;bccfi&amp;quot;, &amp;ldquo;bwfi&amp;rdquo;, &amp;ldquo;bczi&amp;rdquo;, &amp;ldquo;mcfi&amp;quot;和&amp;quot;mzi&amp;rdquo;
提示： 0 &amp;lt;= num &amp;lt; 231 解题思路 动态规划 使用 dp[i] 记录前缀数组可以表示方案的最大值。状态转移方程为：
初始，dp[0] = 1； 如果，nums[i]nums[i+1] 可以翻译，则 dp[i+1] = dp[i] + dp[i-1]； 否则，dp[i+1] = dp[i]。 func translateNum(num int) int { s := strconv.FormatInt(int64(num), 10) dp := make([]int, len(s)) dp[0] = 1 for i := 0; i &amp;lt; len(s)-1; i++ { dp[i+1] = dp[i] if s[i] !</description>
    </item>
    
    <item>
      <title>剑指 Offer 45. 把数组排成最小的数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-45.-%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</link>
      <pubDate>Mon, 20 Sep 2021 19:50:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-45.-%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/
难度： 中等
题目描述 输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。
示例 1： 输入: [10,2]
输出: &amp;ldquo;102&amp;rdquo;
示例 2： 输入: [3,30,34,5,9]
输出: &amp;ldquo;3033459&amp;rdquo;
提示： 0 &amp;lt; nums.length &amp;lt;= 100 说明： 输出结果可能非常大，所以你需要返回一个字符串而不是整数 拼接起来的数字可能会有前导 0，最后结果不需要去掉前导 0 解题思路 排序 对于两个数 x、y，若 xy &amp;lt; yx，则 x 必然在 y 的前面，证明如下：
当这两个数相邻，则成立 两数不相邻，不妨设 xzy，则有 xz &amp;lt; zx，zy &amp;lt; yz，需要证明 xzy &amp;lt; yzx xz &amp;lt; zx =&amp;gt; x * 10^len(x) + z &amp;lt; z * 10^len(z) + x zy &amp;lt; yz =&amp;gt; z * 10^len(z) + y &amp;lt; y * 10^len(y) + z 相加得到 x * 10^len(x) + y &amp;lt; y * 10^len(y) + z，即 xy &amp;lt; yx，所以 xzy &amp;lt; yzx成立。 按照上述方案自定义排序规则排序，之后按顺序拼接起来返回。</description>
    </item>
    
    <item>
      <title>剑指 Offer 44. 数字序列中某一位的数字</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-44.-%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 20 Sep 2021 18:23:10 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-44.-%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/
难度： 中等
题目描述 数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。
请写一个函数，求任意第n位对应的数字。
示例 1： 输入： n = 3
输出： 3
示例 2： 输入： n = 11
输出： 0
限制： 0 &amp;lt;= n &amp;lt; 231 解题思路 模拟 字符串按照数字顺序排列，其按照数字长度为 1、2、3、... 进行排列，可以利用这个规则求得 n 所在的那个数，进而求的该位对应的数字。
排除 0，则相同长度的数字所占的字符串长度为 9*基数*数字长度，（即9=9*1*1、90=9*10*2、900=9*100*3、...），通过覆盖范围的查找确定到 n 对应的数字长度和基数。
之后获取到 n 所在数字的偏移量，并求得该数，之后返回 n 对应位的数字即可。对输入 0 需要验证。
func findNthDigit(n int) int { base := 1 // 基数 10^N digit := 1 // 位数 10进制 // 确定位数 for ; n &amp;gt; base*9*digit; base, digit = 10*base, digit+1 { n -= base * 9 * digit } offset := (n - 1) / digit // 偏移量 // 获取指定位数字 ans := base + offset for i := digit - (n-1)%digit; i &amp;gt; 1; i-- { ans /= 10 } return ans % 10 } 复杂度 时间复杂度：$ O(\log{n}) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 36. 二叉搜索树与双向链表</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-36.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 20 Sep 2021 17:20:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-36.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/
难度： 中等
题目描述 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。
为了让您更好地理解问题，以下面的二叉搜索树为例：
我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。
下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。
特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。
解题思路 深度优先搜索 二叉搜索树中序遍历后的结果即为有序的，采用中序遍历的方式搜索二叉树。
维护两个指针 head 和 tail ，分别指向当前遍历到的链表的头和尾。对于当前遍历到的结点，将其 left 指向 tail，同时 tail 的 right 指向当前结点，后 tail 变更为指向当前结点。
完成遍历后，修改头尾指针，使其构成环。
class Solution { public: Node *treeToDoublyList(Node *root) { if (root == nullptr) { return nullptr; } dfs(root); head-&amp;gt;left = tail; tail-&amp;gt;right = head; return head; } private: Node *head, *tail; void dfs(Node *node) { if(node == nullptr) { return; } dfs(node-&amp;gt;left); if (head == nullptr) { head = node; } if (tail == nullptr) { tail = node; } else { tail-&amp;gt;right = node; node-&amp;gt;left = tail; tail = node; } dfs(node-&amp;gt;right); } }; 复杂度 时间复杂度：$ O(N), N = size(Tree) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 40. 最小的k个数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-40.-%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Mon, 20 Sep 2021 16:17:39 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-40.-%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/
难度： 简单
题目描述 输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。
示例 1： 输入： arr = [3,2,1], k = 2
输出： [1,2] 或者 [2,1]
示例 2： 输入： arr = [0,1,2,1], k = 1
输出： [0]
限制： 0 &amp;lt;= k &amp;lt;= arr.length &amp;lt;= 10000 0 &amp;lt;= arr[i] &amp;lt;= 10000 解题思路 排序 对数组进行排序，返回前 k 个数。
func getLeastNumbers(arr []int, k int) []int { sort.Ints(arr) return arr[:k] } 复杂度 时间复杂度：$ O(N\log{N}), N = len(arr) $ 空间复杂度：$ O(\log{N}) $ 堆 使用大顶堆维护最小的 k 个数。遍历数组，当堆不满 k 时，入堆；否则，当前元素小于堆顶元素时，弹出最大元素，当前元素入堆。</description>
    </item>
    
    <item>
      <title>剑指 Offer 39. 数组中出现次数超过一半的数字</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-39.-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 20 Sep 2021 16:00:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-39.-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/
难度： 简单
题目描述 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。
你可以假设数组是非空的，并且给定的数组总是存在多数元素。
示例： 输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]
输出: 2
提示： 1 &amp;lt;= 数组长度 &amp;lt;= 50000 解题思路 哈希 遍历数组，用哈希表记录每个元素的出现次数，当超过半数时返回。
func majorityElement(nums []int) int { cnt := make(map[int]int) for _, num := range nums { cnt[num]++ if cnt[num] &amp;gt; len(nums)/2 { return num } } return 0 } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ 排序 对数组排序，位于中间位置对必为多数元素。
func majorityElement(nums []int) int { sort.</description>
    </item>
    
    <item>
      <title>剑指 Offer 35. 复杂链表的复制</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-35.-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 20 Sep 2021 15:16:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-35.-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</guid>
      <description>链接： https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/
难度： 中等
题目描述 请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。
示例 1： 输入： head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出： [[7,null],[13,0],[11,4],[10,2],[1,0]]
示例 2： 输入： head = [[1,1],[2,1]]
输出： [[1,1],[2,1]]
示例 3： 输入： head = [[3,null],[3,0],[3,null]]
输出： [[3,null],[3,0],[3,null]]
示例 4: 输入： head = []
输出： []
解释： 给定的链表为空（空指针），因此返回 null
提示： -10000 &amp;lt;= Node.val &amp;lt;= 10000 Node.random 为空（null）或指向链表中的节点。 节点数目不超过 1000 。 解题思路 哈希 使用哈希表维护一个旧结点到新结点的映射，依次从前向后遍历链表，并逐一的构造新链表。
首先先从哈希表中获取新结点，若不存在，需要构造新结点，并将其加入到哈希表中。
func copyRandomList(head *Node) *Node { m := make(map[*Node]*Node) newHead := new(Node) for node := newHead; head !</description>
    </item>
    
    <item>
      <title>剑指 Offer 34. 二叉树中和为某一值的路径</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-34.-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Mon, 20 Sep 2021 14:55:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-34.-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/
难度： 中等
题目描述 输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。
示例： 给定如下二叉树，以及目标和 target = 22，
5 / \ 4 8 / / \ 11 13 4 / \ / \ 7 2 5 1 返回:
[ [5,4,11,2], [5,8,4,5] ] 提示： 节点总数 &amp;lt;= 10000 解题思路 深度优先搜索 从根节点开始进行深度优先搜索，当整条路径上的结点值之和为 target 时，将其拷贝到结果队列中。
func pathSum(root *TreeNode, target int) [][]int { ans := make([][]int, 0) var dfs func(node *TreeNode, path []int, sum int) dfs = func(node *TreeNode, path []int, sum int) { if node == nil { return } path = append(path, node.</description>
    </item>
    
    <item>
      <title>剑指 Offer 33. 二叉搜索树的后序遍历序列</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-33.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</link>
      <pubDate>Mon, 20 Sep 2021 13:56:50 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-33.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/
难度： 中等
题目描述 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 true，否则返回 false。假设输入的数组的任意两个数字都 互不相同。
参考以下这颗二叉搜索树：
5 / \ 2 6 / \ 1 3 示例 1： 输入： [1,6,3,2,5]
输出： false
示例 2： 输入： [1,3,2,6,5]
输出： true
提示： 数组长度 &amp;lt;= 1000 解题思路 递归 对于一棵树的后续遍历序列，最后一个元素必然是根，然后向前遍历。根据二叉搜索树的性质，其右边元素一定大于根，而左边元素一定小于根，由此找到首个小于根的元素即为左右子树分界点。
若在左子树序列里存在一个大于根的结点，则返回 false，否则递归处理左右子树。
func verifyPostorder(postorder []int) bool { if len(postorder) &amp;lt;= 2 { return true } root := postorder[len(postorder)-1] split := len(postorder) - 2 for ; split &amp;gt;= 0 &amp;amp;&amp;amp; postorder[split] &amp;gt; root; split-- { } for i := 0; i &amp;lt; split; i++ { if postorder[i] &amp;gt; root { return false } } return verifyPostorder(postorder[:split+1]) &amp;amp;&amp;amp; verifyPostorder(postorder[split+1:len(postorder)-1]) } 复杂度 时间复杂度：$ O(N\log{N}), N = len(postorder) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 31. 栈的压入、弹出序列</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-31.-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</link>
      <pubDate>Mon, 20 Sep 2021 13:01:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-31.-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/
难度： 中等
题目描述 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字 均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。
示例 1： 输入： pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
输出： true
解释： 我们可以按以下顺序执行：
push(1), push(2), push(3), push(4), pop() -&amp;gt; 4,
push(5), pop() -&amp;gt; 5, pop() -&amp;gt; 3, pop() -&amp;gt; 2, pop() -&amp;gt; 1
示例 2： 输入： pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
输出： false
解释： 1 不能在 2 之前弹出。
提示： 0 &amp;lt;= pushed.length == popped.length &amp;lt;= 1000 0 &amp;lt;= pushed[i], popped[i] &amp;lt; 1000 pushed 是 popped 的排列。 解题思路 模拟 使用一个栈模拟操作。遍历 pushed，将当前元素压栈，由于元素各不相同，随后将栈与 popped 对照，逐一地相同元素弹出。</description>
    </item>
    
    <item>
      <title>剑指 Offer 30. 包含min函数的栈</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-30.-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</link>
      <pubDate>Mon, 20 Sep 2021 12:29:44 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-30.-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</guid>
      <description>链接： https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/
难度： 简单
题目描述 定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 $O(1)$。
示例： MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.min(); &amp;ndash;&amp;gt; 返回 -3.
minStack.pop();
minStack.top(); &amp;ndash;&amp;gt; 返回 0.
minStack.min(); &amp;ndash;&amp;gt; 返回 -2.
提示： 各函数的调用总次数不超过 20000 次 解题思路 双栈 当最小元素入栈后，后续压入的所有大于最小元素的元素，均不会影响 min 的值，除非压入更小的元素。同理，需要弹出最小元素，min 的值才会改变。故使用另一个栈 B 记录可能使得 min 改变的所有元素值。
当一个元素入栈时，压入栈 A ，若此元素不大于栈 B 栈顶元素或栈 B 为空，同时需要压入栈 B； 当出栈时，弹出栈 A 栈顶元素，若该元素与栈 B 栈顶元素相同，栈 B 栈顶元素也弹出。 type MinStack struct { stack *list.List minStack *list.</description>
    </item>
    
    <item>
      <title>剑指 Offer 29. 顺时针打印矩阵</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-29.-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Mon, 20 Sep 2021 11:07:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-29.-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</guid>
      <description>链接： https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/
难度： 简单
题目描述 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。
示例 1： 输入： matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出： [1,2,3,6,9,8,7,4,5]
示例 2： 输入： matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出： [1,2,3,4,8,12,11,10,9,5,6,7]
限制： 0 &amp;lt;= matrix.length &amp;lt;= 100 0 &amp;lt;= matrix[i].length &amp;lt;= 100 解题思路 模拟 从 (0,0) 开始，按照 右 &amp;gt; 下 &amp;gt; 左 &amp;gt; 上 &amp;gt; 右 的顺序遍历，当下一步要超出范围时或已访问过时，变换遍历方向。
func spiralOrder(matrix [][]int) []int { if len(matrix) == 0 { return make([]int, 0) } visit := make([][]bool, len(matrix)) for i := range matrix { visit[i] = make([]bool, len(matrix[i])) } ans := make([]int, 0, len(matrix)*len(matrix[0])) directions := [4][2]int{{0, 1}, {1, 0}, {0, -1}, {-1, 0}} for i, j, direction := 0, 0, 0; len(ans) &amp;lt; cap(ans); i, j = i+directions[direction][0], j+directions[direction][1] { ans = append(ans, matrix[i][j]) visit[i][j] = true // 遍历方向修正 nextI, nextJ := i+directions[direction][0], j+directions[direction][1] if nextI &amp;lt; 0 || nextI &amp;gt;= len(matrix) || nextJ &amp;lt; 0 || nextJ &amp;gt;= len(matrix[0]) || visit[nextI][nextJ] { direction = (direction + 1) % len(directions) } } return ans } 复杂度 时间复杂度：$ O(NM), N = len(matrix), M = len(N = len(matrix[i])) $ 空间复杂度：$ O(NM) $ 层序遍历 将矩阵分解为一个个的环，每次只顺时针遍历环即可。</description>
    </item>
    
    <item>
      <title>剑指 Offer 28. 对称的二叉树</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-28.-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 19 Sep 2021 20:37:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-28.-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/
难度： 简单
题目描述 请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。
例如，二叉树 [1,2,2,3,4,4,3] 是对称的。
1 / \ 2 2 / \ / \ 3 4 4 3 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:
1 / \ 2 2 \ \ 3 3 示例 1： 输入： root = [1,2,2,3,4,4,3]
输出： true
示例 2： 输入： root = [1,2,2,null,3,null,3]
输出： false
限制： 0 &amp;lt;= 节点个数 &amp;lt;= 1000 解题思路 递归 递归遍历比较互为镜像的两个结点，不同则返回 false，相同则继续遍历比较子结点。
因为是镜像比较，所以左子树的左结点和右子树的右结点比较，而左子树的右结点和右子树的左结点比较。
func isSymmetric(root *TreeNode) bool { if root == nil { return true } var same func(node1, node2 *TreeNode) bool same = func(node1, node2 *TreeNode) bool { if node1 == nil &amp;amp;&amp;amp; node2 == nil { return true } if node1 == nil || node2 == nil || node1.</description>
    </item>
    
    <item>
      <title>剑指 Offer 27. 二叉树的镜像</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-27.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</link>
      <pubDate>Sun, 19 Sep 2021 20:27:58 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-27.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/
难度： 简单
题目描述 请完成一个函数，输入一个二叉树，该函数输出它的镜像。
例如输入：
4 / \ 2 7 / \ / \ 1 3 6 9 镜像输出：
4 / \ 7 2 / \ / \ 9 6 3 1 示例： 输入： root = [4,2,7,1,3,6,9]
输出： [4,7,2,9,6,3,1]
限制： 0 &amp;lt;= 节点个数 &amp;lt;= 1000 解题思路 递归 递归遍历所有的结点，交换左右子树。
func mirrorTree(root *TreeNode) *TreeNode { if root == nil { return nil } root.Left, root.Right = mirrorTree(root.Right), mirrorTree(root.Left) return root } 复杂度 时间复杂度：$ O(N), N = size(Tree) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 26. 树的子结构</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-26.-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 19 Sep 2021 19:37:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-26.-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/
难度： 中等
题目描述 输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)
B是A的子结构， 即 A中有出现和B相同的结构和节点值。
例如: 给定的树 A:
3 / \ 4 5 / \ 1 2 给定的树 B：
4 / 1 返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。
示例 1： 输入： A = [1,2,3], B = [3,1]
输出： false
示例 2： 输入： A = [3,4,5,1,2], B = [4,1]
输出： true
限制： 0 &amp;lt;= 节点个数 &amp;lt;= 10000 解题思路 深度优先搜索 在树 A 上进行 深度优先搜索（先序遍历），当子树根结点与 B 相同时，仍采用 深度优先搜索 的方式比较结构是否相同。</description>
    </item>
    
    <item>
      <title>剑指 Offer 25. 合并两个排序的链表</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-25.-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 19 Sep 2021 19:23:38 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-25.-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/
难度： 简单
题目描述 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的
示例： 输入： 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4
输出： 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4
限制： 0 &amp;lt;= 链表长度 &amp;lt;= 1000 解题思路 迭代 由于两个链表都是排好序的，所以每次只需要比较两个链表头，选择小的加入到结果队列即可。
func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { ans := new(ListNode) for node := ans; l1 != nil || l2 != nil; node = node.Next { if l1 == nil { node.Next = l2 break } if l2 == nil { node.Next = l1 break } if l1.Val &amp;lt; l2.Val { node.</description>
    </item>
    
    <item>
      <title>剑指 Offer 24. 反转链表</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-24.-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 19 Sep 2021 18:31:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-24.-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/
难度： 简单
题目描述 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。
示例： 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL
说明： 0 &amp;lt;= nums.length &amp;lt;= 50000 1 &amp;lt;= nums[i] &amp;lt;= 10000 解题思路 递归 利用调用栈记录上一个结点的信息，每次现将后续链表反转，得到反转链表的头部，然后通过当前结点的 Next 指针将当前节点添加到反转链表的尾部，注意还需要将当前节点的 Next 指针置空。
func reverseList(head *ListNode) *ListNode { if head == nil || head.Next == nil { return head } newHead := reverseList(head.Next) head.Next.Next = head head.Next = nil return newHead } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ 双指针 链表是单向的，无法访问到上一个节点，所以使用两个指针 last 和 cur 记录当前结点和上一个结点。</description>
    </item>
    
    <item>
      <title>剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-21.-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</link>
      <pubDate>Sun, 19 Sep 2021 18:13:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-21.-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</guid>
      <description>链接： https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/
难度： 简单
题目描述 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。
示例： 输入： nums = [1,2,3,4]
输出： [1,3,2,4]
注： [3,1,2,4] 也是正确的答案之一。
说明： 0 &amp;lt;= nums.length &amp;lt;= 50000 1 &amp;lt;= nums[i] &amp;lt;= 10000 解题思路 双指针 使用两个指针 i 和 j 分别指向下一个奇数待插入的位置和当前遍历到的位置，一次遍历，遇到奇数时，i 、 j 指向的两个元素互换。
func exchange(nums []int) []int { for i, j := 0, 0; j &amp;lt; len(nums); j++ { if nums[j]&amp;amp;1 == 1 { nums[i], nums[j] = nums[j], nums[i] i++ } } return nums } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 20. 表示数值的字符串</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-20.-%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sun, 19 Sep 2021 16:21:04 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-20.-%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/
难度： 中等
题目描述 请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。
数值（按顺序）可以分成以下几个部分：
若干空格 一个 小数 或者 整数 （可选）一个 &#39;e&#39; 或 &#39;E&#39; ，后面跟着一个 整数 若干空格 小数（按顺序）可以分成以下几个部分：
（可选）一个符号字符（&#39;+&#39; 或 &#39;-&#39;） 下述格式之一： 至少一位数字，后面跟着一个点 &#39;.&#39; 至少一位数字，后面跟着一个点 &#39;.&#39; ，后面再跟着至少一位数字 一个点 &#39;.&#39; ，后面跟着至少一位数字 整数（按顺序）可以分成以下几个部分：
（可选）一个符号字符（&#39;+&#39; 或 &#39;-&#39;） 至少一位数字 部分数值列举如下：
[&amp;quot;+100&amp;quot;, &amp;quot;5e2&amp;quot;, &amp;quot;-123&amp;quot;, &amp;quot;3.1416&amp;quot;, &amp;quot;-1E-16&amp;quot;, &amp;quot;0123&amp;quot;] 部分非数值列举如下：
[&amp;quot;12e&amp;quot;, &amp;quot;1a3.14&amp;quot;, &amp;quot;1.2.3&amp;quot;, &amp;quot;+-5&amp;quot;, &amp;quot;12e+5.4&amp;quot;] 示例 1： 输入： s = &amp;ldquo;0&amp;rdquo;
输出： true
示例 2： 输入： s = &amp;ldquo;e&amp;rdquo;
输出： false
示例 3： 输入： s = &amp;ldquo;.</description>
    </item>
    
    <item>
      <title>剑指 Offer 18. 删除链表的节点</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-18.-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 19 Sep 2021 15:56:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-18.-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/
难度： 简单
题目描述 给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。
返回删除后的链表的头节点。
注意： 此题对比原题有改动
示例 1： 输入: head = [4,5,1,9], val = 5
输出: [4,1,9]
解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9.
示例 2： 输入: head = [4,5,1,9], val = 1
输出: [4,5,9]
解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 5 -&amp;gt; 9.
说明： 题目保证链表中节点的值互不相同 若使用 C 或 C++ 语言，你不需要 free 或 delete 被删除的节点 解题思路 顺序遍历 + 二级指针 顺序遍历该链表，当遇到目标结点时，将指向该节点的指针指向下一个结点。
func deleteNode(head *ListNode, val int) *ListNode { for node := &amp;amp;head; (*node) !</description>
    </item>
    
    <item>
      <title>剑指 Offer 17. 打印从1到最大的n位数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-17.-%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Sun, 19 Sep 2021 15:44:19 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-17.-%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/
难度： 简单
题目描述 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。
示例： 输入: n = 1
输出: [1,2,3,4,5,6,7,8,9]
说明： 用返回一个整数列表来代替打印 n 为正整数 解题思路 求得上限 max，其值为 10n，然后将 [1,max) 之间的所有数依次按顺序添加到返回队列即可。
func printNumbers(n int) []int { max := 1 for ; n &amp;gt; 0; n-- { max *= 10 } ans := make([]int, 0, max) for i := 1; i &amp;lt; max; i++ { ans = append(ans, i) } return ans } 复杂度 时间复杂度：$ O(10^n) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 16. 数值的整数次方</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-16.-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</link>
      <pubDate>Sun, 19 Sep 2021 15:13:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-16.-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/
难度： 中等
题目描述 实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。
示例 1： 输入： x = 2.00000, n = 10
输出： 1024.00000
示例 2： 输入： x = 2.10000, n = 3
输出： 9.26100
示例 3： 输入： x = 2.00000, n = -2
输出： 0.25000
解释： 2-2 = 1/22 = 1/4 = 0.25
提示： -100.0 &amp;lt; x &amp;lt; 100.0 -231 &amp;lt;= n &amp;lt;= 231-1 -104 &amp;lt;= xn &amp;lt;= 104 解题思路 快速幂 $$ x^n = a_1x^1 * a_2x^2 * a_3x^4 * a_4x^8 * &amp;hellip; , 其中a_i\in(0,1) $$ 可以看出，$ a_i $ 就是 n 的二进制表示形式，而对应项的幂计算可由上一项乘自身求得，故可以依次枚举二进制的每一位，类乘求的结果。</description>
    </item>
    
    <item>
      <title>剑指 Offer 13. 机器人的运动范围</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-13.-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Sun, 19 Sep 2021 14:29:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-13.-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</guid>
      <description>链接： https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/
难度： 中等
题目描述 地上有一个 m 行 n 列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0,0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于 k 的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？
示例 1： 输入： m = 2, n = 3, k = 1
输出： 3
示例 2： 输入： m = 3, n = 1, k = 0
输出： 1
提示： 1 &amp;lt;= n,m &amp;lt;= 100 0 &amp;lt;= k &amp;lt;= 20 解题思路 深度优先搜索 从 [0,0] 开始进行深度优先搜索，当针对 k 进行剪枝时，整个矩阵是关于 (i,i) 对称的，所以可以限制搜索方向为右和下。</description>
    </item>
    
    <item>
      <title>Leetcode 650. 只有两个键的键盘</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-650.-%E5%8F%AA%E6%9C%89%E4%B8%A4%E4%B8%AA%E9%94%AE%E7%9A%84%E9%94%AE%E7%9B%98/</link>
      <pubDate>Sun, 19 Sep 2021 12:56:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-650.-%E5%8F%AA%E6%9C%89%E4%B8%A4%E4%B8%AA%E9%94%AE%E7%9A%84%E9%94%AE%E7%9B%98/</guid>
      <description>链接： https://leetcode-cn.com/problems/2-keys-keyboard/
难度： 中等
题目描述 最初记事本上只有一个字符 &#39;A&#39; 。你每次可以对这个记事本进行两种操作：
Copy All（复制全部）：复制这个记事本中的所有字符（不允许仅复制部分字符）。 Paste（粘贴）：粘贴 上一次 复制的字符。 给你一个数字 n ，你需要使用最少的操作次数，在记事本上输出 恰好 n 个 &#39;A&#39; 。返回能够打印出 n 个 &#39;A&#39; 的最少操作次数。
示例 1： 输入： 3
输出： 3
解释：
最初, 只有一个字符 &amp;lsquo;A&amp;rsquo;。
第 1 步, 使用 Copy All 操作。
第 2 步, 使用 Paste 操作来获得 &amp;lsquo;AA&amp;rsquo;。
第 3 步, 使用 Paste 操作来获得 &amp;lsquo;AAA&amp;rsquo;。
示例 2： 输入： n = 1
输出： 0
提示： 1 &amp;lt;= n &amp;lt;= 1000 解题思路 动态规划 为使得每次复制粘贴后的操作总次数最小，则对于复制的子字符串，也要求其操作次数最小，故可以用动态规划求解。</description>
    </item>
    
    <item>
      <title>剑指 Offer 12. 矩阵中的路径</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-12.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Sat, 18 Sep 2021 17:25:16 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-12.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/
难度： 中等
题目描述 给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。
单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。
例如，在下面的 3×4 的矩阵中包含单词 &amp;ldquo;ABCCED&amp;rdquo;（单词中的字母已标出）。
示例 1： 输入： board = [[&amp;ldquo;A&amp;rdquo;,&amp;ldquo;B&amp;rdquo;,&amp;ldquo;C&amp;rdquo;,&amp;ldquo;E&amp;rdquo;],[&amp;ldquo;S&amp;rdquo;,&amp;ldquo;F&amp;rdquo;,&amp;ldquo;C&amp;rdquo;,&amp;ldquo;S&amp;rdquo;],[&amp;ldquo;A&amp;rdquo;,&amp;ldquo;D&amp;rdquo;,&amp;ldquo;E&amp;rdquo;,&amp;ldquo;E&amp;rdquo;]], word = &amp;ldquo;ABCCED&amp;rdquo;
输出： true
示例 2： 输入： board = [[&amp;ldquo;a&amp;rdquo;,&amp;ldquo;b&amp;rdquo;],[&amp;ldquo;c&amp;rdquo;,&amp;ldquo;d&amp;rdquo;]], word = &amp;ldquo;abcd&amp;rdquo;
输出： false
提示： 1 &amp;lt;= board.length &amp;lt;= 200 1 &amp;lt;= board[i].length &amp;lt;= 200 board 和 word 仅由大小写英文字母组成 解题思路 深度优先搜索 遍历整个矩阵，从每个字符开始进行深度优先搜索，当无法找到下一个字符时，及时剪枝。
func exist(board [][]byte, word string) bool { direction := [][]int{ {-1, 0}, {1, 0}, {0, -1}, {0, 1}, } var dfs func(i, j, length int) bool dfs = func(i, j, length int) bool { // 查找到字符串尾 if length == len(word) { return true } // 越界检查 if i &amp;lt; 0 || i &amp;gt;= len(board) || j &amp;lt; 0 || j &amp;gt;= len(board[0]) { return false } // 剪枝 if board[i][j] == &amp;#39;.</description>
    </item>
    
    <item>
      <title>Leetcode 292. Nim 游戏</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-292.-nim-%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Sat, 18 Sep 2021 16:47:38 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-292.-nim-%E6%B8%B8%E6%88%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/nim-game/
难度： 简单
题目描述 你和你的朋友，两个人一起玩 Nim 游戏：
桌子上有一堆石头。 你们轮流进行自己的回合，你作为先手。 每一回合，轮到的人拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。 假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。
示例 1： 输入： n = 4
输出： false
解释： 如果堆中有 4 块石头，那么你永远不会赢得比赛；
因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。
示例 2： 输入： n = 1
输出： true
示例 3： 输入： n = 2
输出： true
注意： 1 &amp;lt;= n &amp;lt;= 231 - 1 解题思路 推导 赢家必须要拿到最后1块石头，所以最后一次可以拿1～3块，则拿到第4块的石头的必输。
赢家可以拿到第5块石头，逼对家拿第4块石头，则可知拿到第8块石头的必输。9、13&amp;hellip;同理，拿到4的倍数的玩家必输。
若初始石头数量是4的倍数，则先手必败；否则，必胜。</description>
    </item>
    
    <item>
      <title>剑指 Offer 11. 旋转数组的最小数字</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-11.-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 17 Sep 2021 17:37:57 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-11.-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/
难度： 简单
题目描述 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。 示例 1： 输入： [3,4,5,1,2]
输出： 1
示例 2： 输入： [2,2,2,0,1]
输出： 0
提示： 1 &amp;lt;= values &amp;lt;= 10000 最多会对 appendTail、deleteHead 进行 10000 次调用 解题思路 遍历 顺序便利，找出最小值。
func minArray(numbers []int) int { min := math.MaxInt32 for _, num := range numbers { if min &amp;gt; num { min = num } } return min } 复杂度 时间复杂度：$ O(N), N = len(numbers) $ 空间复杂度：$ O(1) $ 二分查找 对于数组，每次选出中间元素，和区间右端点比较：</description>
    </item>
    
    <item>
      <title>剑指 Offer 09. 用两个栈实现队列</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-09.-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link>
      <pubDate>Fri, 17 Sep 2021 16:40:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-09.-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/
难度： 简单
题目描述 用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )
示例 1： 输入：
[&amp;ldquo;CQueue&amp;rdquo;,&amp;ldquo;appendTail&amp;rdquo;,&amp;ldquo;deleteHead&amp;rdquo;,&amp;ldquo;deleteHead&amp;rdquo;]
[[],[3],[],[]]
输出： [null,null,3,-1]
示例 2： 输入：
[&amp;ldquo;CQueue&amp;rdquo;,&amp;ldquo;deleteHead&amp;rdquo;,&amp;ldquo;appendTail&amp;rdquo;,&amp;ldquo;appendTail&amp;rdquo;,&amp;ldquo;deleteHead&amp;rdquo;,&amp;ldquo;deleteHead&amp;rdquo;]
[[],[],[5],[2],[],[]]
输出： [null,-1,null,null,5,2]
提示： 1 &amp;lt;= values &amp;lt;= 10000 最多会对 appendTail、deleteHead 进行 10000 次调用 解题思路 出入分离 栈的特点是后进先出。想要取得头部元素，需要将整个栈中元素依次加入另一个栈中，此时，另一个栈中元素的出栈顺序即变成了先进先出。
故使用两个栈，将入栈和出栈的操作分离，分别对应到尾部栈和头部栈：
当一个元素要入栈时，压入尾部栈； 当要出栈时，从头部栈弹出，若头部栈为空，则将尾部栈所有元素加入到头部栈。 type CQueue struct { frontStack *list.List backStack *list.List } func Constructor() CQueue { return CQueue{ frontStack: list.New(), backStack: list.New(), } } func (this *CQueue) AppendTail(value int) { this.</description>
    </item>
    
    <item>
      <title>Leetcode 36. 有效的数独</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-36.-%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</link>
      <pubDate>Fri, 17 Sep 2021 11:22:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-36.-%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</guid>
      <description>链接： https://leetcode-cn.com/problems/valid-sudoku/
难度： 中等
题目描述 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
数字 1-9 在每一行只能出现一次。 数字 1-9 在每一列只能出现一次。 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图） 数独部分空格内已填入了数字，空白格用 &#39;.&#39; 表示。
注意： 一个有效的数独（部分已被填充）不一定是可解的。 只需要根据以上规则，验证已经填入的数字是否有效即可。
示例 1： 输入： board =
[[&amp;#34;5&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;7&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;], ,[&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;5&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;], ,[&amp;#34;.&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;], ,[&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;3&amp;#34;], ,[&amp;#34;4&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;1&amp;#34;], ,[&amp;#34;7&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;], ,[&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;], ,[&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;4&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;5&amp;#34;], ,[&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;7&amp;#34;,&amp;#34;9&amp;#34;]] 输出： true
示例 2： 输入： board =
[[&amp;#34;8&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;7&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;] ,[&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;5&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;] ,[&amp;#34;.&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;] ,[&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;3&amp;#34;] ,[&amp;#34;4&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;1&amp;#34;] ,[&amp;#34;7&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;] ,[&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;] ,[&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;4&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;5&amp;#34;] ,[&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;7&amp;#34;,&amp;#34;9&amp;#34;]] 输出： false
解释： 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</description>
    </item>
    
    <item>
      <title>剑指 Offer 07. 重建二叉树</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-07.-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Fri, 17 Sep 2021 10:45:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-07.-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/
难度： 中等
题目描述 输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。
假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
示例 1： 输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
输出: [3,9,20,null,null,15,7]
示例 2： 输入: preorder = [-1], inorder = [-1]
输出: [-1]
提示： 0 &amp;lt;= 链表长度 &amp;lt;= 10000 解题思路 递归 二叉树的先序遍历的顺序是 根&amp;gt;左&amp;gt;右，而中序遍历顺序为 左&amp;gt;根&amp;gt;右。
故先序遍历的第一个结点即为 根结点，然后在中序遍历中找到根节点，其左侧所有元素位于为左子树，右侧所有元素在右子树。
左右子树均按照上述规则，递归地建立二叉树。
func buildTree(preorder []int, inorder []int) *TreeNode { if len(preorder) == 0 { return nil } this := &amp;amp;TreeNode{ Val: preorder[0], } for i, val := range inorder { if val == preorder[0] { this.</description>
    </item>
    
    <item>
      <title>剑指 Offer 06. 从尾到头打印链表</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-06.-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 16 Sep 2021 22:20:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-06.-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/
难度： 简单
题目描述 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。
示例： 输入： head = [1,3,2]
输出： [2,3,1]
提示： 0 &amp;lt;= 链表长度 &amp;lt;= 10000 解题思路 递归 递归的添加当前节点的元素到子节点返回的数组后面。递归的终止条件为：当前元素不存在，返回空数组。
func reversePrint(head *ListNode) []int { if head == nil { return make([]int, 0) } return append(reversePrint(head.Next), head.Val) } 复杂度 时间复杂度：$ O(N), N = len(list) $ 空间复杂度：$ O(N) $ 栈 遍历链表，依次压栈，之后反转栈中元素即可。
func reversePrint(head *ListNode) []int { if head == nil { return make([]int, 0) } return append(reversePrint(head.Next), head.Val) } 复杂度 时间复杂度：$ O(N), N = len(list) $ 空间复杂度：$ O(N) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 05. 替换空格</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-05.-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</link>
      <pubDate>Thu, 16 Sep 2021 22:15:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-05.-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/
难度： 简单
题目描述 请实现一个函数，把字符串 s 中的每个空格替换成&amp;quot;%20&amp;quot;。
示例： 输入： s = &amp;ldquo;We are happy.&amp;rdquo;
输出： &amp;ldquo;We%20are%20happy.&amp;rdquo;
提示： 0 &amp;lt;= s 的长度 &amp;lt;= 10000 解题思路 模拟 遍历原字符串，将每个字符加入到结果字符串的末尾，遇到 &#39; &#39; 需替换为 &amp;quot;%20&amp;quot;。
func replaceSpace(s string) string { t := make([]byte, 0, len(s)*3) for i := range s { if s[i] == &amp;#39; &amp;#39; { t = append(t, &amp;#34;%20&amp;#34;...) } else { t = append(t, s[i]) } } return string(t) } 复杂度 时间复杂度：$ O(N), N = len(s) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 04. 二维数组中的查找</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-04.-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Thu, 16 Sep 2021 19:42:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-04.-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/
难度： 中等
题目描述 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
示例： 现有矩阵 matrix 如下：
[ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] 给定 target = 5，返回 true。
给定 target = 20，返回 false。
提示： 0 &amp;lt;= n &amp;lt;= 1000 0 &amp;lt;= m &amp;lt;= 1000 解题思路 暴力求解 遍历整个二维数组，寻找该整数。
func findNumberIn2DArray(matrix [][]int, target int) bool { for _, line := range matrix { for _, cell := range line { if cell == target { return true } else if cell &amp;gt; target { break } } } return false } 复杂度 时间复杂度：$ O(nm) $ 空间复杂度：$ O(1) $ 阶梯遍历 从矩阵右上角开始遍历：</description>
    </item>
    
    <item>
      <title>剑指 Offer 03. 数组中重复的数字</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-03.-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Thu, 16 Sep 2021 19:19:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-03.-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/
难度： 简单
题目描述 找出数组中重复的数字。
在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。
示例： 输入：
[2, 3, 1, 0, 2, 5, 3]
输出： 2 或 3
提示： 2 &amp;lt;= n &amp;lt;= 100000 解题思路 哈希 使用哈希表记录数组中的元素是否出现过。遍历数组，如果出现过则返回；否则，在哈希表中标记该元素已出现。
func findRepeatNumber(nums []int) int { appear := make(map[int]struct{}) for _, num := range nums { if _, ok := appear[num]; ok { return num } appear[num] = struct{}{} } return 0 } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ </description>
    </item>
    
    <item>
      <title>Leetcode 162. 寻找峰值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-162.-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</link>
      <pubDate>Wed, 15 Sep 2021 10:11:21 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-162.-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-peak-element/
难度： 中等
题目描述 峰值元素是指其值严格大于左右相邻值的元素。
给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。
你可以假设 nums[-1] = nums[n] = -∞ 。
你必须实现时间复杂度为 O(log n) 的算法来解决此问题。
示例 1： 输入： nums = [1,2,3,1]
输出： 2
解释： 3 是峰值元素，你的函数应该返回其索引 2。
示例 2： 输入： nums = [1,2,1,3,5,6,4]
输出： 1 或 5
解释： 你的函数可以返回索引 1，其峰值元素为 2；
或者返回索引 5， 其峰值元素为 6。
提示： 1 &amp;lt;= nums.length &amp;lt;= 1000 -231 &amp;lt;= nums[i] &amp;lt;= 231 - 1 对于所有有效的 i 都有 nums[i] != nums[i + 1] 解题思路 暴力求解 遍历数组，每个元素均和左右侧元素比较找出峰值元素，边界元素需要特判。</description>
    </item>
    
    <item>
      <title>Leetcode 524. 通过删除字母匹配到字典里最长单词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-524.-%E9%80%9A%E8%BF%87%E5%88%A0%E9%99%A4%E5%AD%97%E6%AF%8D%E5%8C%B9%E9%85%8D%E5%88%B0%E5%AD%97%E5%85%B8%E9%87%8C%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Tue, 14 Sep 2021 17:03:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-524.-%E9%80%9A%E8%BF%87%E5%88%A0%E9%99%A4%E5%AD%97%E6%AF%8D%E5%8C%B9%E9%85%8D%E5%88%B0%E5%AD%97%E5%85%B8%E9%87%8C%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/
难度： 中等
题目描述 给你一个字符串 s 和一个字符串数组 dictionary 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。
如果答案不止一个，返回长度最长且字典序最小的字符串。如果答案不存在，则返回空字符串。
示例 1： 输入： s = &amp;ldquo;abpcplea&amp;rdquo;, dictionary = [&amp;ldquo;ale&amp;rdquo;,&amp;ldquo;apple&amp;rdquo;,&amp;ldquo;monkey&amp;rdquo;,&amp;ldquo;plea&amp;rdquo;]
输出： &amp;ldquo;apple&amp;rdquo;
示例 2： 输入： s = &amp;ldquo;abpcplea&amp;rdquo;, dictionary = [&amp;ldquo;a&amp;rdquo;,&amp;ldquo;b&amp;rdquo;,&amp;ldquo;c&amp;rdquo;]
输出： &amp;ldquo;a&amp;rdquo;
提示： 1 &amp;lt;= s.length &amp;lt;= 1000 1 &amp;lt;= dictionary.length &amp;lt;= 1000 1 &amp;lt;= dictionary[i].length &amp;lt;= 1000 s 和 dictionary[i] 仅由小写英文字母组成 解题思路 暴力求解 遍历字典，对于符合 s 的子序列的每个元素，记录最大长度的最小元素。
func findLongestWord(s string, dictionary []string) string { contains := func(s, sub string) bool { j := 0 for i := 0; i &amp;lt; len(s) &amp;amp;&amp;amp; j &amp;lt; len(sub); i++ { if s[i] == sub[j] { j++ } } if j == len(sub) { return true } return false } maxLen := 0 ans := &amp;#34;&amp;#34; for _, d := range dictionary { if contains(s, d) { if maxLen &amp;lt; len(d) { maxLen = len(d) ans = d } else if maxLen == len(d) &amp;amp;&amp;amp; ans &amp;gt; d { ans = d } } } return ans } 复杂度 时间复杂度：$ O(N*L), N = len(dictionary), L = max(dictionory[i]) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 447. 回旋镖的数量</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-447.-%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F/</link>
      <pubDate>Mon, 13 Sep 2021 10:21:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-447.-%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-boomerangs/
难度： 中等
题目描述 给定平面上 n 对 互不相同 的点 points ，其中 points[i] = [xi, yi] 。回旋镖 是由点 (i, j, k) 表示的元组 ，其中 i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。
返回平面上所有回旋镖的数量。
示例 1： 输入： points = [[0,0],[1,0],[2,0]]
输出： 2
解释： 两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]]
示例 2： 输入： points = [[1,1],[2,2],[3,3]]
输出： 2
示例 3： 输入： points = [[1,1]]
输出： 0
提示： n == points.length 1 &amp;lt;= n &amp;lt;= 500 points[i].</description>
    </item>
    
    <item>
      <title>Leetcode 678. 有效的括号字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-678.-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sun, 12 Sep 2021 23:38:03 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-678.-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/valid-parenthesis-string/
难度： 中等
题目描述 给定一个只包含三种字符的字符串：( ，) 和 *，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：
任何左括号 ( 必须有相应的右括号 )。 任何右括号 ) 必须有相应的左括号 ( 。 左括号 ( 必须在对应的右括号之前 )。 * 可以被视为单个右括号 ) ，或单个左括号 ( ，或一个空字符串。 一个空字符串也被视为有效字符串。 示例 1： 输入: &amp;ldquo;()&amp;rdquo;
输出: True
示例 2： 输入: &amp;ldquo;(*)&amp;rdquo;
输出: True
示例 3： 输入: &amp;ldquo;(*))&amp;rdquo;
输出: True
注意： 字符串大小将在 [1，100] 范围内。 解题思路 栈 使用栈来进行括号的匹配:
每当遇到 ( 和 * ，入栈； 当遇到 ) 时，优先从栈中寻找距栈顶最近的 ( ，以完成配对，然后该 ( 从栈中弹出；当不存在 ( 时，使用 * 代替 ( 配对并弹出，都不存在返回 false。 对字符串完成遍历后，栈中仅剩下 ( 和 * ，此时从栈顶开始，配对消除 (，能全部消除，返回 true，否则返回 false。</description>
    </item>
    
    <item>
      <title>Leetcode 1894. 找到需要补充粉笔的学生编号</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1894.-%E6%89%BE%E5%88%B0%E9%9C%80%E8%A6%81%E8%A1%A5%E5%85%85%E7%B2%89%E7%AC%94%E7%9A%84%E5%AD%A6%E7%94%9F%E7%BC%96%E5%8F%B7/</link>
      <pubDate>Fri, 10 Sep 2021 12:10:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1894.-%E6%89%BE%E5%88%B0%E9%9C%80%E8%A6%81%E8%A1%A5%E5%85%85%E7%B2%89%E7%AC%94%E7%9A%84%E5%AD%A6%E7%94%9F%E7%BC%96%E5%8F%B7/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/
难度： 中等
题目描述 一个班级里有 n 个学生，编号为 0 到 n - 1 。每个学生会依次回答问题，编号为 0 的学生先回答，然后是编号为 1 的学生，以此类推，直到编号为 n - 1 的学生，然后老师会重复这个过程，重新从编号为 0 的学生开始回答问题。
给你一个长度为 n 且下标从 0 开始的整数数组 chalk 和一个整数 k 。一开始粉笔盒里总共有 k 支粉笔。当编号为 i 的学生回答问题时，他会消耗 chalk[i] 支粉笔。如果剩余粉笔数量 严格小于 chalk[i] ，那么学生 i 需要 补充 粉笔。
请你返回需要 补充 粉笔的学生 编号 。
示例 1： 输入： chalk = [5,1,5], k = 22
输出： 0
解释： 学生消耗粉笔情况如下：
编号为 0 的学生使用 5 支粉笔，然后 k = 17 。 编号为 1 的学生使用 1 支粉笔，然后 k = 16 。 编号为 2 的学生使用 5 支粉笔，然后 k = 11 。 编号为 0 的学生使用 5 支粉笔，然后 k = 6 。 编号为 1 的学生使用 1 支粉笔，然后 k = 5 。 编号为 2 的学生使用 5 支粉笔，然后 k = 0 。</description>
    </item>
    
    <item>
      <title>Leetcode 1221. 分割平衡字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1221.-%E5%88%86%E5%89%B2%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 07 Sep 2021 09:47:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1221.-%E5%88%86%E5%89%B2%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/
难度： 简单
题目描述 在一个 平衡字符串 中，&#39;L&#39; 和 &#39;R&#39; 字符的数量是相同的。
给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。
**注意：**分割得到的每个字符串都必须是平衡字符串。
返回可以通过分割得到的平衡字符串的 最大数量 。
示例 1： 输入： s = &amp;ldquo;RLRRLLRLRL&amp;rdquo;
输出： 4
解释： s 可以分割为 &amp;ldquo;RL&amp;rdquo;、&amp;ldquo;RRLL&amp;rdquo;、&amp;ldquo;RL&amp;rdquo;、&amp;ldquo;RL&amp;rdquo; ，每个子字符串中都包含相同数量的 &amp;lsquo;L&amp;rsquo; 和 &amp;lsquo;R&amp;rsquo; 。
示例 2： 输入： s = &amp;ldquo;RLLLLRRRLR&amp;rdquo;
输出： 3
解释： s 可以分割为 &amp;ldquo;RL&amp;rdquo;、&amp;ldquo;LLLRRR&amp;rdquo;、&amp;ldquo;LR&amp;rdquo; ，每个子字符串中都包含相同数量的 &amp;lsquo;L&amp;rsquo; 和 &amp;lsquo;R&amp;rsquo; 。
示例 3： 输入： s = &amp;ldquo;LLLLRRRR&amp;rdquo;
输出： 1
解释： s 只能保持原样 &amp;ldquo;LLLLRRRR&amp;rdquo;.
示例 4： 输入： s = &amp;ldquo;RLRRRLLRLL&amp;rdquo;
输出： 2</description>
    </item>
    
    <item>
      <title>Leetcode 704. 二分查找</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-704.-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Mon, 06 Sep 2021 09:41:51 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-704.-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>链接： https://leetcode-cn.com/problems/binary-search/
难度： 简单
题目描述 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。
示例 1： 输入: nums = [-1,0,3,5,9,12], target = 9
输出: 4
解释: 9 出现在 nums 中并且下标为 4
示例 2： 输入: nums = [-1,0,3,5,9,12], target = 2
输出: -1
解释: 2 不存在 nums 中因此返回 -1
提示： 你可以假设 nums 中的所有元素是不重复的。 n 将在 [1, 10000] 之间。 nums 的每个元素都将在 [-9999, 9999] 之间。 解题思路 二分查找 func search(nums []int, target int) int { for l, r := 0, len(nums); l &amp;lt; r; { mid := (l + r) / 2 if target == nums[mid] { return mid } else if target &amp;lt; nums[mid] { r = mid } else { l = mid + 1 } } return -1 } 复杂度 时间复杂度：$ O(\log N), N = len(nums) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 470. 用 Rand7() 实现 Rand10()</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-470.-%E7%94%A8-rand7-%E5%AE%9E%E7%8E%B0-rand10/</link>
      <pubDate>Sun, 05 Sep 2021 16:27:29 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-470.-%E7%94%A8-rand7-%E5%AE%9E%E7%8E%B0-rand10/</guid>
      <description>链接： https://leetcode-cn.com/problems/implement-rand10-using-rand7/
难度： 中等
题目描述 已有方法 rand7 可生成 1 到 7 范围内的均匀随机整数，试写一个方法 rand10 生成 1 到 10 范围内的均匀随机整数。
不要使用系统的 Math.random() 方法。
示例 1： 输入: 1
输出: [7]
示例 2： 输入: 2
输出: [8,4]
示例 3： 输入: 3
输出: [8,1,10]
提示： rand7 已定义。 传入参数: n 表示 rand10 的调用次数。 进阶： rand7() 调用次数的 期望值 是多少 ? 你能否尽量少调用 rand7() ? 解题思路 rand7 函数等概率的生成 1~7 的随机数，为生成 1~10的随机数，需要等概率的生成 10 的倍数个随机数。
将两次调用 rand7 生成的随机数相乘，将等概率的生成 49 个随机数，将最后 9 个数排除，则前 40 个数字的生成是等概率的，通过简单的模运算即可得到 1~10 的随机数。</description>
    </item>
    
    <item>
      <title>剑指 Offer 10- I. 斐波那契数列</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-10-i.-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</link>
      <pubDate>Sat, 04 Sep 2021 08:01:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-10-i.-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/
难度： 简单
题目描述 写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：
F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), 其中 N &amp;gt; 1. 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
示例 1： 输入： n = 2
输出： 1
示例 2： 输入： n = 5
输出： 5
提示： 0 &amp;lt;= n &amp;lt;= 100 解题思路 动态规划 动态规划的状态转移方程已在题目中给出，使用三个变量降低空间复杂度。
func fib(n int) int { const MOD = 1e9 + 7 dp := []int{0, 1, 0} if n &amp;lt; 2 { return dp[n] } for i := 2; i &amp;lt;= n; i++ { dp[2] = (dp[0] + dp[1]) % MOD dp[0], dp[1] = dp[1], dp[2] } return dp[2] } 复杂度 时间复杂度：$ O(n) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>排序</title>
      <link>https://xianlianghe0123.github.io/p/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 03 Sep 2021 16:15:57 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E6%8E%92%E5%BA%8F/</guid>
      <description>冒泡排序 func BubbleSort(arr []int) { for i := 0; i &amp;lt; len(arr); i++ { for j := 0; j &amp;lt; len(arr)-1-i; j++ { if arr[j] &amp;gt; arr[j+1] { arr[j], arr[j+1] = arr[j+1], arr[j] } } } } 复杂度 时间复杂度：$ O(N^2) $ 空间复杂度：$ O(1) $ 选择排序 func ChoiceSort(arr []int) { for i := 0; i &amp;lt; len(arr); i++ { minPos := i for j := i + 1; j &amp;lt; len(arr); j++ { if arr[minPos] &amp;gt; arr[j] { minPos = j } } arr[i], arr[minPos] = arr[minPos], arr[i] } } 复杂度 时间复杂度：$ O(N^2) $ 空间复杂度：$ O(1) $ 插入排序 func InsertSort(arr []int) { for i := 1; i &amp;lt; len(arr); i++ { num := arr[i] j := i - 1 for ; j &amp;gt;= 0; j-- { if num &amp;lt; arr[j] { arr[j+1] = arr[j] } else { break } } arr[j+1] = num } } 复杂度 时间复杂度：$ O(N^2) $ 空间复杂度：$ O(1) $ 归并排序 func MergeSort(arr []int) { var mergeSort func(l, r int) mergeSort = func(l, r int) { if r-l &amp;lt;= 1 { return } mid := (l + r) / 2 mergeSort(l, mid) mergeSort(mid, r) mergeSlice := make([]int, 0, r-l) j := mid for i := l; i &amp;lt; mid; { if j &amp;lt; r &amp;amp;&amp;amp; arr[j] &amp;lt; arr[i] { mergeSlice = append(mergeSlice, arr[j]) j++ } else { mergeSlice = append(mergeSlice, arr[i]) i++ } } for ; j &amp;lt; r; j++ { mergeSlice = append(mergeSlice, arr[j]) } copy(arr[l:], mergeSlice) } mergeSort(0, len(arr)) } 复杂度 时间复杂度：$ O(N\log N) $ 空间复杂度：$ O(N) $ 堆排序 func HeapSort(arr []int) { // 建堆 for i := len(arr)/2 - 1; i &amp;gt;= 0; i-- { for father := i; ; { greater := father&amp;lt;&amp;lt;1 + 1 if greater &amp;gt;= len(arr) { break } if greater+1 &amp;lt; len(arr) &amp;amp;&amp;amp; arr[greater+1] &amp;gt; arr[greater] { greater += 1 } if arr[father] &amp;lt; arr[greater] { arr[father], arr[greater] = arr[greater], arr[father] } father = greater } } // 排序 for i := len(arr) - 1; i &amp;gt; 0; i-- { arr[0], arr[i] = arr[i], arr[0] for father := 0; ; { greater := father&amp;lt;&amp;lt;1 + 1 if greater &amp;gt;= i { break } if greater+1 &amp;lt; i &amp;amp;&amp;amp; arr[greater+1] &amp;gt; arr[greater] { greater += 1 } if arr[father] &amp;lt; arr[greater] { arr[father], arr[greater] = arr[greater], arr[father] } father = greater } } } 复杂度 时间复杂度：$ O(N\log N) $ 空间复杂度：$ O(1) $ 快速排序 func QuickSort(arr []int) { var quickSort func(l, r int) quickSort = func(l, r int) { if l &amp;gt;= r { return } i := l for j := l; j &amp;lt; r; j++ { if arr[j] &amp;lt;= arr[r-1] { arr[i], arr[j] = arr[j], arr[i] i++ } } quickSort(l, i-1) quickSort(i, r) } quickSort(0, len(arr)) } 复杂度 时间复杂度：$ O(N\log N) $ 空间复杂度：$ O(\log N) $ </description>
    </item>
    
    <item>
      <title>面试题 17.14. 最小K个数</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.14.-%E6%9C%80%E5%B0%8Fk%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Fri, 03 Sep 2021 11:30:22 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.14.-%E6%9C%80%E5%B0%8Fk%E4%B8%AA%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/smallest-k-lcci/
难度： 中等
题目描述 设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。
示例： 输入： arr = [1,3,5,7,2,4,6,8], k = 4
输出： [1,2,3,4]
提示： 0 &amp;lt;= len(arr) &amp;lt;= 100000 0 &amp;lt;= k &amp;lt;= min(100000, len(arr)) 解题思路 排序 对原数组排序，返回前 k 个元素。
func smallestK(arr []int, k int) []int { sort.Ints(arr) return arr[:k] } 复杂度 时间复杂度：$ O(N\log N), N = len(arr) $ 空间复杂度：$ O(\log N) $ 堆 构建一个大顶堆，保存前 k 个最小的数。遍历 arr 数组
当堆中元素数量不足 k 时，入堆； 当堆中元素书数量为 k 时，与堆顶元素比较 当堆顶元素为较大时，弹出队顶元素，当前元素入堆 否则，忽略当前元素 遍历结束，返回堆中所有元素。</description>
    </item>
    
    <item>
      <title>剑指 Offer 22. 链表中倒数第k个节点</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-22.-%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Thu, 02 Sep 2021 09:29:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-22.-%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/
难度： 简单
题目描述 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。
例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。
示例： 给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 k = 2.
返回链表 4-&amp;gt;5.
解题思路 顺序遍历 遍历一边链表，得到其长度 length，则 length - k 即为需要跳过的结点，重新遍历，跳过前 length - k 个结点。
func getKthFromEnd(head *ListNode, k int) *ListNode { length := 0 for node := head; node != nil; node = node.Next { length++ } node := head for i := length - k; i &amp;gt; 0; i-- { node = node.</description>
    </item>
    
    <item>
      <title>Leetcode 1109. 航班预订统计</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1109.-%E8%88%AA%E7%8F%AD%E9%A2%84%E8%AE%A2%E7%BB%9F%E8%AE%A1/</link>
      <pubDate>Tue, 31 Aug 2021 10:37:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1109.-%E8%88%AA%E7%8F%AD%E9%A2%84%E8%AE%A2%E7%BB%9F%E8%AE%A1/</guid>
      <description>链接： https://leetcode-cn.com/problems/corporate-flight-bookings/
难度： 中等
题目描述 这里有 n 个航班，它们分别从 1 到 n 进行编号。
有一份航班预订表 bookings ，表中第 i 条预订记录 bookings[i] = [firsti, lasti, seatsi] 意味着在从 firsti 到 lasti （包含 firsti 和 lasti ）的 每个航班 上预订了 seatsi 个座位。
请你返回一个长度为 n 的数组 answer，其中 answer[i] 是航班 i 上预订的座位总数。
示例 1： 输入： bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
输出： [10,55,45,25,25]
解释：
航班编号 1 2 3 4 5
预订记录 1 ：10 10
预订记录 2 ： 20 20</description>
    </item>
    
    <item>
      <title>Leetcode 528. 按权重随机选择</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-528.-%E6%8C%89%E6%9D%83%E9%87%8D%E9%9A%8F%E6%9C%BA%E9%80%89%E6%8B%A9/</link>
      <pubDate>Mon, 30 Aug 2021 10:33:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-528.-%E6%8C%89%E6%9D%83%E9%87%8D%E9%9A%8F%E6%9C%BA%E9%80%89%E6%8B%A9/</guid>
      <description>链接： https://leetcode-cn.com/problems/random-pick-with-weight/
难度： 中等
题目描述 给定一个正整数数组 w ，其中 w[i] 代表下标 i 的权重（下标从 0 开始），请写一个函数 pickIndex ，它可以随机地获取下标 i，选取下标 i 的概率与 w[i] 成正比。
例如，对于 w = [1, 3]，挑选下标 0 的概率为 1 / (1 + 3) = 0.25 （即，25%），而选取下标 1 的概率为 3 / (1 + 3) = 0.75（即，75%）。
也就是说，选取下标 i 的概率为 w[i] / sum(w) 。
示例 1： 输入：
[&amp;ldquo;Solution&amp;rdquo;,&amp;ldquo;pickIndex&amp;rdquo;]
[[[1]],[]]
输出：
[null,0]
解释：
Solution solution = new Solution([1]);
solution.pickIndex(); // 返回 0，因为数组中只有一个元素，所以唯一的选择是返回下标 0。</description>
    </item>
    
    <item>
      <title>Leetcode 1588. 所有奇数长度子数组的和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1588.-%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0%E9%95%BF%E5%BA%A6%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C/</link>
      <pubDate>Sun, 29 Aug 2021 21:32:29 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1588.-%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0%E9%95%BF%E5%BA%A6%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/
难度： 简单
题目描述 给你一个正整数数组 arr ，请你计算所有可能的奇数长度子数组的和。
子数组 定义为原数组中的一个连续子序列。
请你返回 arr 中 所有奇数长度子数组的和 。
示例 1： 输入： arr = [1,4,2,5,3]
输出： 58
解释： 所有奇数长度子数组和它们的和为：
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
我们将所有值求和得到 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58</description>
    </item>
    
    <item>
      <title>Leetcode 1480. 一维数组的动态和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1480.-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%A8%E6%80%81%E5%92%8C/</link>
      <pubDate>Sat, 28 Aug 2021 11:05:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1480.-%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%A8%E6%80%81%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/running-sum-of-1d-array/
难度： 简单
题目描述 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。
请返回 nums 的动态和。
示例 1： 输入： nums = [1,2,3,4]
输出： [1,3,6,10]
解释： 动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4] 。
示例 2： 输入： nums = [1,1,1,1,1]
输出： [1,2,3,4,5]
解释： 动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1] 。
示例 3： 输入： nums = [3,1,2,10,1]
输出： [3,4,6,16,17]
提示： 1 &amp;lt;= nums.length &amp;lt;= 1000 -106 &amp;lt;= nums[i] &amp;lt;= 106 解题思路 模拟 按照题目描述，依次求解动态和的每一项
func runningSum(nums []int) []int { sum := make([]int, len(nums)) for i := 0; i &amp;lt; len(nums); i++ { for j := 0; j &amp;lt;= i; j++ { sum[i] += nums[j] } } return sum } 复杂度 时间复杂度：$ O(N^2), N = len(nums) $ 空间复杂度：$ O(1) $ 动态规划 使用 sum[i] 记录第 i 项动态和，则可以得出：sum[i] = sum[i-1] + nums[i]，依次向后求解。</description>
    </item>
    
    <item>
      <title>Leetcode 881. 救生艇</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-881.-%E6%95%91%E7%94%9F%E8%89%87/</link>
      <pubDate>Thu, 26 Aug 2021 18:56:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-881.-%E6%95%91%E7%94%9F%E8%89%87/</guid>
      <description>链接： https://leetcode-cn.com/problems/boats-to-save-people/
难度： 中等
题目描述 第 i 个人的体重为 people[i]，每艘船可以承载的最大重量为 limit。
每艘船最多可同时载两人，但条件是这些人的重量之和最多为 limit。
返回载到每一个人所需的最小船数。(保证每个人都能被船载)。
示例 1： 输入： people = [1,2], limit = 3
输出： 1
解释： 1 艘船载 (1, 2)
示例 2： 输入： people = [3,2,2,1], limit = 3
输出： 3
解释： 3 艘船分别载 (1, 2), (2) 和 (3)
示例 3： 输入： people = [3,5,3,4], limit = 5
输出： 4
解释： 4 艘船分别载 (3), (3), (4), (5)
提示： 1 &amp;lt;= people.length &amp;lt;= 50000 1 &amp;lt;= people[i] &amp;lt;= limit &amp;lt;= 30000 解题思路 排序 + 贪心 由于每艘船最多仅能搭乘两人，可以按照体重排序，每次选出最重的和最轻的两个人，尝试能否同乘一条船：</description>
    </item>
    
    <item>
      <title>Leetcode 797. 所有可能的路径</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-797.-%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E7%9A%84%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 25 Aug 2021 22:05:55 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-797.-%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E7%9A%84%E8%B7%AF%E5%BE%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/all-paths-from-source-to-target/
难度： 中等
题目描述 给你一个有 n 个节点的 有向无环图（DAG），请你找出所有从节点 0 到节点 n-1 的路径并输出（不要求按特定顺序）
二维数组的第 i 个数组中的单元都表示有向图中 i 号节点所能到达的下一些节点，空就是没有下一个结点了。
译者注：有向图是有方向的，即规定了 a→b 你就不能从 b→a 。
示例 1： 输入： graph = [[1,2],[3],[3],[]]
输出： [[0,1,3],[0,2,3]]
解释： 有两条路径 0 -&amp;gt; 1 -&amp;gt; 3 和 0 -&amp;gt; 2 -&amp;gt; 3
示例 2： 输入： graph = [[4,3,1],[3,2,4],[3],[4],[]]
输出： [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
示例 3： 输入： graph = [[1],[]]
输出： [[0,1]]
示例 4： 输入： graph = [[1,2,3],[2],[3],[]]
输出： [[0,1,2,3],[0,2,3],[0,3]]
示例 5： 输入： graph = [[1,3],[2],[3],[]]</description>
    </item>
    
    <item>
      <title>Leetcode 1646. 获取生成数组中的最大值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1646.-%E8%8E%B7%E5%8F%96%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</link>
      <pubDate>Mon, 23 Aug 2021 10:49:08 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1646.-%E8%8E%B7%E5%8F%96%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/throne-inheritance/
难度： 简单
题目描述 给你一个整数 n 。按下述规则生成一个长度为 n + 1 的数组 nums ：
nums[0] = 0 nums[1] = 1 当 2 &amp;lt;= 2 * i &amp;lt;= n 时，nums[2 * i] = nums[i] 当 2 &amp;lt;= 2 * i + 1 &amp;lt;= n 时，nums[2 * i + 1] = nums[i] + nums[i + 1] 返回生成数组 nums 中的 最大 值。
示例 1： 输入： n = 7
输出： 3
解释： 根据规则：
nums[0] = 0</description>
    </item>
    
    <item>
      <title>Leetcode 443. 压缩字符串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-443.-%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sat, 21 Aug 2021 14:52:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-443.-%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/string-compression/
难度： 中等
题目描述 给你一个字符数组 chars ，请使用下述算法压缩：
从一个空字符串 s 开始。对于 chars 中的每组 连续重复字符 ：
如果这一组长度为 1 ，则将字符追加到 s 中。 否则，需要向 s 追加字符，后跟这一组的长度。 压缩后得到的字符串 s 不应该直接返回 ，需要转储到字符数组 chars 中。需要注意的是，如果组长度为 10 或 10 以上，则在 chars 数组中会被拆分为多个字符。
请在 修改完输入数组后 ，返回该数组的新长度。
你必须设计并实现一个只使用常量额外空间的算法来解决此问题。
示例 1： 输入： chars = [&amp;ldquo;a&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;b&amp;rdquo;,&amp;ldquo;b&amp;rdquo;,&amp;ldquo;c&amp;rdquo;,&amp;ldquo;c&amp;rdquo;,&amp;ldquo;c&amp;rdquo;]
输出： 返回 6 ，输入数组的前 6 个字符应该是：[&amp;ldquo;a&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;b&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;c&amp;rdquo;,&amp;ldquo;3&amp;rdquo;]
解释：
&amp;ldquo;aa&amp;rdquo; 被 &amp;ldquo;a2&amp;rdquo; 替代。&amp;ldquo;bb&amp;rdquo; 被 &amp;ldquo;b2&amp;rdquo; 替代。&amp;ldquo;ccc&amp;rdquo; 被 &amp;ldquo;c3&amp;rdquo; 替代。
示例 2： 输入： chars = [&amp;ldquo;a&amp;rdquo;]
输出： 返回 1 ，输入数组的前 1 个字符应该是：[&amp;ldquo;a&amp;rdquo;]</description>
    </item>
    
    <item>
      <title>Leetcode 541. 反转字符串 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-541.-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-ii/</link>
      <pubDate>Fri, 20 Aug 2021 13:31:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-541.-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/reverse-string-ii/
难度： 简单
题目描述 给定一个字符串 s 和一个整数 k，从字符串开头算起，每 2k 个字符反转前 k 个字符。
如果剩余字符少于 k 个，则将剩余字符全部反转。 如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。
示例 1： 输入： s = &amp;ldquo;abcdefg&amp;rdquo;, k = 2
输出： &amp;ldquo;bacdfeg&amp;rdquo;
示例 2： 输入： s = &amp;ldquo;abcd&amp;rdquo;, k = 2
输出： &amp;ldquo;bacd&amp;rdquo;
提示： 1 &amp;lt;= s.length &amp;lt;= 104 s 仅由小写英文组成 1 &amp;lt;= k &amp;lt;= 104 解题思路 模拟 以长度为 2k 为单位将字符串分割，对于每个区间，反转前 k 个字符。
对于尾部需进行特判，反转区间不足 k 时，反转到尾部为止。
func reverseStr(s string, k int) string { t := []byte(s) for i := 0; i &amp;lt;= len(t); i += (k &amp;lt;&amp;lt; 1) { // 尾部判定 tail := i + k if len(t) &amp;lt; i+k { tail = len(t) } for l, r := i, tail-1; l &amp;lt; r; l, r = l+1, r-1 { t[l], t[r] = t[r], t[l] } } return string(t) } 复杂度 时间复杂度：$ O(N), N = len(s) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 345. 反转字符串中的元音字母</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-345.-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/</link>
      <pubDate>Thu, 19 Aug 2021 10:40:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-345.-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/reverse-vowels-of-a-string/
难度： 简单
题目描述 编写一个函数，以字符串作为输入，反转该字符串中的元音字母。
示例 1： 输入： &amp;ldquo;hello&amp;rdquo;
输出： &amp;ldquo;holle&amp;rdquo;
示例 2： 输入： &amp;ldquo;leetcode&amp;rdquo;
输出： &amp;ldquo;leotcede&amp;rdquo;
提示： 元音字母不包含字母 &amp;ldquo;y&amp;rdquo; 。 解题思路 双指针 使用两个指针 i, j 分别从字符串首尾向中间遍历：
遇到非元音字母向中间靠拢； i, j 两个指针都指向元音字母时，交换两个指针指向的字母并向中靠拢 最终两个指针相遇时停止，元音字母反转完毕。
func reverseVowels(s string) string { t := []byte(s) isVowel := map[byte]bool{ &amp;#39;a&amp;#39;: true, &amp;#39;A&amp;#39;: true, &amp;#39;e&amp;#39;: true, &amp;#39;E&amp;#39;: true, &amp;#39;i&amp;#39;: true, &amp;#39;I&amp;#39;: true, &amp;#39;o&amp;#39;: true, &amp;#39;O&amp;#39;: true, &amp;#39;u&amp;#39;: true, &amp;#39;U&amp;#39;: true, } for i, j := 0, len(s)-1; i &amp;lt; j; { if !</description>
    </item>
    
    <item>
      <title>Leetcode 551. 学生出勤记录 I</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-551.-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95-i/</link>
      <pubDate>Tue, 17 Aug 2021 10:51:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-551.-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95-i/</guid>
      <description>链接： https://leetcode-cn.com/problems/student-attendance-record-i/
难度： 简单
题目描述 给你一个字符串 s 表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：
&#39;A&#39;：Absent，缺勤
&#39;L&#39;：Late，迟到
&#39;P&#39;：Present，到场
如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：
按 总出勤 计，学生缺勤（&#39;A&#39;）严格 少于两天。 学生 不会 存在 连续 3 天或 3 天以上的迟到（&#39;L&#39;）记录。 如果学生可以获得出勤奖励，返回 true ；否则，返回 false 。
示例 1： 输入： s = &amp;ldquo;PPALLP&amp;rdquo; 输出： true 解释： 学生缺勤次数少于 2 次，且不存在 3 天或以上的连续迟到记录。 示例 2： 输入： s = &amp;ldquo;PPALLL&amp;rdquo; 输出： false 解释： 学生最后三天连续迟到，所以不满足出勤奖励的条件。 提示： 1 &amp;lt;= s.length &amp;lt;= 1000 s[i] 为 &#39;A&#39;、&#39;L&#39; 或 &#39;P&#39; 解题思路 计数 遍历字符串，每次针对缺和迟到做如下处理:
每次遇到 &#39;A&#39; , 缺勤次数+1； 每次遇到 &#39;L&#39; , 迟到次数+1，由于连续迟到才会得不到奖励，故每当遇到 &#39;A&#39; 和 &#39;P&#39; 时，连续迟到次数会被打断，故将连续迟到次数清 0。 每次循环后判断缺勤次数和连续迟到次数，以确定能否得到奖励</description>
    </item>
    
    <item>
      <title>Leetcode 526. 优美的排列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-526.-%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97/</link>
      <pubDate>Mon, 16 Aug 2021 22:54:27 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-526.-%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/beautiful-arrangement/
难度： 中等
题目描述 假设有从 1 到 N 的 N 个整数，如果从这 N 个数字中成功构造出一个数组，使得数组的第 i 位 (1 &amp;lt;= i &amp;lt;= N) 满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。条件：
第 i 位的数字能被 i 整除 i 能被第 i 位上的数字整除 现在给定一个整数 N，请问可以构造多少个优美的排列？
示例： 输入: 2
输出: 2
解释:
第 1 个优美的排列是 [1, 2]:
第 1 个位置（i=1）上的数字是1，1能被 i（i=1）整除
第 2 个位置（i=2）上的数字是2，2能被 i（i=2）整除
第 2 个优美的排列是 [2, 1]:
第 1 个位置（i=1）上的数字是2，2能被 i（i=1）整除
第 2 个位置（i=2）上的数字是1，i（i=2）能被 1 整除
说明： N 是一个正整数，并且不会超过 15。 解题思路 回溯 使用一个数组 arr 记录该排列，另使用一个数组 choice 记录每个数字是否已经被填写到 arr 中。</description>
    </item>
    
    <item>
      <title>Leetcode 576. 出界的路径数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-576.-%E5%87%BA%E7%95%8C%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0/</link>
      <pubDate>Sun, 15 Aug 2021 11:04:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-576.-%E5%87%BA%E7%95%8C%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/out-of-boundary-paths/
难度： 中等
题目描述 给你一个大小为 m x n 的网格和一个球。球的起始坐标为 [startRow, startColumn] 。你可以将球移到在四个方向上相邻的单元格内（可以穿过网格边界到达网格之外）。你 最多 可以移动 maxMove 次球。
给你五个整数 m、n、maxMove、startRow 以及 startColumn ，找出并返回可以将球移出边界的路径数量。因为答案可能非常大，返回对 109 + 7 取余 后的结果。
示例 1： &amp;lt;img src=&amp;quot;/img/576.out_of_boundary_paths_1.png&amp;quot;, width=&amp;ldquo;500px&amp;rdquo;&amp;gt;
输入： m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0
输出： 6
示例 2： &amp;lt;img src=&amp;quot;/img/576.out_of_boundary_paths_2.png&amp;quot;, width=&amp;ldquo;500px&amp;rdquo;&amp;gt;
输入： m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1</description>
    </item>
    
    <item>
      <title>Leetcode 1583. 统计不开心的朋友</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1583.-%E7%BB%9F%E8%AE%A1%E4%B8%8D%E5%BC%80%E5%BF%83%E7%9A%84%E6%9C%8B%E5%8F%8B/</link>
      <pubDate>Sat, 14 Aug 2021 10:51:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1583.-%E7%BB%9F%E8%AE%A1%E4%B8%8D%E5%BC%80%E5%BF%83%E7%9A%84%E6%9C%8B%E5%8F%8B/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-unhappy-friends/
难度： 中等
题目描述 给你一份 n 位朋友的亲近程度列表，其中 n 总是 偶数 。
对每位朋友 i，preferences[i] 包含一份 按亲近程度从高到低排列 的朋友列表。换句话说，排在列表前面的朋友与 i 的亲近程度比排在列表后面的朋友更高。每个列表中的朋友均以 0 到 n-1 之间的整数表示。
所有的朋友被分成几对，配对情况以列表 pairs 给出，其中 pairs[i] = [xi, yi] 表示 xi 与 yi 配对，且 yi 与 xi 配对。
但是，这样的配对情况可能会是其中部分朋友感到不开心。在 x 与 y 配对且 u 与 v 配对的情况下，如果同时满足下述两个条件，x 就会不开心：
x 与 u 的亲近程度胜过 x 与 y，且 u 与 x 的亲近程度胜过 u 与 v 返回 不开心的朋友的数目 。
示例 1： 输入： n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]</description>
    </item>
    
    <item>
      <title>Leetcode 516. 最长回文子序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-516.-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Thu, 12 Aug 2021 11:16:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-516.-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-palindromic-subsequence/
难度： 中等
题目描述 给你一个字符串 s ，找出其中最长的回文子序列，并返回该序列的长度。
子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。
示例 1： 输入： s = &amp;ldquo;bbbab&amp;rdquo;
输出： 4
解释： 一个可能的最长回文子序列为 &amp;ldquo;bbbb&amp;rdquo; 。
示例 2： 输入： s = &amp;ldquo;cbbd&amp;rdquo;
输出： 2
解释： 一个可能的最长回文子序列为 &amp;ldquo;bb&amp;rdquo; 。
注意： 1 &amp;lt;= s.length &amp;lt;= 1000 s 仅由小写英文字母组成 解题思路 动态规划 该题可以转化为寻找原字符串 s 和倒序字符串 s&#39; 的最长公共子序列问题。使用动态规划求解，dp[i][j] 表示以下标 i, j 结尾的前缀字串最长公共子序列的长度，状态转移方程如下：
当 s[i] == s&#39;[j]，dp[i][j] = dp[i-1][j-1] + 1 当 s[i] == s&#39;[j]，dp[i][j] = max(dp[i-1][j], dp[i][j-1] 每次状态转移时仅依赖当前行和上一行，故可以使用滚动数组降低空间复杂度。
func longestPalindromeSubseq(s string) int { dp := [][]int{ make([]int, len(s)+1), make([]int, len(s)+1), } last := 1 cur := 0 for i := 0; i &amp;lt; len(s); i++ { cur, last = last, cur for j := 0; j &amp;lt; len(s); j++ { if s[i] == s[len(s)-1-j] { dp[cur][j+1] = dp[last][j] + 1 } else if dp[cur][j] &amp;gt; dp[last][j+1] { dp[cur][j+1] = dp[cur][j] } else { dp[cur][j+1] = dp[last][j+1] } } } return dp[cur][len(s)] } 复杂度 时间复杂度：$ O(N^2), N = len(s) $ 空间复杂度：$ O(N) $ </description>
    </item>
    
    <item>
      <title>Leetcode 413. 等差数列划分</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-413.-%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86/</link>
      <pubDate>Tue, 10 Aug 2021 10:42:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-413.-%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86/</guid>
      <description>链接： https://leetcode-cn.com/problems/arithmetic-slices/
难度： 中等
题目描述 如果一个数列 至少有三个元素 ，并且任意两个相邻元素之差相同，则称该数列为等差数列。
例如，[1,3,5,7,9]、[7,7,7,7] 和 [3,-1,-5,-9] 都是等差数列。 给你一个整数数组 nums ，返回数组 nums 中所有为等差数组的 子数组 个数。
子数组 是数组中的一个连续序列。
示例 1： 输入： nums = [1,2,3,4]
输出： 3
解释： nums 中有三个子等差数组：[1, 2, 3]、[2, 3, 4] 和 [1,2,3,4] 自身。
示例 2： 输入： nums = [1]
输出： 0
提示： 1 &amp;lt;= nums.length &amp;lt;= 5000 -1000 &amp;lt;= nums[i] &amp;lt;= 1000 解题思路 数学 对于一个等差数列数组，其长度为 n (n ≥ 3)，其等差数列 子数组 的数量由长度为 3, ..., n 的子数组构成，对应的 子数组 数量为 n-2, .</description>
    </item>
    
    <item>
      <title>Leetcode 313. 超级丑数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-313.-%E8%B6%85%E7%BA%A7%E4%B8%91%E6%95%B0/</link>
      <pubDate>Mon, 09 Aug 2021 11:00:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-313.-%E8%B6%85%E7%BA%A7%E4%B8%91%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/super-ugly-number/
难度： 中等
题目描述 超级丑数 是一个正整数，并满足其所有质因数都出现在质数数组 primes 中。
给你一个整数 n 和一个整数数组 primes ，返回第 n 个 超级丑数 。
题目数据保证第 n 个 超级丑数 在 32-bit 带符号整数范围内。
示例 1： 输入： n = 12, primes = [2,7,13,19]
输出： 32
解释： 给定长度为 4 的质数数组 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。
示例 2： 输入： n = 1, primes = [2,3,5]
输出： 1
解释： 1 不含质因数，因此它的所有质因数都在质数数组 primes = [2,3,5] 中。
注意： 1 &amp;lt;= n &amp;lt;= 106 1 &amp;lt;= primes.</description>
    </item>
    
    <item>
      <title>Leetcode 1137. 第 N 个泰波那契数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1137.-%E7%AC%AC-n-%E4%B8%AA%E6%B3%B0%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</link>
      <pubDate>Sun, 08 Aug 2021 09:18:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1137.-%E7%AC%AC-n-%E4%B8%AA%E6%B3%B0%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/n-th-tribonacci-number/
难度： 简单
题目描述 泰波那契序列 Tn 定义如下： T0 = 0, T1 = 1, T2 = 1, 且在 n &amp;gt;= 0 的条件下 Tn+3 = Tn + Tn+1 + Tn+2
给你整数 n，请返回第 n 个泰波那契数 Tn 的值。
示例 1： 输入： n = 4
输出： 4
解释：
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4
示例 2： 输入： n = 25 输出： 1389537</description>
    </item>
    
    <item>
      <title>Leetcode 457. 环形数组是否存在循环</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-457.-%E7%8E%AF%E5%BD%A2%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sat, 07 Aug 2021 19:33:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-457.-%E7%8E%AF%E5%BD%A2%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%BE%AA%E7%8E%AF/</guid>
      <description>链接： https://leetcode-cn.com/problems/circular-array-loop/
难度： 中等
题目描述 存在一个不含 0 的 环形 数组 nums ，每个 nums[i] 都表示位于下标 i 的角色应该向前或向后移动的下标个数：
如果 nums[i] 是正数，向前 移动 nums[i] 步 如果 nums[i] 是负数，向后 移动 nums[i] 步 因为数组是 环形 的，所以可以假设从最后一个元素向前移动一步会到达第一个元素，而第一个元素向后移动一步会到达最后一个元素。
数组中的 循环 由长度为 k 的下标序列 seq ：
遵循上述移动规则将导致重复下标序列 seq[0] -&amp;gt; seq[1] -&amp;gt; ... -&amp;gt; seq[k - 1] -&amp;gt; seq[0] -&amp;gt; ... 所有 nums[seq[j]] 应当不是 全正 就是 全负 k &amp;gt; 1 如果 nums 中存在循环，返回 true ；否则，返回 false 。
示例 1： 输入： nums = [2,-1,1,2,2]</description>
    </item>
    
    <item>
      <title>Leetcode 802. 找到最终的安全状态</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-802.-%E6%89%BE%E5%88%B0%E6%9C%80%E7%BB%88%E7%9A%84%E5%AE%89%E5%85%A8%E7%8A%B6%E6%80%81/</link>
      <pubDate>Thu, 05 Aug 2021 14:10:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-802.-%E6%89%BE%E5%88%B0%E6%9C%80%E7%BB%88%E7%9A%84%E5%AE%89%E5%85%A8%E7%8A%B6%E6%80%81/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-eventual-safe-states/
难度： 中等
题目描述 在有向图中，以某个节点为起始节点，从该点出发，每一步沿着图中的一条有向边行走。如果到达的节点是终点（即它没有连出的有向边），则停止。
对于一个起始节点，如果从该节点出发，无论每一步选择沿哪条有向边行走，最后必然在有限步内到达终点，则将该起始节点称作是 安全 的。
返回一个由图中所有安全的起始节点组成的数组作为答案。答案数组中的元素应当按 升序 排列。
该有向图有 n 个节点，按 0 到 n - 1 编号，其中 n 是 graph 的节点数。图以下述形式给出：graph[i] 是编号 j 节点的一个列表，满足 (i, j) 是图的一条有向边。
示例 1： 输入： graph = [[1,2],[2,3],[5],[0],[5],[],[]]
输出： [2,4,5,6]
解释： 示意图如上。
示例 2： 输入： graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
输出： [4]
提示： n == graph.length 1 &amp;lt;= n &amp;lt;= 104 0 &amp;lt;= graph[i].length &amp;lt;= n graph[i] 按严格递增顺序排列。 图中可能包含自环。 图中边的数目在范围 [1, 4 * 104] 内。 解题思路 深度优先搜索 通过分析题目得知，当图无环时，所有结点均为 安全 结点；当图有环时，无法到达环的结点属于 安全 结点。</description>
    </item>
    
    <item>
      <title>Leetcode 611. 有效三角形的个数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-611.-%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Wed, 04 Aug 2021 10:42:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-611.-%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/valid-triangle-number/
难度： 中等
题目描述 给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。
示例： 输入: [2,2,3,4]
输出: 3
解释:
有效的组合是:
2,3,4 (使用第一个 2)
2,3,4 (使用第二个 2)
2,2,3
注意： 数组长度不超过1000。 数组里整数的范围为 [0, 1000]。 解题思路 排序 + 二分查找 构成三角形的前提条件是两边之和小于第三边，也就是说，两个小边之和大于最长的那条边。
故，首先对数组进行排序，然后依次枚举两条小边 x 和 y ，其下标为 i 和 j (不妨假设 i ≤ i，则 x ≤ y)，即得到最大边的取值范围 x+y-1， 通过二分查找，找到其最大值的位置，与 j 相减即得到可取值的数量，求和。
func triangleNumber(nums []int) int { sort.Ints(nums) res := 0 for i := 0; i &amp;lt; len(nums)-2; i++ { if nums[i] == 0 { continue } for j := i + 1; j &amp;lt; len(nums)-1; j++ { pos := sort.</description>
    </item>
    
    <item>
      <title>Leetcode 743. 网络延迟时间</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-743.-%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4/</link>
      <pubDate>Tue, 03 Aug 2021 20:16:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-743.-%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4/</guid>
      <description>链接： https://leetcode-cn.com/problems/network-delay-time/
难度： 中等
题目描述 有 n 个网络节点，标记为 1 到 n 。
给你一个列表 times，表示信号经过 有向 边的传递时间。 times[i] = (ui, vi, wi)，其中 ui 是源节点，vi 是目标节点， wi 是一个信号从源节点传递到目标节点的时间。
现在，从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1 。
示例 1： 输入： times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
输出： 2
示例 2： 输入： times = [[1,2,1]], n = 2, k = 1
输出： 1
示例 3： 输入： times = [[1,2,1]], n = 2, k = 2</description>
    </item>
    
    <item>
      <title>Leetcode 581. 最短无序连续子数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-581.-%E6%9C%80%E7%9F%AD%E6%97%A0%E5%BA%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 03 Aug 2021 14:28:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-581.-%E6%9C%80%E7%9F%AD%E6%97%A0%E5%BA%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/
难度： 中等
题目描述 给你一个整数数组 nums ，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。
请你找出符合题意的 最短 子数组，并输出它的长度。
示例 1： 输入： nums = [2,6,4,8,10,9,15]
输出： 5
解释： 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。
示例 2： 输入： nums = [1,2,3,4]
输出： 0
示例 3： 输入： nums = [1]
输出： 0
提示： 1 &amp;lt;= nums.length &amp;lt;= 104 -105 &amp;lt;= nums[i] &amp;lt;= 105 进阶： 你可以设计一个时间复杂度为 $O(n)$ 的解决方案吗？
解题思路 排序 对于连续子数组以外的元素，其在排序前后位置不会改变，故可以将整个数组排序后，从头和尾开始，依次找到不变的元素加以排除，剩余元素就是 最短 连续子数组。
func findUnsortedSubarray(nums []int) int { sortedNum := make([]int, len(nums)) copy(sortedNum, nums) sort.</description>
    </item>
    
    <item>
      <title>Leetcode 1337. 矩阵中战斗力最弱的 K 行</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1337.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E6%88%98%E6%96%97%E5%8A%9B%E6%9C%80%E5%BC%B1%E7%9A%84-k-%E8%A1%8C/</link>
      <pubDate>Sun, 01 Aug 2021 09:54:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1337.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E6%88%98%E6%96%97%E5%8A%9B%E6%9C%80%E5%BC%B1%E7%9A%84-k-%E8%A1%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/
难度： 简单
题目描述 给你一个大小为 m * n 的矩阵 mat，矩阵由若干军人和平民组成，分别用 1 和 0 表示。
请你返回矩阵中战斗力最弱的 k 行的索引，按从最弱到最强排序。
如果第 i 行的军人数量少于第 j 行，或者两行军人数量相同但 i 小于 j，那么我们认为第 i 行的战斗力比第 j 行弱。
军人 总是 排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。
示例 1： 输入： mat =
[[1,1,0,0,0],
[1,1,1,1,0],
[1,0,0,0,0],
[1,1,0,0,0],
[1,1,1,1,1]],
k = 3
输出： [2,0,3]
解释：
每行中的军人数目： 行 0 -&amp;gt; 2
行 1 -&amp;gt; 4
行 2 -&amp;gt; 1
行 3 -&amp;gt; 2</description>
    </item>
    
    <item>
      <title>Leetcode 987. 二叉树的垂序遍历</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-987.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9E%82%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 31 Jul 2021 12:57:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-987.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9E%82%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>链接： https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/
难度： 困难
题目描述 给你二叉树的根结点 root ，请你设计算法计算二叉树的 垂序遍历 序列。
对位于 (row, col) 的每个结点而言，其左右子结点分别位于 (row + 1, col - 1) 和 (row + 1, col + 1) 。树的根结点位于 (0, 0) 。
二叉树的 垂序遍历 从最左边的列开始直到最右边的列结束，按列索引每一列上的所有结点，形成一个按出现位置从上到下排序的有序列表。如果同行同列上有多个结点，则按结点的值从小到大进行排序。
返回二叉树的 垂序遍历 序列。
示例 1： 输入： root = [3,9,20,null,null,15,7]
输出： [[9],[3,15],[20],[7]]
解释：
列 -1 ：只有结点 9 在此列中。
列 0 ：只有结点 3 和 15 在此列中，按从上到下顺序。
列 1 ：只有结点 20 在此列中。
列 2 ：只有结点 7 在此列中。
示例 2： 输入： root = [1,2,3,4,5,6,7]</description>
    </item>
    
    <item>
      <title>Leetcode 171. Excel表列序号</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-171.-excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/</link>
      <pubDate>Fri, 30 Jul 2021 10:58:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-171.-excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/</guid>
      <description>链接： https://leetcode-cn.com/problems/excel-sheet-column-number/
难度： 简单
题目描述 给你一个字符串 columnTitle ，表示 Excel 表格中的列名称。返回该列名称对应的列序号。
例如，
A -&amp;gt; 1
B -&amp;gt; 2
C -&amp;gt; 3
&amp;hellip;
Z -&amp;gt; 26
AA -&amp;gt; 27
AB -&amp;gt; 28
&amp;hellip;
示例 1： 输入: columnTitle = &amp;ldquo;A&amp;rdquo;
输出: 1
示例 2： 输入: columnTitle = &amp;ldquo;AB&amp;rdquo;
输出: 28
示例 3： 输入: columnTitle = &amp;ldquo;ZY&amp;rdquo;
输出: 701
示例 4： 输入: columnTitle = &amp;ldquo;FXSHRXW&amp;rdquo;
输出: 2147483647
解题思路 数学 进制转换，将一个26进制的数转换为10进制。
func titleToNumber(columnTitle string) int { res := 0 for i := 0; i &amp;lt; len(columnTitle); i++ { res = res*26 + int(columnTitle[i]-&amp;#39;A&amp;#39;+1) } return res } 复杂度 时间复杂度：$ O(N) , N = len(columnTitle) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 1104. 二叉树寻路</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1104.-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%BB%E8%B7%AF/</link>
      <pubDate>Thu, 29 Jul 2021 20:22:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1104.-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%BB%E8%B7%AF/</guid>
      <description>链接： https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/
难度： 中等
题目描述 在一棵无限的二叉树上，每个节点都有两个子节点，树中的节点 逐行 依次按 “之” 字形进行标记。
如下图所示，在奇数行（即，第一行、第三行、第五行……）中，按从左到右的顺序进行标记；
而偶数行（即，第二行、第四行、第六行……）中，按从右到左的顺序进行标记。
给你树上某一个节点的标号 label，请你返回从根节点到该标号为 label 节点的路径，该路径是由途经的节点标号所组成的。
示例 1： 输入： label = 14
输出： [1,3,4,14]
示例 2： 输入： label = 26
输出： [1,2,6,10,26]
提示： 1 &amp;lt;= label &amp;lt;= 106 解题思路 推导 对于一个完全二叉树，可以快速找到子结点 x 的父结点是 x/2。该题描述的是完全二叉树的一种变种，仅是偶数行的结点整体进行了反转。
可以使用完全二叉树的编号，快速找到父结点，然后推导出在原二叉树中的原编号，加入到结果中。
对于反转后的某一层，其元素为公差为 1 的等差数列，某个数反转后的编号即为当前层首尾元素之和减去当前元素。
func pathInZigZagTree(label int) []int { layer := 0 // 层 cnt := layer // 满二叉树结点数量 for label &amp;gt; cnt { layer++ cnt = 2*(cnt+1) - 1 } idx := layer - 1 res := make([]int, layer) num := label // 完全二叉树编号 if layer&amp;amp;1 == 0 { num = cnt/2 + 1 + cnt - label } for layer &amp;gt; 0 { if layer&amp;amp;1 == 0 { // 偶数层，转换 res[idx] = cnt/2 + 1 + cnt - num } else { res[idx] = num } idx-- num /= 2 layer-- cnt /= 2 } return res } 复杂度 时间复杂度：$ O(logN)), N = label $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>Leetcode 863. 二叉树中所有距离为 K 的结点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-863.-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E6%89%80%E6%9C%89%E8%B7%9D%E7%A6%BB%E4%B8%BA-k-%E7%9A%84%E7%BB%93%E7%82%B9/</link>
      <pubDate>Wed, 28 Jul 2021 11:09:17 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-863.-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E6%89%80%E6%9C%89%E8%B7%9D%E7%A6%BB%E4%B8%BA-k-%E7%9A%84%E7%BB%93%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/
难度： 中等
题目描述 给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。
返回到目标结点 target 距离为 K 的所有结点的值的列表。 答案可以以任何顺序返回。
示例： 输入：root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
输出：[7,4,1]
解释：
所求结点为与目标结点（值为 5）距离为 2 的结点，值分别为 7，4，以及 1
注意，输入的 &amp;ldquo;root&amp;rdquo; 和 &amp;ldquo;target&amp;rdquo; 实际上是树上的结点。
上面的输入仅仅是对这些对象进行了序列化描述。
提示： 给定的树是非空的。 树上的每个结点都具有唯一的值 0 &amp;lt;= node.val &amp;lt;= 500 。 目标结点 target 是树上的结点。 0 &amp;lt;= K &amp;lt;= 1000 解题思路 深度优先搜索 一次遍历，找到结点 target，同时记录每个结点的父结点，使之构成一张无向图。
然后从 target 结点开始遍历图，找到所有距离为 K 的结点。
注意，不要重复遍历，并进行剪枝。
func distanceK(root *TreeNode, target *TreeNode, k int) []int { father := make(map[*TreeNode]*TreeNode) var dfs func(node *TreeNode) dfs = func(node *TreeNode) { if node.</description>
    </item>
    
    <item>
      <title>Leetcode 671. 二叉树中第二小的节点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-671.-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9/</link>
      <pubDate>Tue, 27 Jul 2021 10:31:04 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-671.-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/
难度： 简单
题目描述 给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。
更正式地说，root.val = min(root.left.val, root.right.val) 总成立。
给出这样的一个二叉树，你需要输出所有节点中的 第二小的值。如果第二小的值不存在的话，输出 -1 。
示例 1： 输入： root = [2,2,5,null,null,5,7]
输出： 5
解释： 最小的值是 2 ，第二小的值是 5 。
示例 2： 输入： root = [2,2,2]
输出： -1
解释： 最小的值是 2, 但是不存在第二小的值。
提示： 树中节点数目在范围 [1, 25] 内 1 &amp;lt;= Node.val &amp;lt;= 231 - 1 对于树中每个节点 root.val == min(root.left.val, root.right.val) 解题思路 深度优先搜索 据题意，树的根结点是最小值，故可以遍历整棵树，使用 min 记录最 第二小的值。
对于每个结点，当该结点的数值小于 min，并且不与根结点相同时，更新 min，一次遍历完成得到 第二小的值。</description>
    </item>
    
    <item>
      <title>Leetcode 1743. 从相邻元素对还原数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1743.-%E4%BB%8E%E7%9B%B8%E9%82%BB%E5%85%83%E7%B4%A0%E5%AF%B9%E8%BF%98%E5%8E%9F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 25 Jul 2021 21:48:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1743.-%E4%BB%8E%E7%9B%B8%E9%82%BB%E5%85%83%E7%B4%A0%E5%AF%B9%E8%BF%98%E5%8E%9F%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/
难度： 中等
题目描述 存在一个由 n 个不同元素组成的整数数组 nums ，但你已经记不清具体内容。好在你还记得 nums 中的每一对相邻元素。
给你一个二维整数数组 adjacentPairs ，大小为 n - 1 ，其中每个 adjacentPairs[i] = [ui, vi] 表示元素 ui 和 vi 在 nums 中相邻。
题目数据保证所有由元素 nums[i] 和 nums[i+1] 组成的相邻元素对都存在于 adjacentPairs 中，存在形式可能是 [nums[i], nums[i+1]] ，也可能是 [nums[i+1], nums[i]] 。这些相邻元素对可以 按任意顺序 出现。
返回 原始数组 nums 。如果存在多种解答，返回 其中任意一个 即可。
示例 1： 输入： adjacentPairs = [[2,1],[3,4],[3,2]]
输出： [1,2,3,4]
解释： 数组的所有相邻元素对都在 adjacentPairs 中。
特别要注意的是，adjacentPairs[i] 只表示两个元素相邻，并不保证其 左-右 顺序。
示例 2： 输入： adjacentPairs = [[4,-2],[1,4],[-3,1]]</description>
    </item>
    
    <item>
      <title>Leetcode 1736. 替换隐藏数字得到的最晚时间</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1736.-%E6%9B%BF%E6%8D%A2%E9%9A%90%E8%97%8F%E6%95%B0%E5%AD%97%E5%BE%97%E5%88%B0%E7%9A%84%E6%9C%80%E6%99%9A%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sat, 24 Jul 2021 12:24:31 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1736.-%E6%9B%BF%E6%8D%A2%E9%9A%90%E8%97%8F%E6%95%B0%E5%AD%97%E5%BE%97%E5%88%B0%E7%9A%84%E6%9C%80%E6%99%9A%E6%97%B6%E9%97%B4/</guid>
      <description>链接： https://leetcode-cn.com/problems/latest-time-by-replacing-hidden-digits/
难度： 简单
题目描述 给你一个字符串 time ，格式为 hh:mm（小时：分钟），其中某几位数字被隐藏（用 ? 表示）。
有效的时间为 00:00 到 23:59 之间的所有时间，包括 00:00 和 23:59 。
替换 time 中隐藏的数字，返回你可以得到的最晚有效时间。
示例 1： 输入： time = &amp;ldquo;2?:?0&amp;rdquo;
输出： &amp;ldquo;23:50&amp;rdquo;
解释： 以数字 &amp;lsquo;2&amp;rsquo; 开头的最晚一小时是 23 ，以 &amp;lsquo;0&amp;rsquo; 结尾的最晚一分钟是 50
示例 2： 输入： time = &amp;ldquo;0?:3?&amp;rdquo;
输出： &amp;ldquo;09:39&amp;rdquo;
示例 3： 输入： time = &amp;ldquo;1?:22&amp;rdquo;
输出： &amp;ldquo;19:22&amp;rdquo;
提示： time 的格式为 hh:mm 题目数据保证你可以由输入的字符串生成有效的时间 解题思路 分类讨论 小时和分钟是完全独立的两个单元，分别针对这两个单元进行判断。
小时的有效范围为 00 ~ 23，十位和个位相互影响：
当十位为 ? 时，若个位小于 4 或者个位也为 ?</description>
    </item>
    
    <item>
      <title>Leetcode 1893. 检查是否区域内所有整数都被覆盖</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1893.-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%8C%BA%E5%9F%9F%E5%86%85%E6%89%80%E6%9C%89%E6%95%B4%E6%95%B0%E9%83%BD%E8%A2%AB%E8%A6%86%E7%9B%96/</link>
      <pubDate>Fri, 23 Jul 2021 10:32:17 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1893.-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%8C%BA%E5%9F%9F%E5%86%85%E6%89%80%E6%9C%89%E6%95%B4%E6%95%B0%E9%83%BD%E8%A2%AB%E8%A6%86%E7%9B%96/</guid>
      <description>链接： https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/
难度： 简单
题目描述 给你一个二维整数数组 ranges 和两个整数 left 和 right 。每个 ranges[i] = [starti, endi] 表示一个从 starti 到 endi 的 闭区间 。
如果闭区间 [left, right] 内每个整数都被 ranges 中 至少一个 区间覆盖，那么请你返回 true ，否则返回 false 。
已知区间 ranges[i] = [starti, endi] ，如果整数 x 满足 starti &amp;lt;= x &amp;lt;= endi ，那么我们称整数 x 被覆盖了。
示例 1： 输入： ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5
输出： true
解释： 2 到 5 的每个整数都被覆盖了：</description>
    </item>
    
    <item>
      <title>Leetcode 138. 复制带随机指针的链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-138.-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 22 Jul 2021 11:22:49 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-138.-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/copy-list-with-random-pointer/
难度： 中等
题目描述 给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。
构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。
例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --&amp;gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random --&amp;gt; y 。
返回复制链表的头节点。
用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：
val：一个表示 Node.val 的整数。 random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为 null 。 你的代码 只 接受原链表的头节点 head 作为传入参数。
示例 1： 输入： head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出： [[7,null],[13,0],[11,4],[10,2],[1,0]]
示例 2： 输入： head = [[1,1],[2,1]]</description>
    </item>
    
    <item>
      <title>剑指 Offer 52. 两个链表的第一个公共节点</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-52.-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</link>
      <pubDate>Wed, 21 Jul 2021 10:43:36 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-52.-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/
难度： 简单
题目描述 输入两个链表，找出它们的第一个公共节点。
如下面的两个链表：
在节点 c1 开始相交。
示例 1： 输入： intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出： Reference of the node with value = 8
输入解释： 相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
示例 2： 输入： intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</description>
    </item>
    
    <item>
      <title>Leetcode 1877. 数组中最大数对和的最小值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1877.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AF%B9%E5%92%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</link>
      <pubDate>Tue, 20 Jul 2021 09:55:22 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1877.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AF%B9%E5%92%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/minimize-maximum-pair-sum-in-array/
难度： 中等
题目描述 一个数对 (a,b) 的 数对和 等于 a + b 。最大数对和 是一个数对数组中最大的 数对和 。
比方说，如果我们有数对 (1,5) ，(2,3) 和 (4,4)，最大数对和 为 max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8 。 给你一个长度为 偶数 n 的数组 nums ，请你将 nums 中的元素分成 n / 2 个数对，使得：
nums 中每个元素 恰好 在 一个 数对中，且 最大数对和 的值 最小 。 请你在最优数对划分的方案下，返回最小的 最大数对和 。
示例 1： 输入： nums = [3,5,2,3]
输出： 7
解释： 数组中的元素可以分为数对 (3,3) 和 (5,2) 。</description>
    </item>
    
    <item>
      <title>Leetcode 1838. 最高频元素的频数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1838.-%E6%9C%80%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0%E7%9A%84%E9%A2%91%E6%95%B0/</link>
      <pubDate>Mon, 19 Jul 2021 10:31:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1838.-%E6%9C%80%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0%E7%9A%84%E9%A2%91%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/
难度： 中等
题目描述 元素的 频数 是该元素在一个数组中出现的次数。
给你一个整数数组 nums 和一个整数 k 。在一步操作中，你可以选择 nums 的一个下标，并将该下标对应元素的值增加 1 。
执行最多 k 次操作后，返回数组中最高频元素的 最大可能频数 。
示例 1： 输入： nums = [1,2,4], k = 5
输出： 3
解释： 对第一个元素执行 3 次递增操作，对第二个元素执 2 次递增操作，此时 nums = [4,4,4] 。
4 是数组中最高频元素，频数是 3 。
示例 2： 输入： nums = [1,4,8,13], k = 5
输出： 2
解释： 存在多种最优解决方案：
对第一个元素执行 3 次递增操作，此时 nums = [4,4,8,13] 。4 是数组中最高频元素，频数是 2 。 对第二个元素执行 4 次递增操作，此时 nums = [1,8,8,13] 。8 是数组中最高频元素，频数是 2 。 对第三个元素执行 5 次递增操作，此时 nums = [1,4,13,13] 。13 是数组中最高频元素，频数是 2 。 示例 3： 输入： nums = [3,9,6], k = 2</description>
    </item>
    
    <item>
      <title>面试题 10.02. 变位词组</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-10.02.-%E5%8F%98%E4%BD%8D%E8%AF%8D%E7%BB%84/</link>
      <pubDate>Sun, 18 Jul 2021 11:32:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-10.02.-%E5%8F%98%E4%BD%8D%E8%AF%8D%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/group-anagrams-lcci/
难度： 中等
题目描述 编写一种方法，对字符串数组进行排序，将所有变位词组合在一起。变位词是指字母相同，但排列不同的字符串。
**注意：**本题相对原题稍作修改
示例： 输入: [&amp;ldquo;eat&amp;rdquo;, &amp;ldquo;tea&amp;rdquo;, &amp;ldquo;tan&amp;rdquo;, &amp;ldquo;ate&amp;rdquo;, &amp;ldquo;nat&amp;rdquo;, &amp;ldquo;bat&amp;rdquo;],
输出:
[
[&amp;ldquo;ate&amp;rdquo;,&amp;ldquo;eat&amp;rdquo;,&amp;ldquo;tea&amp;rdquo;],
[&amp;ldquo;nat&amp;rdquo;,&amp;ldquo;tan&amp;rdquo;],
[&amp;ldquo;bat&amp;rdquo;]
]
解题思路 哈希 &amp;amp; 计数 对于每个字符串，使用数组统计每个字母出现的数字，两个同位词得出的统计数组必然相同，故用该数组作为 key
func groupAnagrams(strs []string) [][]string { cnt := func(s string) (cnt [26]int) { for i := range s { cnt[s[i]-&amp;#39;a&amp;#39;]++ } return } hash := make(map[[26]int][]string) for _, str := range strs { key := cnt(str) hash[key] = append(hash[key], str) } res := make([][]string, 0, len(hash)) for _, v := range hash { res = append(res, v) } return res } 复杂度 时间复杂度：$ O(NL), N = len(strs), L = max(len(str)) $ 空间复杂度：$ O(NL) $ 哈希 &amp;amp; 排序 不同变位词中字母相同，所以将字符串按照字母排序后，其值也一定相同。故可以将其排序后的值作为哈希表的 key，并将其添加进 value 数组中。</description>
    </item>
    
    <item>
      <title>剑指 Offer 42. 连续子数组的最大和</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-42.-%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</link>
      <pubDate>Sat, 17 Jul 2021 13:21:52 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-42.-%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/
难度： 简单
题目描述 输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。
要求时间复杂度为$O(n)$。
示例： 输入: nums = [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
提示： 1 &amp;lt;= arr.length &amp;lt;= 105 -100 &amp;lt;= arr[i] &amp;lt;= 100 解题思路 动态规划 用 dp[i] 记录以 i 为结尾的连续子数组和的最大值，容易得到状态转移方程：
dp[0] = nums[0] dp[i] = max(dp[i-1]+nums[i], nums[i]) 由于每次转移仅涉及到前一个结果，使用变量代替数组降低空间复杂度
func maxSubArray(nums []int) int { if len(nums) == 0 { return 0 } dp := nums[0] max := dp for pre, i := 0, 1; i &amp;lt; len(nums); i++ { pre = dp if pre+nums[i] &amp;gt; nums[i] { dp = pre + nums[i] } else { dp = nums[i] } if max &amp;lt; dp { max = dp } } return max } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(1) $ </description>
    </item>
    
    <item>
      <title>剑指 Offer 53 - I. 在排序数组中查找数字 I</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-53-i.-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97-i/</link>
      <pubDate>Fri, 16 Jul 2021 14:55:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-53-i.-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97-i/</guid>
      <description>链接： https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/
难度： 简单
题目描述 统计一个数字在排序数组中出现的次数。
示例 1： 输入: nums = [5,7,7,8,8,10], target = 8
输出: 2
示例 2： 输入: nums = [5,7,7,8,8,10], target = 6
输出: 0
提示： 0 &amp;lt;= 数组长度 &amp;lt;= 50000 解题思路 顺序查找 顺序遍历，统计数量 target。由于数组有序，当当前元素大于 target时，
func search(nums []int, target int) int { cnt := 0 for _, num := range nums { if num == target { cnt++ } else if num &amp;gt; target { break } } return cnt } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(1) $ 二分查找 二分查找，找到首个等于 target 的元素位置，依次向后遍历到元素不等于 target 为止，记录出现的次数。</description>
    </item>
    
    <item>
      <title>Leetcode 1846. 减小和重新排列数组后的最大元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1846.-%E5%87%8F%E5%B0%8F%E5%92%8C%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</link>
      <pubDate>Thu, 15 Jul 2021 10:33:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1846.-%E5%87%8F%E5%B0%8F%E5%92%8C%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/
难度： 中等
题目描述 给你一个正整数数组 arr 。请你对 arr 执行一些操作（也可以不进行任何操作），使得数组满足以下条件：
arr 中 第一个 元素必须为 1 。 任意相邻两个元素的差的绝对值 小于等于 1 ，也就是说，对于任意的 1 &amp;lt;= i &amp;lt; arr.length （数组下标从 0 开始），都满足 abs(arr[i] - arr[i - 1]) &amp;lt;= 1 。abs(x) 为 x 的绝对值。 你可以执行以下 2 种操作任意次：
减小 arr 中任意元素的值，使其变为一个 更小的正整数 。 重新排列 arr 中的元素，你可以以任意顺序重新排列。 请你返回执行以上操作后，在满足前文所述的条件下，arr 中可能的 最大值 。
示例 1： 输入： arr = [2,2,1,2,1]
输出： 2
解释：
我们可以重新排列 arr 得到 [1,2,2,2,1] ，该数组满足所有条件。
arr 中最大元素为 2 。</description>
    </item>
    
    <item>
      <title>Leetcode 1818. 绝对差值和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1818.-%E7%BB%9D%E5%AF%B9%E5%B7%AE%E5%80%BC%E5%92%8C/</link>
      <pubDate>Wed, 14 Jul 2021 10:34:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1818.-%E7%BB%9D%E5%AF%B9%E5%B7%AE%E5%80%BC%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/minimum-absolute-sum-difference/
难度： 中等
题目描述 给你两个正整数数组 nums1 和 nums2 ，数组的长度都是 n 。
数组 nums1 和 nums2 的 绝对差值和 定义为所有 |nums1[i] - nums2[i]|（0 &amp;lt;= i &amp;lt; n）的 总和（下标从 0 开始）。
你可以选用 nums1 中的 任意一个 元素来替换 nums1 中的 至多 一个元素，以 最小化 绝对差值和。
在替换数组 nums1 中最多一个元素 之后 ，返回最小绝对差值和。因为答案可能很大，所以需要对 109 + 7 取余 后返回。
|x| 定义为：
如果 x &amp;gt;= 0 ，值为 x ，或者 如果 x &amp;lt;= 0 ，值为 -x 示例 1： 输入： nums1 = [1,7,5], nums2 = [2,3,5]</description>
    </item>
    
    <item>
      <title>Leetcode 275. H 指数 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-275.-h-%E6%8C%87%E6%95%B0-ii/</link>
      <pubDate>Mon, 12 Jul 2021 10:50:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-275.-h-%E6%8C%87%E6%95%B0-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/h-index-ii/
难度： 中等
题目描述 给定一位研究者论文被引用次数的数组（被引用次数是非负整数）,数组已经按照 升序排列。编写一个方法，计算出研究者的 h 指数。
h 指数的定义：h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）总共 有 h 篇论文分别被引用了至少 h 次。且其余的 $N - h$ 篇论文每篇被引用次数 不超过 h 次。
例如：某人的 h 指数是 20，这表示他已发表的论文中，每篇被引用了至少 20 次的论文总共有 20 篇。
示例： 输入： citations = [0,1,3,5,6]
输出： 3
解释： 给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 0, 1, 3, 5, 6 次。
由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。
**说明：**如果 h 有多种可能的值，h 指数是其中最大的那个。</description>
    </item>
    
    <item>
      <title>Leetcode 274. H 指数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-274.-h-%E6%8C%87%E6%95%B0/</link>
      <pubDate>Sun, 11 Jul 2021 12:04:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-274.-h-%E6%8C%87%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/h-index/
难度： 中等
题目描述 给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。
h 指数的定义：h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）总共 有 h 篇论文分别被引用了至少 h 次。且其余的 $N - h$ 篇论文每篇被引用次数 不超过 h 次。
例如：某人的 h 指数是 20，这表示他已发表的论文中，每篇被引用了至少 20 次的论文总共有 20 篇。
示例： 输入： citations = [3,0,6,1,5]
输出： 3
解释： 给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。
由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。
**提示：**如果 h 有多种可能的值，h 指数是其中最大的那个。</description>
    </item>
    
    <item>
      <title>Leetcode 981. 基于时间的键值存储</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-981.-%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E9%94%AE%E5%80%BC%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sat, 10 Jul 2021 11:47:18 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-981.-%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E9%94%AE%E5%80%BC%E5%AD%98%E5%82%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/time-based-key-value-store/
难度： 中等
题目描述 创建一个基于时间的键值存储类 TimeMap，它支持下面两个操作：
set(string key, string value, int timestamp) 存储键 key、值 value，以及给定的时间戳 timestamp。
get(string key, int timestamp) 返回先前调用 set(key, value, timestamp_prev) 所存储的值，其中 timestamp_prev &amp;lt;= timestamp。 如果有多个这样的值，则返回对应最大的 timestamp_prev 的那个值。 如果没有值，则返回空字符串（&amp;quot;&amp;quot;）。 示例1： 输入： inputs = [&amp;ldquo;TimeMap&amp;rdquo;,&amp;ldquo;set&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;set&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;get&amp;rdquo;], inputs = [[],[&amp;ldquo;foo&amp;rdquo;,&amp;ldquo;bar&amp;rdquo;,1],[&amp;ldquo;foo&amp;rdquo;,1],[&amp;ldquo;foo&amp;rdquo;,3],[&amp;ldquo;foo&amp;rdquo;,&amp;ldquo;bar2&amp;rdquo;,4],[&amp;ldquo;foo&amp;rdquo;,4],[&amp;ldquo;foo&amp;rdquo;,5]]
输出： [null,null,&amp;ldquo;bar&amp;rdquo;,&amp;ldquo;bar&amp;rdquo;,null,&amp;ldquo;bar2&amp;rdquo;,&amp;ldquo;bar2&amp;rdquo;]
解释：
TimeMap kv;
kv.set(&amp;ldquo;foo&amp;rdquo;, &amp;ldquo;bar&amp;rdquo;, 1); // 存储键 &amp;ldquo;foo&amp;rdquo; 和值 &amp;ldquo;bar&amp;rdquo; 以及时间戳 timestamp = 1
kv.get(&amp;ldquo;foo&amp;rdquo;, 1); // 输出 &amp;ldquo;bar&amp;rdquo;
kv.get(&amp;ldquo;foo&amp;rdquo;, 3); // 输出 &amp;ldquo;bar&amp;rdquo; 因为在时间戳 3 和时间戳 2 处没有对应 &amp;ldquo;foo&amp;rdquo; 的值，所以唯一的值位于时间戳 1 处（即 &amp;gt; &amp;ldquo;bar&amp;rdquo;）</description>
    </item>
    
    <item>
      <title>面试题 17.10. 主要元素</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.10.-%E4%B8%BB%E8%A6%81%E5%85%83%E7%B4%A0/</link>
      <pubDate>Fri, 09 Jul 2021 10:46:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.10.-%E4%B8%BB%E8%A6%81%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-majority-element-lcci/
难度： 简单
题目描述 数组中占比超过一半的元素称之为主要元素。给你一个 整数 数组，找出其中的主要元素。若没有，返回 -1 。请设计时间复杂度为 $O(N)$ 、空间复杂度为 $O(1)$ 的解决方案。
示例 1： 输入： [1,2,5,9,5,9,5,5,5]
输出： 5
示例 2： 输入： [3,2]
输出： -1
示例 3： 输入： [2,2,1,1,1,2,2]
输出： 2
解题思路 哈希计数 遍历数组，记录每个数出现的次数，直到某个数 num 出现的次数大于数组长度的一半则返回 num，否则返回 -1
func majorityElement(nums []int) int { cnt := make(map[int]int) for _, num := range nums { cnt[num]++ if cnt[num] &amp;gt; len(nums)/2 { return num } } return -1 } 复杂度 时间复杂度：$ O(N) $ 空间复杂度：$ O(N) $ 排序 将数组排序，依次统计连续相同数字的数量，直到满足条件为止。</description>
    </item>
    
    <item>
      <title>Leetcode 930. 和相同的二元子数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-930.-%E5%92%8C%E7%9B%B8%E5%90%8C%E7%9A%84%E4%BA%8C%E5%85%83%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 08 Jul 2021 15:11:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-930.-%E5%92%8C%E7%9B%B8%E5%90%8C%E7%9A%84%E4%BA%8C%E5%85%83%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/binary-subarrays-with-sum/
难度： 中等
题目描述 给你一个二元数组 nums ，和一个整数 goal ，请你统计并返回有多少个和为 goal 的 非空 子数组。
子数组 是数组的一段连续部分。
示例 1： 输入： nums = [1,0,1,0,1], goal = 2
输出： 4
解释：
有 4 个满足题目要求的子数组：[1,0,1]、[1,0,1,0]、[0,1,0,1]、[1,0,1]
示例 2： 输入： nums = [0,0,0,0,0], goal = 0
输出： 15
提示： 1 &amp;lt;= nums.length &amp;lt;= 3 * 104 nums[i] 不是 0 就是 1 0 &amp;lt;= goal &amp;lt;= nums.length 解题思路 哈希 假设满足条件的子数组下标为 [i, j) ，则以 i 和 j 为结尾的两个前缀数组的前缀和记作 sum[i]、sum[j] ，有 goal = sum[j] - sum[i]。</description>
    </item>
    
    <item>
      <title>Leetcode 1711. 大餐计数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1711.-%E5%A4%A7%E9%A4%90%E8%AE%A1%E6%95%B0/</link>
      <pubDate>Wed, 07 Jul 2021 10:28:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1711.-%E5%A4%A7%E9%A4%90%E8%AE%A1%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-good-meals/
难度： 中等
题目描述 大餐 是指 恰好包含两道不同餐品 的一餐，其美味程度之和等于 2 的幂。
你可以搭配 任意 两道餐品做一顿大餐。
给你一个整数数组 deliciousness ，其中 deliciousness[i] 是第 i​​​​​​​​​​​​​​ 道餐品的美味程度，返回你可以用数组中的餐品做出的不同 大餐 的数量。结果需要对 109 + 7 取余。
注意，只要餐品下标不同，就可以认为是不同的餐品，即便它们的美味程度相同。
示例 1： 输入： deliciousness = [1,3,5,7,9]
输出： 4
解释： 大餐的美味程度组合为 (1,3) 、(1,7) 、(3,5) 和 (7,9) 。
它们各自的美味程度之和分别为 4 、8 、8 和 16 ，都是 2 的幂。
示例 2: 输入： deliciousness = [1,1,1,3,3,3,7]
输出： 15
解释： 大餐的美味程度组合为 3 种 (1,1) ，9 种 (1,3) ，和 3 种 (1,7) 。</description>
    </item>
    
    <item>
      <title>Leetcode 1418. 点菜展示表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1418.-%E7%82%B9%E8%8F%9C%E5%B1%95%E7%A4%BA%E8%A1%A8/</link>
      <pubDate>Tue, 06 Jul 2021 09:20:22 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1418.-%E7%82%B9%E8%8F%9C%E5%B1%95%E7%A4%BA%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/display-table-of-food-orders-in-a-restaurant/
难度： 中等
题目描述 给你一个数组 orders ，表示客户在餐厅中完成的订单，确切地说， orders[i]=[customerNamei,tableNumberi,foodItemi] ，其中 customerNamei 是客户的姓名，tableNumberi 是客户所在餐桌的桌号，而 foodItemi 是客户点的餐品名称。
请你返回该餐厅的 点菜展示表 。在这张表中，表中第一行为标题，其第一列为餐桌桌号 “Table” ，后面每一列都是按字母顺序排列的餐品名称。接下来每一行中的项则表示每张餐桌订购的相应餐品数量，第一列应当填对应的桌号，后面依次填写下单的餐品数量。
注意：客户姓名不是点菜展示表的一部分。此外，表中的数据行应该按餐桌桌号升序排列。
示例 1： 输入： orders = [[&amp;ldquo;David&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;Ceviche&amp;rdquo;],[&amp;ldquo;Corina&amp;rdquo;,&amp;ldquo;10&amp;rdquo;,&amp;ldquo;Beef Burrito&amp;rdquo;],[&amp;ldquo;David&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;Fried Chicken&amp;rdquo;],[&amp;ldquo;Carla&amp;rdquo;,&amp;ldquo;5&amp;rdquo;,&amp;ldquo;Water&amp;rdquo;],[&amp;ldquo;Carla&amp;rdquo;,&amp;ldquo;5&amp;rdquo;,&amp;ldquo;Ceviche&amp;rdquo;],[&amp;ldquo;Rous&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;Ceviche&amp;rdquo;]]
输出： [[&amp;ldquo;Table&amp;rdquo;,&amp;ldquo;Beef Burrito&amp;rdquo;,&amp;ldquo;Ceviche&amp;rdquo;,&amp;ldquo;Fried Chicken&amp;rdquo;,&amp;ldquo;Water&amp;rdquo;],[&amp;ldquo;3&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;],[&amp;ldquo;5&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;1&amp;rdquo;],[&amp;ldquo;10&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;0&amp;rdquo;]]
解释：
点菜展示表如下所示：
Table,Beef Burrito,Ceviche,Fried Chicken,Water
3 ,0 ,2 ,1 ,0
5 ,0 ,1 ,0 ,1
10 ,1 ,0 ,0 ,0
对于餐桌 3：David 点了 &amp;ldquo;Ceviche&amp;rdquo; 和 &amp;ldquo;Fried Chicken&amp;rdquo;，而 Rous 点了 &amp;ldquo;Ceviche&amp;rdquo;
而餐桌 5：Carla 点了 &amp;ldquo;Water&amp;rdquo; 和 &amp;ldquo;Ceviche&amp;rdquo;
餐桌 10：Corina 点了 &amp;ldquo;Beef Burrito&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Leetcode 726. 原子的数量</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-726.-%E5%8E%9F%E5%AD%90%E7%9A%84%E6%95%B0%E9%87%8F/</link>
      <pubDate>Mon, 05 Jul 2021 20:30:53 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-726.-%E5%8E%9F%E5%AD%90%E7%9A%84%E6%95%B0%E9%87%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-atoms/
难度： 困难
题目描述 给定一个化学式 formula （作为字符串），返回每种原子的数量。
原子总是以一个大写字母开始，接着跟随0个或任意个小写字母，表示原子的名字。
如果数量大于 1，原子后会跟着数字表示原子的数量。如果数量等于 1 则不会跟数字。例如，H2O 和 H2O2 是可行的，但 H1O2 这个表达是不可行的。
两个化学式连在一起是新的化学式。例如 H2O2He3Mg4 也是化学式。
一个括号中的化学式和数字（可选择性添加）也是化学式。例如 (H2O2) 和 (H2O2)3 是化学式。
给定一个化学式 formula ，返回所有原子的数量。格式为：第一个（按字典序）原子的名字，跟着它的数量（如果数量大于 1），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于 1），以此类推。
示例 1： 输入： formula = &amp;ldquo;H2O&amp;rdquo;
输出： &amp;ldquo;H2O&amp;rdquo;
解释：
原子的数量是 {&amp;lsquo;H&amp;rsquo;: 2, &amp;lsquo;O&amp;rsquo;: 1}。
示例 2： 输入： formula = &amp;ldquo;Mg(OH)2&amp;rdquo;
输出： &amp;ldquo;H2MgO2&amp;rdquo;
解释：
原子的数量是 {&amp;lsquo;H&amp;rsquo;: 2, &amp;lsquo;Mg&amp;rsquo;: 1, &amp;lsquo;O&amp;rsquo;: 2}。
示例 3： 输入： formula = &amp;ldquo;K4(ON(SO3)2)2&amp;rdquo;
输出： &amp;ldquo;K4N2O14S4&amp;rdquo;
解释：</description>
    </item>
    
    <item>
      <title>Leetcode 645. 错误的集合</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-645.-%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88/</link>
      <pubDate>Sun, 04 Jul 2021 10:12:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-645.-%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88/</guid>
      <description>链接： https://leetcode-cn.com/problems/set-mismatch/
难度： 简单
题目描述 集合 s 包含从 1 到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 丢失了一个数字 并且 有一个数字重复 。
给定一个数组 nums 代表了集合 S 发生错误后的结果。
请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。
示例 1： 输入： nums = [1,2,2,4]
输出： [2,3]
示例 2： 输入： nums = [1,1]
输出： [1,2]
提示： 2 &amp;lt;= nums.length &amp;lt;= 104 1 &amp;lt;= nums[i] &amp;lt;= 104 解题思路 哈希 利用哈希表记录每个数字是否出现，可以找到重复出现过的数字；遍历哈希表可以找到丢失的数字。
func findErrorNums(nums []int) []int { res := []int{0, 0} exist := make([]bool, len(nums)) for _, num := range nums { if exist[num-1] { res[0] = num } exist[num-1] = true } for num, ok := range exist { if !</description>
    </item>
    
    <item>
      <title>Leetcode 451. 根据字符出现频率排序</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-451.-%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 03 Jul 2021 09:35:21 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-451.-%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/sort-characters-by-frequency/
难度： 中等
题目描述 给定一个字符串，请将字符串里的字符按照出现的频率降序排列。
示例1： 输入:
&amp;ldquo;tree&amp;rdquo;
输出:
&amp;ldquo;eert&amp;rdquo;
解释:
&amp;rsquo;e&amp;rsquo;出现两次，&amp;lsquo;r&amp;rsquo;和&amp;rsquo;t&amp;rsquo;都只出现一次。
因此&amp;rsquo;e&amp;rsquo;必须出现在&amp;rsquo;r&amp;rsquo;和&amp;rsquo;t&amp;rsquo;之前。此外，&amp;ldquo;eetr&amp;quot;也是一个有效的答案。
示例2： 输入:
&amp;ldquo;cccaaa&amp;rdquo;
输出:
&amp;ldquo;cccaaa&amp;rdquo;
解释:
&amp;lsquo;c&amp;rsquo;和&amp;rsquo;a&amp;rsquo;都出现三次。此外，&amp;ldquo;aaaccc&amp;quot;也是有效的答案。
注意&amp;quot;cacaca&amp;quot;是不正确的，因为相同的字母必须放在一起。
示例3： 输入:
&amp;ldquo;Aabb&amp;rdquo;
输出:
&amp;ldquo;bbAa&amp;rdquo;
解释:
此外，&amp;ldquo;bbaA&amp;quot;也是一个有效的答案，但&amp;quot;Aabb&amp;quot;是不正确的。
注意&amp;rsquo;A&amp;rsquo;和&amp;rsquo;a&amp;rsquo;被认为是两种不同的字符。
解题思路 计数+排序 统计每个字符出现的次数，按照统计的次数对字符进行排序，然后按照字符顺序和数量展开。
func frequencySort(s string) string { cnt := make(map[byte]int) for i := 0; i &amp;lt; len(s); i++ { cnt[s[i]]++ } chars := make([]byte, 0, len(s)) for char := range cnt { chars = append(chars, char) } sort.Slice(chars, func(i, j int) bool { return cnt[chars[i]] &amp;gt; cnt[chars[j]] }) res := make([]byte, 0, len(s)) for _, char := range chars { res = append(res, bytes.</description>
    </item>
    
    <item>
      <title>Leetcode 1833. 雪糕的最大数量</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1833.-%E9%9B%AA%E7%B3%95%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</link>
      <pubDate>Fri, 02 Jul 2021 10:28:04 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1833.-%E9%9B%AA%E7%B3%95%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-ice-cream-bars/
难度： 中等
题目描述 夏日炎炎，小男孩 Tony 想买一些雪糕消消暑。
商店中新到 n 支雪糕，用长度为 n 的数组 costs 表示雪糕的定价，其中 costs[i] 表示第 i 支雪糕的现金价格。Tony 一共有 coins 现金可以用于消费，他想要买尽可能多的雪糕。
给你价格数组 costs 和现金量 coins ，请你计算并返回 Tony 用 coins 现金能够买到的雪糕的 最大数量 。
**注意：**Tony 可以按任意顺序购买雪糕。
示例 1： 输入： costs = [1,3,2,4,1], coins = 7
输出： 4
解释： Tony 可以买下标为 0、1、2、4 的雪糕，总价为 1 + 3 + 2 + 1 = 7
示例 2： 输入： costs = [10,6,8,7,7,8], coins = 5
输出： 0</description>
    </item>
    
    <item>
      <title>LCP 07. 传递信息</title>
      <link>https://xianlianghe0123.github.io/p/lcp-07.-%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Thu, 01 Jul 2021 11:14:31 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/lcp-07.-%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF/</guid>
      <description>链接： https://leetcode-cn.com/problems/chuan-di-xin-xi/
难度： 简单
题目描述 小朋友 A 在和 ta 的小伙伴们玩传信息游戏，游戏规则如下：
有 n 名玩家，所有玩家编号分别为 0 ～ n-1，其中小朋友 A 的编号为 0 每个玩家都有固定的若干个可传信息的其他玩家（也可能没有）。传信息的关系是单向的（比如 A 可以向 B 传信息，但 B 不能向 A 传信息）。 每轮信息必须需要传递给另一个人，且信息可重复经过同一个人 给定总玩家数 n，以及按 [玩家编号,对应可传递玩家编号] 关系组成的二维数组 relation。返回信息从小 A (编号 0 ) 经过 k 轮传递到编号为 n-1 的小伙伴处的方案数；若不能到达，返回 0。
示例1： 输入： n = 5, relation = [[0,2],[2,1],[3,4],[2,3],[1,4],[2,0],[0,4]], k = 3
输出： 3
解释： 信息从小 A 编号 0 处开始，经 3 轮传递，到达编号 4。共有 3 种方案，分别是 0-&amp;gt;2-&amp;gt;0-&amp;gt;4， 0-&amp;gt;2-&amp;gt;1-&amp;gt;4， 0-&amp;gt;2-&amp;gt;3-&amp;gt;4。</description>
    </item>
    
    <item>
      <title>剑指 Offer 37. 序列化二叉树</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-37.-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Wed, 30 Jun 2021 15:51:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-37.-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/
难度： 困难
题目描述 请实现两个函数，分别用来序列化和反序列化二叉树。
你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。
提示： 输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。
示例1： 输入： root = [1,2,3,null,null,4,5]
输出： [1,2,3,null,null,4,5]
解题思路 先序遍历 序列化时，先序遍历整个二叉树，将遍历到的每个结点按顺序加入列表中。需要将遍历到的空结点也加入到列表中，作为分割。
反序列化时，按照列表顺序构建二叉树，遇到空结点表示该分支已结束，回到另一个分支处，继续构造结点。
class Codec: def serialize(self, root): &amp;#34;&amp;#34;&amp;#34;Encodes a tree to a single string. :type root: TreeNode :rtype: str &amp;#34;&amp;#34;&amp;#34; list = [] def dfs(node): if node == None: list.append(&amp;#34;None&amp;#34;) else: list.append(str(node.val)) dfs(node.left) dfs(node.right) dfs(root) return &amp;#34;,&amp;#34;.join(list) def deserialize(self, data): &amp;#34;&amp;#34;&amp;#34;Decodes your encoded data to tree. :type data: str :rtype: TreeNode &amp;#34;&amp;#34;&amp;#34; list = data.</description>
    </item>
    
    <item>
      <title>Leetcode 168. Excel表列名称</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-168.-excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</link>
      <pubDate>Tue, 29 Jun 2021 10:26:51 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-168.-excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/excel-sheet-column-title/
难度： 简单
题目描述 给定一个正整数，返回它在 Excel 表中相对应的列名称。
例如，
1 -&amp;gt; A
2 -&amp;gt; B
3 -&amp;gt; C
&amp;hellip;
26 -&amp;gt; Z
27 -&amp;gt; AA
28 -&amp;gt; AB
&amp;hellip;
示例1： 输入: 1
输出: &amp;ldquo;A&amp;rdquo;
示例2： 输入: 28
输出: &amp;ldquo;AB&amp;rdquo;
示例3： 输入: 701
输出: &amp;ldquo;ZY&amp;rdquo;
解题思路 数学 通过分析题意可以得知，该题是一个进制转换，将一个10进制的数转换为26进制。
通过数学方法，逐次模26取余数，即可求得倒序的26进制每一位，反转该序列即可求得转换后的数。
**注意：**该26进制从1开始计数，每次取模前应减1。
func convertToTitle(columnNumber int) string { res := make([]byte, 0, 10) for ; columnNumber &amp;gt; 0; columnNumber /= 26 { columnNumber = columnNumber - 1 res = append(res, &amp;#39;A&amp;#39;+byte((columnNumber)%26)) } for i := 0; i &amp;lt; len(res)/2; i++ { res[i], res[len(res)-1-i] = res[len(res)-1-i], res[i] } return string(res) } 复杂度 时间复杂度：O(log26columnNumber) 空间复杂度：O(log26columnNumber) </description>
    </item>
    
    <item>
      <title>Leetcode 815. 公交路线</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-815.-%E5%85%AC%E4%BA%A4%E8%B7%AF%E7%BA%BF/</link>
      <pubDate>Mon, 28 Jun 2021 10:54:56 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-815.-%E5%85%AC%E4%BA%A4%E8%B7%AF%E7%BA%BF/</guid>
      <description>链接： https://leetcode-cn.com/problems/bus-routes/
难度： 困难
题目描述 给你一个数组 routes ，表示一系列公交线路，其中每个 routes[i] 表示一条公交线路，第 i 辆公交车将会在上面循环行驶。
例如，路线 routes[0] = [1, 5, 7] 表示第 0 辆公交车会一直按序列 1 -&amp;gt; 5 -&amp;gt; 7 -&amp;gt; 1 -&amp;gt; 5 -&amp;gt; 7 -&amp;gt; 1 -&amp;gt; ... 这样的车站路线行驶。 现在从 source 车站出发（初始时不在公交车上），要前往 target 车站。 期间仅可乘坐公交车。
求出 最少乘坐的公交车数量 。如果不可能到达终点车站，返回 -1 。
示例 1： 输入： routes = [[1,2,7],[3,6,7]], source = 1, target = 6
输出： 2
解释： 最优策略是先乘坐第一辆公交车到达车站 7 , 然后换乘第二辆公交车到车站 6 。
示例 2： 输入： routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12</description>
    </item>
    
    <item>
      <title>Leetcode 909. 蛇梯棋</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-909.-%E8%9B%87%E6%A2%AF%E6%A3%8B/</link>
      <pubDate>Sun, 27 Jun 2021 19:07:10 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-909.-%E8%9B%87%E6%A2%AF%E6%A3%8B/</guid>
      <description>链接： https://leetcode-cn.com/problems/snakes-and-ladders/
难度： 中等
题目描述 N x N 的棋盘 board 上，按从 1 到 N*N 的数字给方格编号，编号 从左下角开始，每一行交替方向。
例如，一块 6 x 6 大小的棋盘，编号如下：
r 行 c 列的棋盘，按前述方法编号，棋盘格中可能存在 “蛇” 或 “梯子”；如果 board[r][c] != -1，那个蛇或梯子的目的地将会是 board[r][c]。
玩家从棋盘上的方格 1 （总是在最后一行、第一列）开始出发。
每一回合，玩家需要从当前方格 x 开始出发，按下述要求前进：
选定目标方格：选择从编号 x+1，x+2，x+3，x+4，x+5，或者 x+6 的方格中选出一个目标方格 s ，目标方格的编号 &amp;lt;= N*N。 该选择模拟了掷骰子的情景，无论棋盘大小如何，你的目的地范围也只能处于区间 [x+1, x+6] 之间。 传送玩家：如果目标方格 S 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 S。 注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，你也不会继续移动。 返回达到方格 N*N 所需的最少移动次数，如果不可能，则返回 -1。
示例： 输入： [
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,35,-1,-1,13,-1],
[-1,-1,-1,-1,-1,-1],
[-1,15,-1,-1,-1,-1]]
输出： 4</description>
    </item>
    
    <item>
      <title>Leetcode 752. 打开转盘锁</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-752.-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/</link>
      <pubDate>Fri, 25 Jun 2021 17:34:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-752.-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/</guid>
      <description>链接： https://leetcode-cn.com/problems/open-the-lock/
难度： 中等
题目描述 你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39; 。每个拨轮可以自由旋转：例如把 &#39;9&#39; 变为 &#39;0&#39;，&#39;0&#39; 变为 &#39;9&#39; 。每次旋转都只能旋转一个拨轮的一位数字。
锁的初始数字为 &#39;0000&#39; ，一个代表四个拨轮的数字的字符串。
列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。
字符串 target 代表可以解锁的数字，你需要给出解锁需要的最小旋转次数，如果无论如何不能解锁，返回 -1 。
示例 1： 输入： deadends = [&amp;ldquo;0201&amp;rdquo;,&amp;ldquo;0101&amp;rdquo;,&amp;ldquo;0102&amp;rdquo;,&amp;ldquo;1212&amp;rdquo;,&amp;ldquo;2002&amp;rdquo;], target = &amp;ldquo;0202&amp;rdquo;
输出： 6
解释：
可能的移动序列为 &amp;ldquo;0000&amp;rdquo; -&amp;gt; &amp;ldquo;1000&amp;rdquo; -&amp;gt; &amp;ldquo;1100&amp;rdquo; -&amp;gt; &amp;ldquo;1200&amp;rdquo; -&amp;gt; &amp;ldquo;1201&amp;rdquo; -&amp;gt; &amp;ldquo;1202&amp;rdquo; -&amp;gt; &amp;ldquo;0202&amp;rdquo;。
注意 &amp;ldquo;0000&amp;rdquo; -&amp;gt; &amp;ldquo;0001&amp;rdquo; -&amp;gt; &amp;ldquo;0002&amp;rdquo; -&amp;gt; &amp;ldquo;0102&amp;rdquo; -&amp;gt; &amp;ldquo;0202&amp;rdquo; 这样的序列是不能解锁的，</description>
    </item>
    
    <item>
      <title>剑指 Offer 15. 二进制中1的个数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-15.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Wed, 23 Jun 2021 21:39:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-15.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/
难度： 简单
题目描述 请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。
示例1： 输入： 00000000000000000000000000001011
输出： 3
解释： 输入的二进制串 00000000000000000000000000001011 中，共有三位为 &amp;lsquo;1&amp;rsquo;。
示例 2： 输入： 00000000000000000000000010000000
输出： 1
解释： 输入的二进制串 00000000000000000000000010000000 中，共有一位为 &amp;lsquo;1&amp;rsquo;。
示例 3： 输入： 11111111111111111111111111111101
输出： 31
解释： 输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &amp;lsquo;1&amp;rsquo;。
提示： 输入必须是长度为 32 的 二进制串 。 解题思路 计数 每次统计最右边的一位，并向右移动一位。
func hammingWeight(num uint32) int { cnt := 0 for ; num !</description>
    </item>
    
    <item>
      <title>剑指 Offer 38. 字符串的排列</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-38.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</link>
      <pubDate>Tue, 22 Jun 2021 21:43:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-38.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/
难度： 中等
题目描述 输入一个字符串，打印出该字符串中字符的所有排列。
你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。
示例1： 输入： s = &amp;ldquo;abc&amp;rdquo;
输出： [&amp;ldquo;abc&amp;rdquo;,&amp;ldquo;acb&amp;rdquo;,&amp;ldquo;bac&amp;rdquo;,&amp;ldquo;bca&amp;rdquo;,&amp;ldquo;cab&amp;rdquo;,&amp;ldquo;cba&amp;rdquo;]
提示： 1 &amp;lt;= s 的长度 &amp;lt;= 8 解题思路 回溯 遍历未入栈字符列表，每次选取一个字符入栈，并标记此字符已经入栈，递归的寻找下一个字符，直到所有字符全部入栈，将结果加入集合中。
func permutation(s string) []string { only := make(map[string]bool) choice := make([]bool, len(s)) prefix := make([]byte, 0, len(s)) var backtrack func() backtrack = func() { if len(prefix) == len(s) { only[string(prefix)] = true return } for i := range choice { if choice[i] { continue } prefix = append(prefix, s[i]) choice[i] = true backtrack() choice[i] = false prefix = prefix[:len(prefix)-1] } } backtrack() res := make([]string, 0, 1&amp;lt;&amp;lt;(len(s)-1)) for k := range only { res = append(res, k) } return res } 复杂度 时间复杂度：O(N*N!</description>
    </item>
    
    <item>
      <title>Leetcode 401. 二进制手表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-401.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8/</link>
      <pubDate>Mon, 21 Jun 2021 21:27:36 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-401.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/binary-watch/
难度： 简单
题目描述 二进制手表顶部有 4 个 LED 代表 小时（0-11），底部的 6 个 LED 代表 分钟（0-59）。每个 LED 代表一个 0 或 1，最低位在右侧。
例如，下面的二进制手表读取 &amp;quot;3:25&amp;quot; 。 给你一个整数 turnedOn ，表示当前亮着的 LED 的数量，返回二进制手表可以表示的所有可能时间。你可以 按任意顺序 返回答案。
小时不会以零开头：
例如，&amp;quot;01:00&amp;quot; 是无效的时间，正确的写法应该是 &amp;quot;1:00&amp;quot; 。 分钟必须由两位数组成，可能会以零开头：
例如，&amp;quot;10:2&amp;quot; 是无效的时间，正确的写法应该是 &amp;quot;10:02&amp;quot; 。 示例 1： 输入： turnedOn = 1
输出： [&amp;ldquo;0:01&amp;rdquo;,&amp;ldquo;0:02&amp;rdquo;,&amp;ldquo;0:04&amp;rdquo;,&amp;ldquo;0:08&amp;rdquo;,&amp;ldquo;0:16&amp;rdquo;,&amp;ldquo;0:32&amp;rdquo;,&amp;ldquo;1:00&amp;rdquo;,&amp;ldquo;2:00&amp;rdquo;,&amp;ldquo;4:00&amp;rdquo;,&amp;ldquo;8:00&amp;rdquo;]
示例 2： 输入： turnedOn = 9
输出： []
提示： 0 &amp;lt;= turnedOn &amp;lt;= 10 解题思路 穷举 枚举出所有小时和分钟的合法数，将符合条件的加入到结果列表中
func readBinaryWatch(turnedOn int) []string { res := make([]string, 0, 720) for h := 0; h &amp;lt; 12; h++ { for m := 0; m &amp;lt; 60; m++ { if bits.</description>
    </item>
    
    <item>
      <title>Leetcode 1600. 皇位继承顺序</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1600.-%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Sun, 20 Jun 2021 09:58:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1600.-%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/throne-inheritance/
难度： 中等
题目描述 一个王国里住着国王、他的孩子们、他的孙子们等等。每一个时间点，这个家庭里有人出生也有人死亡。
这个王国有一个明确规定的皇位继承顺序，第一继承人总是国王自己。我们定义递归函数 Successor(x, curOrder) ，给定一个人 x 和当前的继承顺序，该函数返回 x 的下一继承人。
Successor(x, curOrder):
如果 x 没有孩子或者所有 x 的孩子都在 curOrder 中：
如果 x 是国王，那么返回 null
否则，返回 Successor(x 的父亲, curOrder)
否则，返回 x 不在 curOrder 中最年长的孩子
比方说，假设王国由国王，他的孩子 Alice 和 Bob （Alice 比 Bob 年长）和 Alice 的孩子 Jack 组成。
一开始， curOrder 为 [&amp;ldquo;king&amp;rdquo;]. 调用 Successor(king, curOrder) ，返回 Alice ，所以我们将 Alice 放入 curOrder 中，得到 [&amp;quot;king&amp;quot;, &amp;quot;Alice&amp;quot;] 。 调用 Successor(Alice, curOrder) ，返回 Jack ，所以我们将 Jack 放入 curOrder 中，得到 [&amp;quot;king&amp;quot;, &amp;quot;Alice&amp;quot;, &amp;quot;Jack&amp;quot;] 。 调用 Successor(Jack, curOrder) ，返回 Bob ，所以我们将 Bob 放入 curOrder 中，得到 [&amp;quot;king&amp;quot;, &amp;quot;Alice&amp;quot;, &amp;quot;Jack&amp;quot;, &amp;quot;Bob&amp;quot;] 。 调用 Successor(Bob, curOrder) ，返回 null 。最终得到继承顺序为 [&amp;quot;king&amp;quot;, &amp;quot;Alice&amp;quot;, &amp;quot;Jack&amp;quot;, &amp;quot;Bob&amp;quot;] 。 通过以上的函数，我们总是能得到一个唯一的继承顺序。</description>
    </item>
    
    <item>
      <title>Leetcode 852. 山脉数组的峰顶索引</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-852.-%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Tue, 15 Jun 2021 20:49:55 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-852.-%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95/</guid>
      <description>链接： https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/
难度： 简单
题目描述 符合下列属性的数组 arr 称为 山脉数组 ：
arr.length &amp;gt;= 3 存在 i（0 &amp;lt; i &amp;lt; arr.length - 1）使得： arr[0] &amp;lt; arr[1] &amp;lt; &amp;hellip; arr[i-1] &amp;lt; arr[i] arr[i] &amp;gt; arr[i+1] &amp;gt; &amp;hellip; &amp;gt; arr[arr.length - 1] 给你由整数组成的山脉数组 arr ，返回任何满足 arr[0] &amp;lt; arr[1] &amp;lt; ... arr[i - 1] &amp;lt; arr[i] &amp;gt; arr[i + 1] &amp;gt; ... &amp;gt; arr[arr.length - 1] 的下标 i 。
示例 1： 输入： arr = [0,1,0]</description>
    </item>
    
    <item>
      <title>Leetcode 374. 猜数字大小</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-374.-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Mon, 14 Jun 2021 10:50:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-374.-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/guess-number-higher-or-lower/
难度： 简单
题目描述 猜数字游戏的规则如下：
每轮游戏，我都会从 1 到 n 随机选择一个数字。 请你猜选出的是哪个数字。 如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。 你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：
-1：我选出的数字比你猜的数字小 pick &amp;lt; num 1：我选出的数字比你猜的数字大 pick &amp;gt; num 0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick == num 返回我选出的数字。
示例 1： 输入： n = 10, pick = 6
输出： 6
示例 2： 输入： n = 1, pick = 1
输出： 1
示例 3： 输入： n = 2, pick = 1
输出： 1
示例 4： 输入： n = 2, pick = 2</description>
    </item>
    
    <item>
      <title>Leetcode 278. 第一个错误的版本</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-278.-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/</link>
      <pubDate>Sun, 13 Jun 2021 10:25:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-278.-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/</guid>
      <description>链接： https://leetcode-cn.com/problems/first-bad-version/
难度： 简单
题目描述 你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。
假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。
你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。
示例 1： 给定 n = 5，并且 version = 4 是第一个错误的版本。
调用 isBadVersion(3) -&amp;gt; false
调用 isBadVersion(5) -&amp;gt; true
调用 isBadVersion(4) -&amp;gt; true
所以，4 是第一个错误的版本。 解题思路 二分查找 对于连续的版本号 [i, j] 每次判断版本号 (i+j)/2 是否出错，未出错查找范围缩小到 [(i+j)/2+1, j]，出错缩小到 [i, (i+j)/2]，直到 i = j 即得到首个出错的版本号 i
func firstBadVersion(n int) int { var binSearch func(i, j int) int binSearch = func(i, j int) int { if i == j { return i } mid := (i + j) / 2 if isBadVersion(mid) { return binSearch(i, mid) } else { return binSearch(mid+1, j) } } return binSearch(1, n) } 复杂度 时间复杂度：O(logN) 空间复杂度：O(1) </description>
    </item>
    
    <item>
      <title>Leetcode 279. 完全平方数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-279.-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</link>
      <pubDate>Fri, 11 Jun 2021 19:33:36 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-279.-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/perfect-squares/
难度： 中等
题目描述 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
示例 1： 输入： n = 12
输出： 3
解释： 12 = 4 + 4 + 4
示例 2： 输入： n = 13
输出： 2
解释： 13 = 4 + 9
注意： 你可以假设：
1 &amp;lt;= n &amp;lt;= 104 解题思路 动态规划 dp[i] 表示组成数字 i 的最少完全平方数，易得到状态转移方程：</description>
    </item>
    
    <item>
      <title>Leetcode 518. 零钱兑换 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-518.-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii/</link>
      <pubDate>Thu, 10 Jun 2021 10:35:20 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-518.-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/coin-change-2/
难度： 中等
题目描述 给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。
示例 1： 输入: amount = 5, coins = [1, 2, 5]
输出: 4
解释: 有四种方式可以凑成总金额:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
示例 2： 输入: amount = 3, coins = [2]
输出: 0
解释: 只用面额2的硬币不能凑成总金额3。
示例 3： 输入: amount = 10, coins = [10]
输出: 1
注意： 你可以假设：
0 &amp;lt;= amount (总金额) &amp;lt;= 5000 1 &amp;lt;= coin (硬币面额) &amp;lt;= 5000 硬币种类不超过 500 种 结果符合 32 位符号整数 解题思路 动态规划 dp[i][j] 表示前 i 种面额的硬币，组成总金额 j 的方案数，则可以得到状态转移方程：</description>
    </item>
    
    <item>
      <title>Leetcode 1049. 最后一块石头的重量 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1049.-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F-ii/</link>
      <pubDate>Tue, 08 Jun 2021 11:35:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1049.-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/last-stone-weight-ii/
难度： 中等
题目描述 有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。
每一回合，从中选出 任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &amp;lt;= y。那么粉碎的可能结果如下：
如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块 石头。返回此石头 最小的可能重量 。如果没有石头剩下，就返回 0。
示例 1： 输入： stones = [2,7,4,1,8,1]
输出： 1
解释：
组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，
组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，
组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，
组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</description>
    </item>
    
    <item>
      <title>Leetcode 494. 目标和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-494.-%E7%9B%AE%E6%A0%87%E5%92%8C/</link>
      <pubDate>Mon, 07 Jun 2021 20:34:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-494.-%E7%9B%AE%E6%A0%87%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/target-sum/
难度： 中等
题目描述 给你一个整数数组 nums 和一个整数 target 。
向数组中的每个整数前添加 &#39;+&#39; 或 &#39;-&#39; ，然后串联起所有整数，可以构造一个 表达式 ：
例如，nums = [2, 1] ，可以在 2 之前添加 &#39;+&#39; ，在 1 之前添加 &#39;-&#39; ，然后串联起来得到表达式 &amp;quot;+2-1&amp;quot; 。 返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。
示例 1： 输入： nums = [1,1,1,1,1], target = 3
输出： 5
解释： 一共有 5 种方法让最终目标和为 3 。
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3</description>
    </item>
    
    <item>
      <title>Leetcode 474. 一和零</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-474.-%E4%B8%80%E5%92%8C%E9%9B%B6/</link>
      <pubDate>Sun, 06 Jun 2021 10:08:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-474.-%E4%B8%80%E5%92%8C%E9%9B%B6/</guid>
      <description>链接： https://leetcode-cn.com/problems/ones-and-zeroes/
难度： 中等
题目描述 给你一个二进制字符串数组 strs 和两个整数 m 和 n 。
请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。
如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。
示例 1： 输入： strs = [&amp;ldquo;10&amp;rdquo;, &amp;ldquo;0001&amp;rdquo;, &amp;ldquo;111001&amp;rdquo;, &amp;ldquo;1&amp;rdquo;, &amp;ldquo;0&amp;rdquo;], m = 5, n = 3
输出： 4
解释： 最多有 5 个 0 和 3 个 1 的最大子集是 {&amp;ldquo;10&amp;rdquo;,&amp;ldquo;0001&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;} ，因此答案是 4 。
其他满足题意但较小的子集包括 {&amp;ldquo;0001&amp;rdquo;,&amp;ldquo;1&amp;rdquo;} 和 {&amp;ldquo;10&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;} 。{&amp;ldquo;111001&amp;rdquo;} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</description>
    </item>
    
    <item>
      <title>Leetcode 203. 移除链表元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-203.-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sat, 05 Jun 2021 22:26:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-203.-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/remove-linked-list-elements/
难度： 简单
题目描述 给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。
示例 1： &amp;lt;img src=&amp;ldquo;https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg&#34;, width=&amp;ldquo;500px&amp;rdquo;&amp;gt;
输入： head = [1,2,6,3,4,5,6], val = 6
输出： [1,2,3,4,5]
示例 2： 输入： head = [], val = 1
输出： []
示例 3： 输入： head = [7,7,7,7], val = 7
输出： []
提示： 列表中的节点在范围 [0, 10] 内 1 &amp;lt;= Node.val &amp;lt;= 50 0 &amp;lt;= k &amp;lt;= 50 解题思路 模拟 遍历整个链表，遇到值为 val 的结点，将其从链表中删除。</description>
    </item>
    
    <item>
      <title>Leetcode 160. 相交链表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-160.-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 04 Jun 2021 17:53:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-160.-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>链接： https://leetcode-cn.com/problems/intersection-of-two-linked-lists/
难度： 简单
题目描述 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。
图示两个链表在节点 c1 开始相交：
题目数据 保证 整个链式结构中不存在环。
注意，函数返回结果后，链表必须 保持其原始结构。
示例1： 输入： intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出： Intersected at &amp;lsquo;8&amp;rsquo;
解释： 相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。
在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
示例2： 输入： intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</description>
    </item>
    
    <item>
      <title>Leetcode 525. 连续数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-525.-%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 03 Jun 2021 22:32:03 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-525.-%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/contiguous-array/
难度： 中等
题目描述 给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。
示例1： 输入: nums = [0,1]
输出: 2
说明: [0, 1] 是具有相同数量0和1的最长连续子数组。
示例2： 输入: nums = [0,1,0]
输出: 2
说明: [0, 1] (或 [1, 0]) 是具有相同数量0和1的最长连续子数组。
示例3： 输入： nums = [23,2,6,4,7], k = 13
输出： false
提示： 1 &amp;lt;= nums.length &amp;lt;= 105 nums[i] 不是 0 就是 1 解题思路 前缀和+哈希 在一段区间内，对该段区间求和即可得出 1 的数量，用区间长度减去 1 的数量，就可以得到 0 的数量，可以用前缀和降低时间复杂度。
又结果要求对 0 和 1 的数量相等，所以前缀和可以只记录0 和 1 的数量差，当两个前缀数组的和相同时，表示该段数组中0 和 1 的数量相等。原问题转化为在一个数组中找到两个相同的数，且距离相差最大。</description>
    </item>
    
    <item>
      <title>Leetcode 523. 连续的子数组和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-523.-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</link>
      <pubDate>Wed, 02 Jun 2021 22:51:40 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-523.-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/continuous-subarray-sum/
难度： 中等
题目描述 给你一个整数数组 nums 和一个整数 k ，编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组：
子数组大小 至少为 2 ，且 子数组元素总和为 k 的倍数。 如果存在，返回 true ；否则，返回 false 。
如果存在一个整数 n ，令整数 x 符合 x = n * k ，则称 x 是 k 的一个倍数。
示例1： 输入： nums = [23,2,4,6,7], k = 6
输出： true
解释： [2,4] 是一个大小为 2 的子数组，并且和为 6 。
示例2： 输入： nums = [23,2,6,4,7], k = 6
输出： true
解释： [23, 2, 6, 4, 7] 是大小为 5 的子数组，并且和为 42 。</description>
    </item>
    
    <item>
      <title>Leetcode 1744. 你能在你最喜欢的那天吃到你最喜欢的糖果吗？</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1744.-%E4%BD%A0%E8%83%BD%E5%9C%A8%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E9%82%A3%E5%A4%A9%E5%90%83%E5%88%B0%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%B3%96%E6%9E%9C%E5%90%97/</link>
      <pubDate>Tue, 01 Jun 2021 22:35:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1744.-%E4%BD%A0%E8%83%BD%E5%9C%A8%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E9%82%A3%E5%A4%A9%E5%90%83%E5%88%B0%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%B3%96%E6%9E%9C%E5%90%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/
难度： 中等
题目描述 给你一个下标从 0 开始的正整数数组 candiesCount ，其中 candiesCount[i] 表示你拥有的第 i 类糖果的数目。同时给你一个二维数组 queries ，其中 queries[i] = [favoriteTypei, favoriteDayi, dailyCapi] 。
你按照如下规则进行一场游戏：
你从第 0 天开始吃糖果。 你在吃完 所有 第 i - 1 类糖果之前，不能 吃任何一颗第 i 类糖果。 在吃完所有糖果之前，你必须每天 至少 吃 一颗 糖果。 请你构建一个布尔型数组 answer ，满足 answer.length == queries.length 。answer[i] 为 true 的条件是：在每天吃 不超过 dailyCapi 颗糖果的前提下，你可以在第 favoriteDayi 天吃到第 favoriteTypei 类糖果；否则 answer[i] 为 false 。注意，只要满足上面 3 条规则中的第二条规则，你就可以在同一天吃不同类型的糖果。
请你返回得到的数组 answer 。
示例 1： 输入： candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]</description>
    </item>
    
    <item>
      <title>Leetcode 342. 4的幂</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-342.-4%E7%9A%84%E5%B9%82/</link>
      <pubDate>Mon, 31 May 2021 22:42:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-342.-4%E7%9A%84%E5%B9%82/</guid>
      <description>链接： https://leetcode-cn.com/problems/power-of-four/
难度： 简单
题目描述 给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 true ；否则，返回 false 。
整数 n 是 4 的幂次方需满足：存在整数 x 使得 n == 4x
示例 1： 输入： n = 16
输出： true
示例 2： 输入： n = 5
输出： false
示例 3： 输入： n = 1
输出： true
提示： -231 &amp;lt;= n &amp;lt;= 231 - 1&amp;gt; 解题思路 二进制 2 的幂其二进制表示为最高位为 1，后跟偶数个 0 的数，每次向右移位两位，最终结果为 1，即说明是 4 的幂。
另，4 的幂为非负数。
func isPowerOfFour(n int) bool { for ; n &amp;gt; 0; n &amp;gt;&amp;gt;= 2 { if n == 1 { return true } else if n&amp;amp;3 !</description>
    </item>
    
    <item>
      <title>Leetcode 231. 2 的幂</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-231.-2-%E7%9A%84%E5%B9%82/</link>
      <pubDate>Sun, 30 May 2021 11:06:34 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-231.-2-%E7%9A%84%E5%B9%82/</guid>
      <description>链接： https://leetcode-cn.com/problems/power-of-two/
难度： 简单
题目描述 给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。
如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。
示例 1： 输入： n = 1
输出： true
解释： 20 = 1
示例 2： 输入： n = 16
输出： true
解释： 24 = 16
示例 3： 输入： n = 3
输出： false
示例 4： 输入： n = 4
输出： true
示例 5： 输入： n = 5</description>
    </item>
    
    <item>
      <title>Leetcode 477. 汉明距离总和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-477.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%80%BB%E5%92%8C/</link>
      <pubDate>Fri, 28 May 2021 17:37:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-477.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%80%BB%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/total-hamming-distance/
难度： 中等
题目描述 两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。
计算一个数组中，任意两个数之间汉明距离的总和。
示例： 输入: x = 1, y = 4
输出: 2
解释: 在二进制表示中，4表示为0100，14表示为1110，2表示为0010。（这样表示是为了体现后四位之间关系）
所以答案为：
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.
注意： 数组中元素的范围为从 0 到 109。 数组的长度不超过 104。 解题思路 按位计数 当一对数字某一位上的两个数字不同时，汉明距离的总和才会加一。故可以统计数组中相同位的 0 和 1 的数量，相乘可统计当前位的汉明距离和。
func totalHammingDistance(nums []int) int { totalDistance := 0 for i := 1 &amp;lt;&amp;lt; 30; i &amp;gt; 0; i &amp;gt;&amp;gt;= 1 { ones := 0 zeros := 0 for _, num := range nums { if num&amp;amp;i == 0 { zeros++ } else { ones++ } } totalDistance += ones * zeros } return totalDistance } 复杂度 时间复杂度：O(N*B) 空间复杂度：O(1) </description>
    </item>
    
    <item>
      <title>Leetcode 461. 汉明距离</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-461.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</link>
      <pubDate>Thu, 27 May 2021 23:17:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-461.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</guid>
      <description>链接： https://leetcode-cn.com/problems/hamming-distance/
难度： 简单
题目描述 两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。
给出两个整数 x 和 y，计算它们之间的汉明距离。
注意： 0 ≤ x, y &amp;lt; 231 示例： 输入: x = 1, y = 4
输出: 2
解释:
1 (0 0 0 1)
4 (0 1 0 0)
↑ ↑
上面的箭头指出了对应二进制位不同的位置。
解题思路 异或 异或操作可以得出标记出两个数二进制位不同的位置，然后统计数量即可。
func hammingDistance(x int, y int) int { distance := 0 for xor := x ^ y; xor != 0; xor &amp;gt;&amp;gt;= 1 { distance += xor &amp;amp; 1 } return distance } 复杂度 时间复杂度：O(logB) 空间复杂度：O(1) </description>
    </item>
    
    <item>
      <title>Leetcode 1190. 反转每对括号间的子串</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1190.-%E5%8F%8D%E8%BD%AC%E6%AF%8F%E5%AF%B9%E6%8B%AC%E5%8F%B7%E9%97%B4%E7%9A%84%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Wed, 26 May 2021 23:59:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1190.-%E5%8F%8D%E8%BD%AC%E6%AF%8F%E5%AF%B9%E6%8B%AC%E5%8F%B7%E9%97%B4%E7%9A%84%E5%AD%90%E4%B8%B2/</guid>
      <description>链接： https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/
难度： 中等
题目描述 给出一个字符串 s（仅含有小写英文字母和括号）。
请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。
注意，您的结果中 不应 包含任何括号。
示例 1： 输入： s = &amp;ldquo;(abcd)&amp;rdquo;
输出： &amp;ldquo;dcba&amp;rdquo;
示例 2： 输入： s = &amp;ldquo;(u(love)i)&amp;rdquo;
输出： &amp;ldquo;iloveu&amp;rdquo;
示例 3： 输入： s = &amp;ldquo;(ed(et(oc))el)&amp;rdquo;
输出： &amp;ldquo;leetcode&amp;rdquo;
示例 4： 输入： s = &amp;ldquo;a(bcdefghijkl(mno)p)q&amp;rdquo;
输出： &amp;ldquo;apmnolkjihgfedcbq&amp;rdquo;
提示： 0 &amp;lt;= s.length &amp;lt;= 2000 s 中只有小写英文字母和括号 我们确保所有括号都是成对出现的 解题思路 栈 利用栈来进行每一次的反转：
当遇到非 ) 时，入栈； 当遇到 ) 时，依次从栈中取出元素加入一个队列，直到取出 ( 时为止，再将队列中的元素全部入栈，即先完成了内层括号的反转。 依次执行上述逻辑，直到遍历到字符串结尾，栈中元素即为反转后的结果。
func reverseParentheses(s string) string { stack := make([]byte, 0, len(s)) queue := make([]byte, 0, len(s)) for i := range s { if s[i] !</description>
    </item>
    
    <item>
      <title>Leetcode 1707. 与数组中元素的最大异或值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1707.-%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</link>
      <pubDate>Sun, 23 May 2021 09:17:20 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1707.-%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/
难度： 困难
题目描述 给你一个由非负整数组成的数组 nums 。另有一个查询数组 queries ，其中 queries[i] = [xi, mi] 。
第 i 个查询的答案是 xi 和任何 nums 数组中不超过 mi 的元素按位异或（XOR）得到的最大值。换句话说，答案是 max(nums[j] XOR xi) ，其中所有 j 均满足 nums[j] &amp;lt;= mi 。如果 nums 中的所有元素都大于 mi，最终答案就是 -1 。
返回一个整数数组 answer 作为查询的答案，其中 answer.length == queries.length 且 answer[i] 是第 i 个查询的答案。
示例1： 输入： nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]
输出： [3,3,7]
解释：
0 和 1 是仅有的两个不超过 1 的整数。0 XOR 3 = 3 而 1 XOR 3 = 2 。二者中的更大值是 3 。 1 XOR 2 = 3.</description>
    </item>
    
    <item>
      <title>Leetcode 1035. 不相交的线</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1035.-%E4%B8%8D%E7%9B%B8%E4%BA%A4%E7%9A%84%E7%BA%BF/</link>
      <pubDate>Fri, 21 May 2021 23:42:03 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1035.-%E4%B8%8D%E7%9B%B8%E4%BA%A4%E7%9A%84%E7%BA%BF/</guid>
      <description>链接： https://leetcode-cn.com/problems/uncrossed-lines/
难度： 中等
题目描述 在两条独立的水平线上按给定的顺序写下 nums1 和 nums2 中的整数。
现在，可以绘制一些连接两个数字 nums1[i] 和 nums2[j] 的直线，这些直线需要同时满足满足：
nums1[i] == nums2[j] 且绘制的直线不与任何其他连线（非水平线）相交。 请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。
以这种方法绘制线条，并返回可以绘制的最大连线数。
示例 1： 输入： nums1 = [1,4,2], nums2 = [1,2,4]
输出： 2
解释： 可以画出两条不交叉的线，如上图所示。
但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。
示例 2： 输入： nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]
输出： 3
示例 3: 输入： nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]
输出： 2
提示： 1 &amp;lt;= nums1.length &amp;lt;= 500 1 &amp;lt;= nums2.</description>
    </item>
    
    <item>
      <title>Leetcode 692. 前K个高频单词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-692.-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Thu, 20 May 2021 21:45:44 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-692.-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%8D%95%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/top-k-frequent-words/
难度： 中等
题目描述 给一非空的单词列表，返回前 k 个出现次数最多的单词。
返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。
示例 1： 输入: [&amp;ldquo;i&amp;rdquo;, &amp;ldquo;love&amp;rdquo;, &amp;ldquo;leetcode&amp;rdquo;, &amp;ldquo;i&amp;rdquo;, &amp;ldquo;love&amp;rdquo;, &amp;ldquo;coding&amp;rdquo;], k = 2
输出: [&amp;ldquo;i&amp;rdquo;, &amp;ldquo;love&amp;rdquo;]
解析: &amp;ldquo;i&amp;rdquo; 和 &amp;ldquo;love&amp;rdquo; 为出现次数最多的两个单词，均为2次。
注意，按字母顺序 &amp;ldquo;i&amp;rdquo; 在 &amp;ldquo;love&amp;rdquo; 之前。
示例 2： 输入: [&amp;ldquo;the&amp;rdquo;, &amp;ldquo;day&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;sunny&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;sunny&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;is&amp;rdquo;], k = 4
输出: [&amp;ldquo;the&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;sunny&amp;rdquo;, &amp;ldquo;day&amp;rdquo;]
解析: &amp;ldquo;the&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;sunny&amp;rdquo; 和 &amp;ldquo;day&amp;rdquo; 是出现次数最多的四个单词，
出现次数依次为 4, 3, 2 和 1 次。
注意： 假定 k 总为有效值， 1 ≤ k ≤ 集合元素数。 输入的单词均由小写字母组成。 扩展联系： 尝试以 $O(nlog{k})$ 时间复杂度和 $O(n)$ 空间复杂度解决。 解题思路 哈希 遍历单词列表，记录每个单词的频率，然后经一次排序即可找出结果。</description>
    </item>
    
    <item>
      <title>Leetcode 1442. 形成两个异或相等数组的三元组数目</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1442.-%E5%BD%A2%E6%88%90%E4%B8%A4%E4%B8%AA%E5%BC%82%E6%88%96%E7%9B%B8%E7%AD%89%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%89%E5%85%83%E7%BB%84%E6%95%B0%E7%9B%AE/</link>
      <pubDate>Tue, 18 May 2021 22:40:57 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1442.-%E5%BD%A2%E6%88%90%E4%B8%A4%E4%B8%AA%E5%BC%82%E6%88%96%E7%9B%B8%E7%AD%89%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%89%E5%85%83%E7%BB%84%E6%95%B0%E7%9B%AE/</guid>
      <description>链接： https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/
难度： 中等
题目描述 给你一个整数数组 arr 。
现需要从数组中取三个下标 i、j 和 k ，其中 (0 &amp;lt;= i &amp;lt; j &amp;lt;= k &amp;lt; arr.length) 。
a 和 b 定义如下：
a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1] b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k] 注意：^ 表示 按位异或 操作。 请返回能够令 a == b 成立的三元组 (i, j , k) 的数目。
示例1： 输入： arr = [2,3,1,6,7]</description>
    </item>
    
    <item>
      <title>Leetcode 993. 二叉树的堂兄弟节点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-993.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%A0%82%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9/</link>
      <pubDate>Mon, 17 May 2021 09:29:10 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-993.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%A0%82%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/cousins-in-binary-tree/
难度： 简单
题目描述 在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。
如果二叉树的两个节点深度相同，但 父节点不同 ，则它们是一对堂兄弟节点。
我们给出了具有唯一值的二叉树的根节点 root ，以及树中两个不同节点的值 x 和 y 。
只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true 。否则，返回 false。
示例1： &amp;lt;img src=&amp;ldquo;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-01.png&#34;, width=&amp;ldquo;180px&amp;rdquo;&amp;gt;
输入： root = [1,2,3,4], x = 4, y = 3
输出： false
示例2： &amp;lt;img src=&amp;ldquo;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-02.png&#34;, width=&amp;ldquo;201px&amp;rdquo;&amp;gt;
输入： root = [1,2,3,null,4,null,5], x = 5, y = 4
输出： true
示例3： &amp;lt;img src=&amp;ldquo;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-03.png&#34;, width=&amp;ldquo;156px&amp;rdquo;&amp;gt;
输入： root = [1,2,3,null,4], x = 2, y = 3</description>
    </item>
    
    <item>
      <title>Leetcode 421. 数组中两个数的最大异或值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-421.-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</link>
      <pubDate>Sun, 16 May 2021 22:31:57 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-421.-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/
难度： 中等
题目描述 给你一个整数数组 nums ，返回 nums[i] XOR nums[j] 的最大运算结果，其中 0 ≤ i ≤ j &amp;lt; n 。
进阶： 你可以在 O(n) 的时间解决这个问题吗？
示例1： 输入： nums = [3,10,5,25,2,8]
输出： 28
解释： 最大运算结果是 5 XOR 25 = 28.
示例2： 输入： nums = [0]
输出： 0
示例3： 输入： nums = [2,4]
输出： 6
示例4： 输入： nums = [8,10,2]
输出： 10
示例5： 输入： nums = [14,70,53,83,49,91,36,80,92,51,66,70]
输出： 127
提示： 1 &amp;lt;= nums.length &amp;lt;= 2 * 104 0 &amp;lt;= nums[i] &amp;lt;= 232 - 1 解题思路 暴力求解 枚举所有的 i 和 j，求解比较得出最大值。</description>
    </item>
    
    <item>
      <title>Leetcode 1269. 停在原地的方案数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1269.-%E5%81%9C%E5%9C%A8%E5%8E%9F%E5%9C%B0%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</link>
      <pubDate>Thu, 13 May 2021 23:12:12 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1269.-%E5%81%9C%E5%9C%A8%E5%8E%9F%E5%9C%B0%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/
难度： 困难
题目描述 有一个长度为 arrLen 的数组，开始有一个指针在索引 0 处。
每一步操作中，你可以将指针向左或向右移动 1 步，或者停在原地（指针不能被移动到数组范围外）。
给你两个整数 steps 和 arrLen ，请你计算并返回：在恰好执行 steps 次操作以后，指针仍然指向索引 0 处的方案数。
由于答案可能会很大，请返回方案数 模 10^9 + 7 后的结果。
示例 1： 输入： steps = 3, arrLen = 2
输出： 4
解释： 3 步后，总共有 4 种不同的方法可以停在索引 0 处。
向右，向左，不动
不动，向右，向左
向右，不动，向左
不动，不动，不动
示例 2： 输入： steps = 2, arrLen = 4
输出： 2
解释： 2 步后，总共有 2 种不同的方法可以停在索引 0 处。
向右，向左
不动，不动</description>
    </item>
    
    <item>
      <title>Leetcode 1310. 子数组异或查询</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1310.-%E5%AD%90%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 12 May 2021 23:14:18 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1310.-%E5%AD%90%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%9F%A5%E8%AF%A2/</guid>
      <description>链接： https://leetcode-cn.com/problems/xor-queries-of-a-subarray/
难度： 中等
题目描述 有一个正整数数组 arr，现给你一个对应的查询数组 queries，其中 queries[i] = [Li, Ri]。
对于每个查询 i，请你计算从 Li 到 Ri 的 XOR 值（即 arr[Li] xor arr[Li+1] xor ... xor arr[Ri]）作为本次查询的结果。
并返回一个包含给定查询 queries 所有结果的数组。
示例 1： 输入： arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
输出： [2,7,14,8]
解释：
数组中元素的二进制表示形式是：
1 = 0001
3 = 0011
4 = 0100
8 = 1000
查询的 XOR 值为：
[0,1] = 1 xor 3 = 2
[1,2] = 3 xor 4 = 7</description>
    </item>
    
    <item>
      <title>Leetcode 1734. 解码异或后的排列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1734.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%8E%92%E5%88%97/</link>
      <pubDate>Tue, 11 May 2021 19:55:25 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1734.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%8E%92%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/decode-xored-permutation/
难度： 中等
题目描述 给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。
它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。
给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。
示例1： 输入： encoded = [3,1]
输出： [1,2,3]
解释： 如果 perm = [1,2,3] ，那么 encoded = [1 XOR 2,2 XOR 3] = [3,1]
示例2： 输入： encoded = [6,5,4,6]
输出： [2,4,1,5,3]</description>
    </item>
    
    <item>
      <title>Leetcode 872. 叶子相似的树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-872.-%E5%8F%B6%E5%AD%90%E7%9B%B8%E4%BC%BC%E7%9A%84%E6%A0%91/</link>
      <pubDate>Mon, 10 May 2021 23:30:50 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-872.-%E5%8F%B6%E5%AD%90%E7%9B%B8%E4%BC%BC%E7%9A%84%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/leaf-similar-trees/
难度： 简单
题目描述 请考虑一棵二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。
举个例子，如上图所示，给定一棵叶值序列为 (6, 7, 4, 9, 8) 的树。
如果有两棵二叉树的叶值序列是相同，那么我们就认为它们是 叶相似 的。
如果给定的两个根结点分别为 root1 和 root2 的树是叶相似的，则返回 true；否则返回 false 。
示例 1： 输入： root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
输出： true
示例 2： 输入： root1 = [1], root2 = [1]
输出： true
示例 3： 输入： root1 = [1], root2 = [2]
输出： false
示例 4： 输入： root1 = [1,2], root2 = [2,2]
输出： true</description>
    </item>
    
    <item>
      <title>Leetcode 1486. 数组异或操作</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1486.-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 07 May 2021 17:05:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1486.-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/</guid>
      <description>链接： https://leetcode-cn.com/problems/xor-operation-in-an-array/
难度： 简单
题目描述 给你两个整数，n 和 start 。
数组 nums 定义为：nums[i] = start + 2*i（下标从 0 开始）且 n == nums.length 。
请返回 nums 中所有元素按位异或（XOR）后得到的结果。
示例1： 输入： n = 5, start = 0
输出： 8
解释： 数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。
&amp;ldquo;^&amp;rdquo; 为按位异或 XOR 运算符。
示例2： 输入： n = 4, start = 3
输出： 8</description>
    </item>
    
    <item>
      <title>Leetcode 1720. 解码异或后的数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1720.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 06 May 2021 23:09:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1720.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/decode-xored-array/
难度： 中等
题目描述 未知 整数数组 arr 由 n 个非负整数组成。
经编码后变为长度为 n - 1 的另一个整数数组 encoded ，其中 encoded[i] = arr[i] XOR arr[i + 1] 。例如，arr = [1,0,2,1] 经编码后得到 encoded = [1,2,3] 。
给你编码后的数组 encoded 和原数组 arr 的第一个元素 first（arr[0]）。
请解码返回原数组 arr 。可以证明答案存在并且是唯一的。
示例 1： 输入： encoded = [1,2,3], first = 1
输出： [1,0,2,1]
解释： 若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]</description>
    </item>
    
    <item>
      <title>Leetcode 740. 删除并获得点数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-740.-%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/</link>
      <pubDate>Wed, 05 May 2021 23:47:15 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-740.-%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/delete-and-earn/
难度： 中等
题目描述 给你一个整数数组 nums ，你可以对它进行一些操作。
每次操作中，选择任意一个 nums[i] ，删除它并获得 nums[i] 的点数。之后，你必须删除每个等于 nums[i] - 1 或 nums[i] + 1 的元素。
开始你拥有 0 个点数。返回你能通过这些操作获得的最大点数。
示例1： 输入： nums = [3,4,2]
输出： 6
解释： 删除 4 获得 4 个点数，因此 3 也被删除。
之后，删除 2 获得 2 个点数。总共获得 6 个点数。
示例2： 输入： nums = [2,2,3,3,3,4]
输出： 9
解释： 删除 3 获得 3 个点数，接着要删除两个 2 和 4 。
之后，再次删除 3 获得 3 个点数，再次删除 3 获得 3 个点数。</description>
    </item>
    
    <item>
      <title>Leetcode 7. 整数反转</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-7.-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Mon, 03 May 2021 11:57:39 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-7.-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</guid>
      <description>链接： https://leetcode-cn.com/problems/reverse-integer/
难度： 简单
题目描述 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。
如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1] ，就返回 0。
假设环境不允许存储 64 位整数（有符号或无符号）。
示例1： 输入： x = 123
输出： 321
示例2： 输入： x = -123
输出： -321
示例3： 输入： x = 120
输出： 21
示例4： 输入： x = 0
输出： 0
提示： -231 &amp;lt;= x &amp;lt;= 231 - 14 解题思路 双指针 直接数字逐位反转，当数字为十位数时，32位整数无法存储，需要做一次溢位判断：
可以将数字分为前9位数与第10位数进行比较，不再临界值的范围内，说明溢出。
func reverse(x int) int { res := 0 for i := 0; x !</description>
    </item>
    
    <item>
      <title>Leetcode 554. 砖墙</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-554.-%E7%A0%96%E5%A2%99/</link>
      <pubDate>Sun, 02 May 2021 10:03:17 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-554.-%E7%A0%96%E5%A2%99/</guid>
      <description>链接： https://leetcode-cn.com/problems/brick-wall/
难度： 中等
题目描述 你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。
你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。
给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 。
示例1： &amp;lt;img src=&amp;ldquo;https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg&#34;, width=&amp;ldquo;493px&amp;rdquo;&amp;gt;
输入： wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]
输出： 2
示例2： 输入： wall = [[1],[1],[1]]
输出： 3
提示： n == wall.length 1 &amp;lt;= n &amp;lt;= 104 1 &amp;lt;= wall[i].length &amp;lt;= 104 1 &amp;lt;= sum(wall[i].length) &amp;lt;= 2 * 104 对于每一行 i ，sum(wall[i]) 应当是相同的 1 &amp;lt;= wall[i][j] &amp;lt;= 231 - 1 解题思路 计数 以每一行起点为 0 坐标，可以使得同一列的缝隙唯一标识，从而标记出所有缝隙的列坐标。</description>
    </item>
    
    <item>
      <title>Leetcode 690. 员工的重要性</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-690.-%E5%91%98%E5%B7%A5%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</link>
      <pubDate>Sat, 01 May 2021 21:20:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-690.-%E5%91%98%E5%B7%A5%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</guid>
      <description>链接： https://leetcode-cn.com/problems/employee-importance/
难度： 简单
题目描述 给定一个保存员工信息的数据结构，它包含了员工 唯一的 id ，重要度 和 直系下属的 id 。
比如，员工 1 是员工 2 的领导，员工 2 是员工 3 的领导。他们相应的重要度为 15 , 10 , 5 。那么员工 1 的数据结构是 [1, 15, [2]] ，员工 2的 数据结构是 [2, 10, [3]] ，员工 3 的数据结构是 [3, 5, []] 。注意虽然员工 3 也是员工 1 的一个下属，但是由于 并不是直系 下属，因此没有体现在员工 1 的数据结构中。
现在输入一个公司的所有员工信息，以及单个员工 id ，返回这个员工和他所有下属的重要度之和。
示例： 输入： [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1</description>
    </item>
    
    <item>
      <title>Leetcode 137. 只出现一次的数字 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-137.-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii/</link>
      <pubDate>Fri, 30 Apr 2021 18:18:49 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-137.-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/single-number-ii/
难度： 中等
题目描述 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。
示例1： 输入： nums = [2,2,3,2] 输出： 3
示例2： 输入： nums = [0,1,0,1,0,1,99] 输出： 99
提示： 1 &amp;lt;= nums.length &amp;lt;= 3 * 104 -231 &amp;lt;= nums[i] &amp;lt;= 231 - 1 nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 进阶： 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
解题思路 哈希 统计每个数出现的次数，然后找出其中只出现一次的数
func singleNumber(nums []int) int { cnt := make(map[int]int) for _, num := range nums { cnt[num]++ } for k, v := range cnt { if v == 1 { return k } } return 0 } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ 排序 将整个数组排序，没三个一组进行首尾比较，相同继续，不同返回。</description>
    </item>
    
    <item>
      <title>Leetcode 403. 青蛙过河</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-403.-%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3/</link>
      <pubDate>Thu, 29 Apr 2021 14:21:06 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-403.-%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3/</guid>
      <description>链接： https://leetcode-cn.com/problems/frog-jump/
难度： 困难
题目描述 一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。
给你石子的位置列表 stones（用单元格序号 升序 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。
开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格 1 跳至单元格 2 ）。
如果青蛙上一步跳跃了 k 个单位，那么它接下来的跳跃距离只能选择为 k - 1、k 或 k + 1 个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。
示例1： 输入： stones = [0,1,3,5,6,8,12,17]
输出： true
解释： 青蛙可以成功过河，按照如下方案跳跃：跳 1 个单位到第 2 块石子, 然后跳 2 个单位到第 3 块石子, 接着 跳 2 个单位到第 4 块石子, 然后跳 3 个单位到第 6 块石子, 跳 4 个单位到第 7 块石子, 最后，跳 5 个单位到第 8 个石子（即最后一块石子）。</description>
    </item>
    
    <item>
      <title>Leetcode 633. 平方数之和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-633.-%E5%B9%B3%E6%96%B9%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 28 Apr 2021 22:46:56 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-633.-%E5%B9%B3%E6%96%B9%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/sum-of-square-numbers/
难度： 中等
题目描述 给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c 。
示例 1： 输入： c = 5
输出： true
解释： 1 * 1 + 2 * 2 = 5
示例 2： 输入： c = 3
输出： false
示例 3： 输入： c = 4
输出： true
示例 4： 输入： c = 2
输出： true
示例 5： 输入： c = 1 输出： true
提示： 0 &amp;lt;= c &amp;lt;= 231 - 1 解题思路 打表 维护一个保存所有平方数的 map，然后从0开始枚举所有可能是 a 的情况，寻找 b = c-a2 是否存在于 map 中</description>
    </item>
    
    <item>
      <title>Leetcode 938. 二叉搜索树的范围和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-938.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C/</link>
      <pubDate>Tue, 27 Apr 2021 10:31:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-938.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/range-sum-of-bst/
难度： 简单
题目描述 给定二叉搜索树的根结点 root，返回值位于范围 [low, high] 之间的所有结点的值的和。
示例 1： 输入： root = [10,5,15,3,7,null,18], low = 7, high = 15
输出： 32
示例 2： 输入： root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
输出： 23
提示： 树中节点数目在范围 [1, 2 * 104] 内 1 &amp;lt;= Node.val &amp;lt;= 105 1 &amp;lt;= low &amp;lt;= high &amp;lt;= 105 所有 Node.val 互不相同 解题思路 深度优先搜索 不同于一般搜索树的搜索，该搜索需要遍历整颗树，以累计求和，必要部分需要剪枝加快遍历速度。
搜索时需要区分三种情况：
当前结点值 val &amp;lt; low 时，左子树均不满足条件，继续搜索右子树； 当前结点值 val &amp;gt; high 时，右子树均不满足条件，继续搜索左子树； 其余情况，累加当前结点值，无法剪枝，左右子树都需要继续搜索。 func rangeSumBST(root *TreeNode, low int, high int) int { sum := 0 var search func(node *TreeNode) search = func(node *TreeNode) { if node == nil { return } if node.</description>
    </item>
    
    <item>
      <title>Leetcode 1011. 在 D 天内送达包裹的能力</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1011.-%E5%9C%A8-d-%E5%A4%A9%E5%86%85%E9%80%81%E8%BE%BE%E5%8C%85%E8%A3%B9%E7%9A%84%E8%83%BD%E5%8A%9B/</link>
      <pubDate>Mon, 26 Apr 2021 11:10:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1011.-%E5%9C%A8-d-%E5%A4%A9%E5%86%85%E9%80%81%E8%BE%BE%E5%8C%85%E8%A3%B9%E7%9A%84%E8%83%BD%E5%8A%9B/</guid>
      <description>链接： https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/
难度： 中等
题目描述 传送带上的包裹必须在 D 天内从一个港口运送到另一个港口。
传送带上的第 i 个包裹的重量为 weights[i]。每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。
返回能在 D 天内将传送带上的所有包裹送达的船的最低运载能力。
示例 1： 输入： weights = [1,2,3,4,5,6,7,8,9,10], D = 5
输出： 15
解释：
船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：
第 1 天：1, 2, 3, 4, 5
第 2 天：6, 7
第 3 天：8
第 4 天：9
第 5 天：10
请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。
示例 2： 输入： weights = [3,2,2,4,1,4], D = 3</description>
    </item>
    
    <item>
      <title>Leetcode 897. 递增顺序搜索树</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-897.-%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Sun, 25 Apr 2021 11:41:33 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-897.-%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>链接： https://leetcode-cn.com/problems/increasing-order-search-tree/
难度： 简单
题目描述 给你一棵二叉搜索树，请你 按中序遍历 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。
示例 1： 输入： root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
输出： [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
示例 2： 输入： root = [5,1,7]
输出： [1,null,5,null,7]
提示： 树中节点数的取值范围是 [1, 100] 0 &amp;lt;= Node.val &amp;lt;= 1000 解题思路 新建树 重新构造一棵树，中序遍历原树的每个结点，将其加入到新树的右结点中。
func increasingBST(root *TreeNode) *TreeNode { newRoot := new(TreeNode) newNode := newRoot var InorderTraversal func(node *TreeNode) InorderTraversal = func(node *TreeNode) { if node == nil { return } InorderTraversal(node.Left) newNode.Right = &amp;amp;TreeNode{ Val: node.Val, Left: nil, Right: nil, } newNode = newNode.</description>
    </item>
    
    <item>
      <title>Leetcode 377. 组合总和 Ⅳ</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-377.-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</link>
      <pubDate>Sat, 24 Apr 2021 21:50:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-377.-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/combination-sum-iv/
难度： 中等
题目描述 给你一个由 不同 整数组成的数组 nums ，和一个目标整数 target 。请你从 nums 中找出并返回总和为 target 的元素组合的个数。
题目数据保证答案符合 32 位整数范围。
示例 1： 输入： nums = [1,2,3], target = 4
输出： 7
解释：
所有可能的组合为：
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
请注意，顺序不同的序列被视作不同的组合。
示例 2： 输入： nums = [9], target = 3
输出： 0
提示： 1 &amp;lt;= nums.length &amp;lt;= 200 1 &amp;lt;= nums[i] &amp;lt;= 1000 nums 中的所有元素 互不相同 1 &amp;lt;= target &amp;lt;= 1000 解题思路 动态规划 用 dp[i] 表示当 i 作为 target 时，排列方案的数量。当 dp[i] 不为 0 时，不妨假设排列的做后一位数字为 num，则 i-num 的排列数为 dp[i-num] ，容易得知状态转移方程：</description>
    </item>
    
    <item>
      <title>Leetcode 91. 解码方式</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-91.-%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 21 Apr 2021 10:35:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-91.-%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F/</guid>
      <description>链接： https://leetcode-cn.com/problems/decode-ways/
难度： 中等
题目描述 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
&amp;#39;A&amp;#39; -&amp;gt; 1 &amp;#39;B&amp;#39; -&amp;gt; 2 ... &amp;#39;Z&amp;#39; -&amp;gt; 26 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，&amp;quot;11106&amp;quot; 可以映射为：
&amp;quot;AAJF&amp;quot; ，将消息分组为 (1 1 10 6) &amp;quot;KJF&amp;quot; ，将消息分组为 (11 10 6) 注意，消息不能分组为 (1 11 06) ，因为 &amp;quot;06&amp;quot; 不能映射为 &amp;quot;F&amp;quot; ，这是由于 &amp;quot;6&amp;quot; 和 &amp;quot;06&amp;quot; 在映射中并不等价。
给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
题目数据保证答案肯定是一个 32 位 的整数。
示例1： 输入： s = &amp;ldquo;12&amp;rdquo;
输出： 2
解释： 它可以解码为 &amp;ldquo;AB&amp;rdquo;（1 2）或者 &amp;ldquo;L&amp;rdquo;（12）。</description>
    </item>
    
    <item>
      <title>Leetcode 165. 比较版本号</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-165.-%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/</link>
      <pubDate>Tue, 20 Apr 2021 20:33:19 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-165.-%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/</guid>
      <description>链接： https://leetcode-cn.com/problems/compare-version-numbers/
难度： 中等
题目描述 给你两个版本号 version1 和 version2 ，请你比较它们。
版本号由一个或多个修订号组成，各修订号由一个 &#39;.&#39; 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。
比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 忽略任何前导零后的整数值 。也就是说，修订号 1 和修订号 001 相等 。如果版本号没有指定某个下标处的修订号，则该修订号视为 0 。例如，版本 1.0 小于版本 1.1 ，因为它们下标为 0 的修订号相同，而下标为 1 的修订号分别为 0 和 1 ，0 &amp;lt; 1 。
返回规则如下：
如果 version1 &amp;gt; version2 返回 1， 如果 version1 &amp;lt; version2 返回 -1， 除此之外返回 0。 示例1： 输入： version1 = &amp;ldquo;1.</description>
    </item>
    
    <item>
      <title>Leetcode 28. 实现 strStr()</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-28.-%E5%AE%9E%E7%8E%B0-strstr/</link>
      <pubDate>Tue, 20 Apr 2021 17:21:05 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-28.-%E5%AE%9E%E7%8E%B0-strstr/</guid>
      <description>链接： https://leetcode-cn.com/problems/implement-strstr/
难度： 简单
题目描述 实现 strStr() 函数。
给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 -1 。
说明： 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。
对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr() 以及 Java 的 indexOf() 定义相符。
示例1： 输入： haystack = &amp;ldquo;hello&amp;rdquo;, needle = &amp;ldquo;ll&amp;rdquo;
输出： 2
示例2： 输入： haystack = &amp;ldquo;aaaaa&amp;rdquo;, needle = &amp;ldquo;bba&amp;rdquo;
输出： -1
示例3： 输入： haystack = &amp;ldquo;&amp;rdquo;, needle = &amp;quot;&amp;quot;
输出： 0
提示： 0 &amp;lt;= haystack.</description>
    </item>
    
    <item>
      <title>Leetcode 27. 移除元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-27.-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
      <pubDate>Mon, 19 Apr 2021 10:34:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-27.-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/remove-element/
难度： 简单
题目描述 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
说明： 为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝 int len = removeDuplicates(nums); // 在函数里修改输入数组对于调用者是可见的。 // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。 for (int i = 0; i &amp;lt; len; i++) { print(nums[i]); } 示例1： 输入： nums = [3,2,2,3], val = 3
输出： 2, nums = [2,2]
解释： 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</description>
    </item>
    
    <item>
      <title>Leetcode 26. 删除有序数组中的重复项</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-26.-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
      <pubDate>Sun, 18 Apr 2021 10:52:18 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-26.-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
      <description>链接： https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/
难度： 简单
题目描述 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
说明： 为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝 int len = removeDuplicates(nums); // 在函数里修改输入数组对于调用者是可见的。 // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。 for (int i = 0; i &amp;lt; len; i++) { print(nums[i]); } 示例1： 输入： nums = [1,1,2]
输出： 2, nums = [1,2]
解释： 函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
示例2： 输入： nums = [0,0,1,1,1,2,2,3,3,4]</description>
    </item>
    
  </channel>
</rss>
