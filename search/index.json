[{"content":" 链接： https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/\n难度： 简单\n题目描述 统计一个数字在排序数组中出现的次数。\n示例 1：  输入: nums = [5,7,7,8,8,10], target = 8\n输出: 2\n 示例 2：  输入: nums = [5,7,7,8,8,10], target = 6\n输出: 0\n 提示：  0 \u0026lt;= 数组长度 \u0026lt;= 50000  解题思路 顺序查找 顺序遍历，统计数量 target。由于数组有序，当当前元素大于 target时，\nfunc search(nums []int, target int) int { cnt := 0 for _, num := range nums { if num == target { cnt++ } else if num \u0026gt; target { break } } return cnt }  复杂度  时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(1) $  二分查找 二分查找，找到首个等于 target 的元素位置，依次向后遍历到元素不等于 target 为止，记录出现的次数。\nfunc search(nums []int, target int) int { pos := len(nums) for l, r := 0, len(nums)-1; l \u0026lt;= r; { if l == r { pos = l break } mid := (l + r) / 2 if nums[mid] \u0026lt; target { l = mid + 1 } else { r = mid } } cnt := 0 for i := pos; i \u0026lt; len(nums) \u0026amp;\u0026amp; nums[i] == target; i++ { cnt++ } return cnt }  复杂度  时间复杂度：$ O(logN), N = len(nums) $ 空间复杂度：$ O(1) $  ","date":"2021-07-16T14:55:24+08:00","permalink":"https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-53-i.-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97-i/","title":"剑指 Offer 53 - I. 在排序数组中查找数字 I"},{"content":" 链接： https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/\n难度： 中等\n题目描述 给你一个正整数数组 arr 。请你对 arr 执行一些操作（也可以不进行任何操作），使得数组满足以下条件：\n arr 中 第一个 元素必须为 1 。 任意相邻两个元素的差的绝对值 小于等于 1 ，也就是说，对于任意的 1 \u0026lt;= i \u0026lt; arr.length （数组下标从 0 开始），都满足 abs(arr[i] - arr[i - 1]) \u0026lt;= 1 。abs(x) 为 x 的绝对值。  你可以执行以下 2 种操作任意次：\n 减小 arr 中任意元素的值，使其变为一个 更小的正整数 。 重新排列 arr 中的元素，你可以以任意顺序重新排列。  请你返回执行以上操作后，在满足前文所述的条件下，arr 中可能的 最大值 。\n示例 1：  输入：arr = [2,2,1,2,1]\n输出：2\n解释：\n我们可以重新排列 arr 得到 [1,2,2,2,1] ，该数组满足所有条件。\narr 中最大元素为 2 。\n 示例 2：  输入：arr = [100,1,1000]\n输出：3\n解释：\n一个可行的方案如下：\n1. 重新排列 arr 得到 [1,100,1000] 。\n2. 将第二个元素减小为 2 。\n3. 将第三个元素减小为 3 。\n现在 arr = [1,2,3] ，满足所有条件。\narr 中最大元素为 3 。\n 示例 3：  输入：arr = [1,2,3,4,5] 输出：5 解释：数组已经满足所有条件，最大元素为 5\n 提示：  1 \u0026lt;= arr.length \u0026lt;= 105 1 \u0026lt;= arr[i] \u0026lt;= 109  解题思路 排序 先将数组排序，并令arr[0] = 1，然后逐一地调整后续元素，其值为上个元素值加一。当遇到小于等于前一个值的元素时，从当前元素重新开始调整，直至遍历结束，返回尾部元素。\nfunc maximumElementAfterDecrementingAndRearranging(arr []int) int { sort.Ints(arr) arr[0] = 1 for i := 1; i \u0026lt; len(arr); i++ { if arr[i] \u0026gt; arr[i-1] { arr[i] = arr[i-1] + 1 } } return arr[len(arr)-1] }  复杂度  时间复杂度：$ O(NlogN), N = len(arr) $ 空间复杂度：$ O(logN) $  ","date":"2021-07-15T10:33:47+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1846.-%E5%87%8F%E5%B0%8F%E5%92%8C%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/","title":"Leetcode 1846. 减小和重新排列数组后的最大元素"},{"content":" 链接： https://leetcode-cn.com/problems/minimum-absolute-sum-difference/\n难度： 中等\n题目描述 给你两个正整数数组 nums1 和 nums2 ，数组的长度都是 n 。\n数组 nums1 和 nums2 的 绝对差值和 定义为所有 |nums1[i] - nums2[i]|（0 \u0026lt;= i \u0026lt; n）的 总和（下标从 0 开始）。\n你可以选用 nums1 中的 任意一个 元素来替换 nums1 中的 至多 一个元素，以 最小化 绝对差值和。\n在替换数组 nums1 中最多一个元素 之后 ，返回最小绝对差值和。因为答案可能很大，所以需要对 109 + 7 取余 后返回。\n|x| 定义为：\n 如果 x \u0026gt;= 0 ，值为 x ，或者 如果 x \u0026lt;= 0 ，值为 -x  示例 1：  输入：nums1 = [1,7,5], nums2 = [2,3,5]\n输出：3\n解释：有两种可能的最优方案：\n- 将第二个元素替换为第一个元素：[1,7,5] =\u0026gt; [1,1,5] ，或者\n- 将第二个元素替换为第三个元素：[1,7,5] =\u0026gt; [1,5,5]\n两种方案的绝对差值和都是 |1-2| + (|1-3| 或者 |5-3|) + |5-5| = 3\n 示例 2：  输入：nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]\n输出：0\n解释：nums1 和 nums2 相等，所以不用替换元素。绝对差值和为 0\n 示例 3：  输入：nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]\n输出：20\n解释：将第一个元素替换为第二个元素：[1,10,4,4,2,7] =\u0026gt; [10,10,4,4,2,7]\n绝对差值和为 |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20\n 提示：  n == nums1.length n == nums2.length 1 \u0026lt;= n \u0026lt;= 105 1 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 105  解题思路 排序 \u0026amp; 二分查找 不妨设用 nums1[j] 替换了 nums1[i]，使得绝对差值和最小化。替换前之差为 |nums1[i] - nums2[i]|，替换之后为 |nums1[j] - nums2[i]|，则其替换后绝对差值和的缩小量即为 |nums1[i] - nums2[i]| - |nums1[j] - nums2[i]|，要求该缩小量最大。\n通过上式观察得出：对于每个 i，前一项 |nums1[i] - nums2[i]| 确定不变，唯一的变量即在 j，需要找出使得 |nums1[j] - nums2[i]| 最小的 j，也就是找出 nums1 中与 nums2[i] 最接近的值。\n对于每个 i，通过二分查找的方法，找出最接近的 j。一次遍历完成后，得到最大的缩小量的最大值 max，用原始绝对差值和减去 max 即得到 最小化 绝对差值和。\n二分查找时，当不存在与 nums2[i] 相等的值时，需要找寻最接近的值，此时查找终止条件为仅剩两个元素，因为最接近的值可能大于 nums2[i]，也可能小于 nums2[i]，需要对两个元素均进行判断。\nfunc minAbsoluteSumDiff(nums1 []int, nums2 []int) int { const MOD = 1e9 + 7 // 求绝对值 \tdiff := func(x, y int) int { d := x - y if d \u0026lt; 0 { d = -d } return d } // nums1排序 \tsortedNums1 := make([]int, len(nums1)) copy(sortedNums1, nums1) sort.Ints(sortedNums1) sum := 0 // 绝对差只和 \tmax := 0 // 最小化缩小量最大值 \tfor i := range nums2 { absDiff := diff(nums1[i], nums2[i]) sum %= MOD sum += absDiff // 求和 \t// 二分查找确定最小化缩小量 \tfor l, r := 0, len(sortedNums1)-1; l \u0026lt; r; { // l, r 最接近nums2[i] \tif l+1 == r { dl := diff(sortedNums1[l], nums2[i]) dr := diff(sortedNums1[r], nums2[i]) if dl \u0026lt; dr { if max \u0026lt; absDiff-dl { max = absDiff - dl } } else { if max \u0026lt; absDiff-dr { max = absDiff - dr } } break } mid := (l + r) / 2 // 与nums2相等，已找到 \tif sortedNums1[mid] == nums2[i] { if max \u0026lt; absDiff { max = absDiff } break } else if sortedNums1[mid] \u0026gt; nums2[i] { r = mid } else { l = mid } } } return (sum + MOD - max) % MOD }  复杂度  时间复杂度：$ O(NlogN),N=len(nums1) $ 空间复杂度：$ O(N) $  ","date":"2021-07-14T10:34:23+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1818.-%E7%BB%9D%E5%AF%B9%E5%B7%AE%E5%80%BC%E5%92%8C/","title":"Leetcode 1818. 绝对差值和"},{"content":" 链接： https://leetcode-cn.com/problems/h-index-ii/\n难度： 中等\n题目描述 给定一位研究者论文被引用次数的数组（被引用次数是非负整数）,数组已经按照 升序排列。编写一个方法，计算出研究者的 h 指数。\nh 指数的定义：h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）总共 有 h 篇论文分别被引用了至少 h 次。且其余的 $N - h$ 篇论文每篇被引用次数 不超过 h 次。\n例如：某人的 h 指数是 20，这表示他已发表的论文中，每篇被引用了至少 20 次的论文总共有 20 篇。\n示例：  输入：citations = [0,1,3,5,6]\n输出：3\n解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 0, 1, 3, 5, 6 次。\n由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。\n 说明：如果 h 有多种可能的值，h 指数是其中最大的那个。\n进阶：  这是 H 指数 的延伸题目，本题中的 citations 数组是保证有序的。 你可以优化你的算法到对数时间复杂度吗？  解题思路 顺序查找 解题思路同 Leetcode 274. H 指数，由于已经排好序，只需要从后往前查找即可。\nfunc hIndex(citations []int) int { for i := len(citations) - 1; i \u0026gt;= 0; i-- { if citations[i] \u0026lt; len(citations)-i { return len(citations) - 1 - i } } return len(citations) }  复杂度  时间复杂度：$ O(N), N=len(citations) $ 空间复杂度：$ O(1) $  二分查找 用 [l, r] 作为二分查找的区间下标，每次用区间中位数 citations[mid] 与到数组末尾的距离 len(citations)-mid 相比:\n 当 citations[mid] \u0026lt; len(citations)-l 时，不满足条件，需要继续到右侧查找，令 l = mid+1； 当 citations[mid] ≥ len(citations)-l 时，len(citations)-mid 是一个满足条件的 h，但不确定是否为最大的 h，需要保留并继续到右侧查找，令 r = mid。  遍历到 l = r 时，仅剩一个元素 citations[mid]，当其 ≥ len(citations)-l，len(citations)-l即为最大 h，返回；否则，说明找不到符合条件的 h,返回 0。\nfunc hIndex(citations []int) int { for l, r := 0, len(citations)-1; ; { if l == r { if citations[l] \u0026gt;= len(citations)-l { return len(citations) - l } else { return 0 } } mid := (l + r) / 2 if citations[mid] \u0026lt; len(citations)-mid { l = mid + 1 } else { r = mid } } }  复杂度  时间复杂度：$ O(logN), N=len(citations) $ 空间复杂度：$ O(1) $  ","date":"2021-07-12T10:50:26+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-275.-h-%E6%8C%87%E6%95%B0-ii/","title":"Leetcode 275. H 指数 II"},{"content":" 链接： https://leetcode-cn.com/problems/h-index/\n难度： 中等\n题目描述 给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。\nh 指数的定义：h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）总共 有 h 篇论文分别被引用了至少 h 次。且其余的 $N - h$ 篇论文每篇被引用次数 不超过 h 次。\n例如：某人的 h 指数是 20，这表示他已发表的论文中，每篇被引用了至少 20 次的论文总共有 20 篇。\n示例：  输入：citations = [3,0,6,1,5]\n输出：3\n解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。\n由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。\n 提示：如果 h 有多种可能的值，h 指数是其中最大的那个。\n解题思路 排序 按照每篇论文被引用次数从多到少排序，依次遍历直到首次找到第 i 篇论文，其被引用次数 \u0026lt; i，则说明其前面的论文被引用数均 ≥ i-1，且其前一篇恰好时第 i-1 篇，返回 i-1。\n当遍历完整个数组均为找到时，表明最后一篇被引用数仍 ≥ len(citations)，返回 len(citations)。\nfunc hIndex(citations []int) int { sort.Sort(sort.Reverse(sort.IntSlice(citations))) for i, num := range citations { if num \u0026lt; i+1 { return i } } return len(citations) }  复杂度  时间复杂度：$ O(NlogN), N=len(citations) $ 空间复杂度：$ O(logN) $  ","date":"2021-07-11T12:04:41+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-274.-h-%E6%8C%87%E6%95%B0/","title":"Leetcode 274. H 指数"},{"content":" 链接： https://leetcode-cn.com/problems/time-based-key-value-store/\n难度： 中等\n题目描述 创建一个基于时间的键值存储类 TimeMap，它支持下面两个操作：\n set(string key, string value, int timestamp)  存储键 key、值 value，以及给定的时间戳 timestamp。\n get(string key, int timestamp)  返回先前调用 set(key, value, timestamp_prev) 所存储的值，其中 timestamp_prev \u0026lt;= timestamp。 如果有多个这样的值，则返回对应最大的 timestamp_prev 的那个值。 如果没有值，则返回空字符串（\u0026quot;\u0026quot;）。   示例1：  输入：inputs = [\u0026ldquo;TimeMap\u0026rdquo;,\u0026ldquo;set\u0026rdquo;,\u0026ldquo;get\u0026rdquo;,\u0026ldquo;get\u0026rdquo;,\u0026ldquo;set\u0026rdquo;,\u0026ldquo;get\u0026rdquo;,\u0026ldquo;get\u0026rdquo;], inputs = [[],[\u0026ldquo;foo\u0026rdquo;,\u0026ldquo;bar\u0026rdquo;,1],[\u0026ldquo;foo\u0026rdquo;,1],[\u0026ldquo;foo\u0026rdquo;,3],[\u0026ldquo;foo\u0026rdquo;,\u0026ldquo;bar2\u0026rdquo;,4],[\u0026ldquo;foo\u0026rdquo;,4],[\u0026ldquo;foo\u0026rdquo;,5]]\n输出：[null,null,\u0026ldquo;bar\u0026rdquo;,\u0026ldquo;bar\u0026rdquo;,null,\u0026ldquo;bar2\u0026rdquo;,\u0026ldquo;bar2\u0026rdquo;]\n解释：\nTimeMap kv;\nkv.set(\u0026ldquo;foo\u0026rdquo;, \u0026ldquo;bar\u0026rdquo;, 1); // 存储键 \u0026ldquo;foo\u0026rdquo; 和值 \u0026ldquo;bar\u0026rdquo; 以及时间戳 timestamp = 1\nkv.get(\u0026ldquo;foo\u0026rdquo;, 1); // 输出 \u0026ldquo;bar\u0026rdquo;\nkv.get(\u0026ldquo;foo\u0026rdquo;, 3); // 输出 \u0026ldquo;bar\u0026rdquo; 因为在时间戳 3 和时间戳 2 处没有对应 \u0026ldquo;foo\u0026rdquo; 的值，所以唯一的值位于时间戳 1 处（即 \u0026gt; \u0026ldquo;bar\u0026rdquo;）\nkv.set(\u0026ldquo;foo\u0026rdquo;, \u0026ldquo;bar2\u0026rdquo;, 4);\nkv.get(\u0026ldquo;foo\u0026rdquo;, 4); // 输出 \u0026ldquo;bar2\u0026rdquo;\nkv.get(\u0026ldquo;foo\u0026rdquo;, 5); // 输出 \u0026ldquo;bar2\u0026rdquo;\n 示例2：  输入：inputs = [\u0026ldquo;TimeMap\u0026rdquo;,\u0026ldquo;set\u0026rdquo;,\u0026ldquo;set\u0026rdquo;,\u0026ldquo;get\u0026rdquo;,\u0026ldquo;get\u0026rdquo;,\u0026ldquo;get\u0026rdquo;,\u0026ldquo;get\u0026rdquo;,\u0026ldquo;get\u0026rdquo;], inputs = [[],[\u0026ldquo;love\u0026rdquo;,\u0026ldquo;high\u0026rdquo;,10],[\u0026ldquo;love\u0026rdquo;,\u0026ldquo;low\u0026rdquo;,20],[\u0026ldquo;love\u0026rdquo;,5],[\u0026ldquo;love\u0026rdquo;,10],[\u0026ldquo;love\u0026rdquo;,15],[\u0026ldquo;love\u0026rdquo;,20],[\u0026ldquo;love\u0026rdquo;,25]]\n输出：[null,null,null,\u0026ldquo;\u0026rdquo;,\u0026ldquo;high\u0026rdquo;,\u0026ldquo;high\u0026rdquo;,\u0026ldquo;low\u0026rdquo;,\u0026ldquo;low\u0026rdquo;]\n 提示：  所有的键/值字符串都是小写的。 所有的键/值字符串长度都在 [1, 100] 范围内。 所有 TimeMap.set 操作中的时间戳 timestamps 都是严格递增的。 1 \u0026lt;= timestamp \u0026lt;= 107 TimeMap.set 和 TimeMap.get 函数在每个测试用例中将（组合）调用总计 120000 次。  解题思路 哈希+二分查找 利用哈希表作为存储。每个 key 记录按照 timestamp 顺序记录的数组，数组元素记录 value 和 timestamp 。\n Set ，由于 timestamp 严格递增，只需将 value 和 timestamp 添加到对应数组的尾部； Get ，利用数组的有序性，使用二分查找，找到不大于 timestamp 的首个值。\ntype Value struct { value string timestamp int } type TimeMap struct { hash map[string][]*Value } /** Initialize your data structure here. */ func Constructor() TimeMap { return TimeMap{ hash: make(map[string][]*Value), } } func (this *TimeMap) Set(key string, value string, timestamp int) { this.hash[key] = append(this.hash[key], \u0026amp;Value{ value: value, timestamp: timestamp, }) } func (this *TimeMap) Get(key string, timestamp int) string { t := this.hash[key] l, r := 0, len(t) for l \u0026lt; r { if l+1 == r { if t[l].timestamp \u0026lt;= timestamp { return t[l].value } else { return \u0026#34;\u0026#34; } } mid := (l + r) / 2 if t[mid].timestamp \u0026gt; timestamp { r = mid } else { l = mid } } return \u0026#34;\u0026#34; }   复杂度  时间复杂度：  Set：$ O(1) $ Get：$ O(logN), N=len(keys) $  空间复杂度：$ O(N) $  ","date":"2021-07-10T11:47:18+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-981.-%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E9%94%AE%E5%80%BC%E5%AD%98%E5%82%A8/","title":"Leetcode 981. 基于时间的键值存储"},{"content":" 链接： https://leetcode-cn.com/problems/find-majority-element-lcci/\n难度： 简单\n题目描述 数组中占比超过一半的元素称之为主要元素。给你一个 整数 数组，找出其中的主要元素。若没有，返回 -1 。请设计时间复杂度为 $O(N)$ 、空间复杂度为 $O(1)$ 的解决方案。\n示例 1：  输入：[1,2,5,9,5,9,5,5,5]\n输出：5\n 示例 2：  输入：[3,2]\n输出：-1\n 示例 3：  输入：[2,2,1,1,1,2,2]\n输出：2\n 解题思路 哈希计数 遍历数组，记录每个数出现的次数，直到某个数 num 出现的次数大于数组长度的一半则返回 num，否则返回 -1\nfunc majorityElement(nums []int) int { cnt := make(map[int]int) for _, num := range nums { cnt[num]++ if cnt[num] \u0026gt; len(nums)/2 { return num } } return -1 }  复杂度  时间复杂度：$ O(N) $ 空间复杂度：$ O(N) $  排序 将数组排序，依次统计连续相同数字的数量，直到满足条件为止。\nfunc majorityElement(nums []int) int { if len(nums) == 1 { return nums[0] } sort.Ints(nums) cnt := 1 for i := 1; i \u0026lt; len(nums); i++ { if nums[i] == nums[i-1] { cnt++ if cnt \u0026gt; len(nums)/2 { return nums[i] } } else { cnt = 1 } } return -1 }  复杂度  时间复杂度：$ O(NlogN) $ 空间复杂度：$ O(1) $  摩尔投票算法 这一算法应用的问题原型是在集合中寻找可能存在的多数元素，这一元素在输入的序列重复出现并占到了序列元素的一半以上。\n假设存在占到序列元素一半以上的众数，每次将两个不相同的两个数消除，直到最后剩下的数字即为该数。\n如果一个序列中没有占到多数的元素，那么第一次的结果就可能是无效的随机元素，所以在第一遍遍历之后应该再进行一个遍历以统计第一次算法遍历的结果出现次数，以确定其是否占到了序列元素的一半以上。\n算法步骤如下：\n 用 major 和 cnt 记录主要元素和其数量，初始 cnt 为 0； 当 cnt 数量为 0 时，将 major 设置为当前元素； 当当前元素 num 和 major 不同时，cnt 减一； 当当前元素 num 和 major 相同时，cnt 加一； 一次遍历后，major 即为选出来的元素； 二次遍历统计 major，验证其是否占到了序列元素的一半以上。\nfunc majorityElement(nums []int) int { major := 0 cnt := 0 for _, num := range nums { if cnt == 0 { major = num cnt++ continue } if num == major { cnt++ } else { cnt-- } } cnt = 0 for _, num := range nums { if num == major { cnt++ } } if cnt \u0026gt; len(nums)/2 { return major } return -1 }   复杂度  时间复杂度：$ O(N) $ 空间复杂度：$ O(1) $  ","date":"2021-07-09T10:46:07+08:00","permalink":"https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%9817-10.-%E4%B8%BB%E8%A6%81%E5%85%83%E7%B4%A0/","title":"面试题17 10. 主要元素"},{"content":" 链接： https://leetcode-cn.com/problems/binary-subarrays-with-sum/\n难度： 中等\n题目描述 给你一个二元数组 nums ，和一个整数 goal ，请你统计并返回有多少个和为 goal 的 非空 子数组。\n子数组 是数组的一段连续部分。\n示例 1：  输入：nums = [1,0,1,0,1], goal = 2\n输出：4\n解释：\n有 4 个满足题目要求的子数组：[1,0,1]、[1,0,1,0]、[0,1,0,1]、[1,0,1]\n 示例 2：  输入：nums = [0,0,0,0,0], goal = 0\n输出：15\n 提示：  1 \u0026lt;= nums.length \u0026lt;= 3 * 104 nums[i] 不是 0 就是 1 0 \u0026lt;= goal \u0026lt;= nums.length  解题思路 哈希 假设满足条件的子数组下标为 [i, j) ，则以 i 和 j 为结尾的两个前缀数组的前缀和记作 sum[i]、sum[j] ，有 goal = sum[j] - sum[i]。\n将上式变换为：sum[i] = sum[j] - goal ，故可以用哈希表记录前缀和出现的次数，当遍历到 j 时，将 sum[j] 出现的次数加入到结果中。\nfunc numSubarraysWithSum(nums []int, goal int) int { cnt := make(map[int]int) res := 0 sum := 0 for _, num := range nums { cnt[sum]++ sum += num res += cnt[sum-goal] } return res }  复杂度  时间复杂度：$ O(N), N=len(nums) $ 空间复杂度：$ O(N) $  ","date":"2021-07-08T15:11:00+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-930.-%E5%92%8C%E7%9B%B8%E5%90%8C%E7%9A%84%E4%BA%8C%E5%85%83%E5%AD%90%E6%95%B0%E7%BB%84/","title":"Leetcode 930. 和相同的二元子数组"},{"content":" 链接： https://leetcode-cn.com/problems/count-good-meals/\n难度： 中等\n题目描述 大餐 是指 恰好包含两道不同餐品 的一餐，其美味程度之和等于 2 的幂。\n你可以搭配 任意 两道餐品做一顿大餐。\n给你一个整数数组 deliciousness ，其中 deliciousness[i] 是第 i​​​​​​​​​​​​​​ 道餐品的美味程度，返回你可以用数组中的餐品做出的不同 大餐 的数量。结果需要对 109 + 7 取余。\n注意，只要餐品下标不同，就可以认为是不同的餐品，即便它们的美味程度相同。\n示例 1：  输入：deliciousness = [1,3,5,7,9]\n输出：4\n解释：大餐的美味程度组合为 (1,3) 、(1,7) 、(3,5) 和 (7,9) 。\n它们各自的美味程度之和分别为 4 、8 、8 和 16 ，都是 2 的幂。\n 示例 2:  输入：deliciousness = [1,1,1,3,3,3,7]\n输出：15\n解释：大餐的美味程度组合为 3 种 (1,1) ，9 种 (1,3) ，和 3 种 (1,7) 。\n 提示：  1 \u0026lt;= deliciousness.length \u0026lt;= 105 0 \u0026lt;= deliciousness[i] \u0026lt;= 220  解题思路 哈希计数 通过哈希表 foodCnt 记录每个美味程度的菜品数量。\n对于每个美味程度 d，可以求得与其组成大餐的另一道菜品的所有美味程度 power - d，将 foodCnt[d]*foodCnt[power-d]\u0008 即可得到这两种美味程度组成的大餐数量\n上述方式可能会重复计算，有两个地方需要特殊处理：\n 当 d == power -d 时，问题变成了从 foodCnt[d] 道菜品中找出两个不同的菜品，这是个组合问题，其结果为 foodCnt[d]*(foodCnt[d]-1)/2； 第一次选中 d，和第一次选中 power-d 存在重复计算，可以限制 power-d \u0026gt;= d，则仅计算依次。\nfunc countPairs(deliciousness []int) int { const MOD = 1e9 + 7 sum := 0 foodCnt := make(map[int]int) for _, d := range deliciousness { foodCnt[d]++ } for d, cnt := range foodCnt { for power := 1; power \u0026lt; math.MaxInt32 \u0026amp;\u0026amp; power \u0026gt; 0; power \u0026lt;\u0026lt;= 1 { another := power - d if another \u0026lt; d || foodCnt[another] == 0 { continue } if another == d { sum += cnt * (cnt - 1) / 2 % MOD } else { sum += (foodCnt[another] * cnt) % MOD } sum %= MOD } } return sum }   复杂度  时间复杂度：$ O(NlogB), N=len(deliciousness) B=max(deliciousness[i])$ 空间复杂度：O(N)  ","date":"2021-07-07T10:28:11+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1711.-%E5%A4%A7%E9%A4%90%E8%AE%A1%E6%95%B0/","title":"Leetcode 1711. 大餐计数"},{"content":" 链接： https://leetcode-cn.com/problems/display-table-of-food-orders-in-a-restaurant/\n难度： 中等\n题目描述 给你一个数组 orders ，表示客户在餐厅中完成的订单，确切地说， orders[i]=[customerNamei,tableNumberi,foodItemi] ，其中 customerNamei 是客户的姓名，tableNumberi 是客户所在餐桌的桌号，而 foodItemi 是客户点的餐品名称。\n请你返回该餐厅的 点菜展示表 。在这张表中，表中第一行为标题，其第一列为餐桌桌号 “Table” ，后面每一列都是按字母顺序排列的餐品名称。接下来每一行中的项则表示每张餐桌订购的相应餐品数量，第一列应当填对应的桌号，后面依次填写下单的餐品数量。\n注意：客户姓名不是点菜展示表的一部分。此外，表中的数据行应该按餐桌桌号升序排列。\n示例 1：  输入：orders = [[\u0026ldquo;David\u0026rdquo;,\u0026ldquo;3\u0026rdquo;,\u0026ldquo;Ceviche\u0026rdquo;],[\u0026ldquo;Corina\u0026rdquo;,\u0026ldquo;10\u0026rdquo;,\u0026ldquo;Beef Burrito\u0026rdquo;],[\u0026ldquo;David\u0026rdquo;,\u0026ldquo;3\u0026rdquo;,\u0026ldquo;Fried Chicken\u0026rdquo;],[\u0026ldquo;Carla\u0026rdquo;,\u0026ldquo;5\u0026rdquo;,\u0026ldquo;Water\u0026rdquo;],[\u0026ldquo;Carla\u0026rdquo;,\u0026ldquo;5\u0026rdquo;,\u0026ldquo;Ceviche\u0026rdquo;],[\u0026ldquo;Rous\u0026rdquo;,\u0026ldquo;3\u0026rdquo;,\u0026ldquo;Ceviche\u0026rdquo;]]\n输出：[[\u0026ldquo;Table\u0026rdquo;,\u0026ldquo;Beef Burrito\u0026rdquo;,\u0026ldquo;Ceviche\u0026rdquo;,\u0026ldquo;Fried Chicken\u0026rdquo;,\u0026ldquo;Water\u0026rdquo;],[\u0026ldquo;3\u0026rdquo;,\u0026ldquo;0\u0026rdquo;,\u0026ldquo;2\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;0\u0026rdquo;],[\u0026ldquo;5\u0026rdquo;,\u0026ldquo;0\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;0\u0026rdquo;,\u0026ldquo;1\u0026rdquo;],[\u0026ldquo;10\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;0\u0026rdquo;,\u0026ldquo;0\u0026rdquo;,\u0026ldquo;0\u0026rdquo;]]\n解释：\n点菜展示表如下所示：\nTable,Beef Burrito,Ceviche,Fried Chicken,Water\n3 ,0 ,2 ,1 ,0\n5 ,0 ,1 ,0 ,1\n10 ,1 ,0 ,0 ,0\n对于餐桌 3：David 点了 \u0026ldquo;Ceviche\u0026rdquo; 和 \u0026ldquo;Fried Chicken\u0026rdquo;，而 Rous 点了 \u0026ldquo;Ceviche\u0026rdquo;\n而餐桌 5：Carla 点了 \u0026ldquo;Water\u0026rdquo; 和 \u0026ldquo;Ceviche\u0026rdquo;\n餐桌 10：Corina 点了 \u0026ldquo;Beef Burrito\u0026rdquo;\n 示例 2:  输入：orders = [[\u0026ldquo;James\u0026rdquo;,\u0026ldquo;12\u0026rdquo;,\u0026ldquo;Fried Chicken\u0026rdquo;],[\u0026ldquo;Ratesh\u0026rdquo;,\u0026ldquo;12\u0026rdquo;,\u0026ldquo;Fried Chicken\u0026rdquo;],[\u0026ldquo;Amadeus\u0026rdquo;,\u0026ldquo;12\u0026rdquo;,\u0026ldquo;Fried Chicken\u0026rdquo;],[\u0026ldquo;Adam\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;Canadian Waffles\u0026rdquo;],[\u0026ldquo;Brianna\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;Canadian Waffles\u0026rdquo;]]\n输出：[[\u0026ldquo;Table\u0026rdquo;,\u0026ldquo;Canadian Waffles\u0026rdquo;,\u0026ldquo;Fried Chicken\u0026rdquo;],[\u0026ldquo;1\u0026rdquo;,\u0026ldquo;2\u0026rdquo;,\u0026ldquo;0\u0026rdquo;],[\u0026ldquo;12\u0026rdquo;,\u0026ldquo;0\u0026rdquo;,\u0026ldquo;3\u0026rdquo;]]\n解释：\n对于餐桌 1：Adam 和 Brianna 都点了 \u0026ldquo;Canadian Waffles\u0026rdquo;\n而餐桌 12：James, Ratesh 和 Amadeus 都点了 \u0026ldquo;Fried Chicken\u0026rdquo;\n 示例 3:  输入：orders = [[\u0026ldquo;Laura\u0026rdquo;,\u0026ldquo;2\u0026rdquo;,\u0026ldquo;Bean Burrito\u0026rdquo;],[\u0026ldquo;Jhon\u0026rdquo;,\u0026ldquo;2\u0026rdquo;,\u0026ldquo;Beef Burrito\u0026rdquo;],[\u0026ldquo;Melissa\u0026rdquo;,\u0026ldquo;2\u0026rdquo;,\u0026ldquo;Soda\u0026rdquo;]]\n输出：[[\u0026ldquo;Table\u0026rdquo;,\u0026ldquo;Bean Burrito\u0026rdquo;,\u0026ldquo;Beef Burrito\u0026rdquo;,\u0026ldquo;Soda\u0026rdquo;],[\u0026ldquo;2\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;1\u0026rdquo;]]\n 提示：  1 \u0026lt;= orders.length \u0026lt;= 5 * 104 orders[i].length == 3 1 \u0026lt;= customerNamei.length, foodItemi.length \u0026lt;= 20 customerNamei 和 foodItemi 由大小写英文字母及空格字符 ' ' 组成。 tableNumberi 是 1 到 500 范围内的整数。  解题思路 哈希计数 遍历所有每个订单，记录同一桌号每种菜品的数量，然后根据桌号顺序，和菜品顺序生成结果。\nfunc displayTable(orders [][]string) [][]string { tableFoodsCnt := make(map[int]map[string]int) foods := make([]string, 0, len(orders)) // 菜品名单 \tisAddToFoods := make(map[string]bool) // 去重 \tfor _, order := range orders { // 加入菜品名单 \tif !isAddToFoods[order[2]] { foods = append(foods, order[2]) isAddToFoods[order[2]] = true } // 统计数量 \ttable, _ := strconv.Atoi(order[1]) if tableFoodsCnt[table] == nil { tableFoodsCnt[table] = make(map[string]int) } tableFoodsCnt[table][order[2]]++ } // 菜品排序 \tsort.Strings(foods) // 桌号排序 \ttables := make([]int, 0, len(tableFoodsCnt)) for table := range tableFoodsCnt { tables = append(tables, table) } sort.Ints(tables) // 生成结果 \tres := make([][]string, len(tables)+1) res[0] = make([]string, 0, len(foods)+1) // 表头 \tres[0] = append(res[0], \u0026#34;Table\u0026#34;) for _, food := range foods { res[0] = append(res[0], food) } // 填表 \ti := 1 for _, table := range tables { res[i] = make([]string, 0, len(foods)+1) res[i] = append(res[i], strconv.FormatInt(int64(table), 10)) // 桌号 \t// 菜品数 \tfor _, food := range foods { res[i] = append(res[i], strconv.FormatInt(int64(tableFoodsCnt[table][food]), 10)) } i++ } return res }  复杂度  时间复杂度：$ O(NlogN), N=len(orders) $ 空间复杂度：O(N)  ","date":"2021-07-06T09:20:22+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1418.-%E7%82%B9%E8%8F%9C%E5%B1%95%E7%A4%BA%E8%A1%A8/","title":"Leetcode 1418. 点菜展示表"},{"content":" 链接： https://leetcode-cn.com/problems/number-of-atoms/\n难度： 困难\n题目描述 给定一个化学式 formula （作为字符串），返回每种原子的数量。\n原子总是以一个大写字母开始，接着跟随0个或任意个小写字母，表示原子的名字。\n如果数量大于 1，原子后会跟着数字表示原子的数量。如果数量等于 1 则不会跟数字。例如，H2O 和 H2O2 是可行的，但 H1O2 这个表达是不可行的。\n两个化学式连在一起是新的化学式。例如 H2O2He3Mg4 也是化学式。\n一个括号中的化学式和数字（可选择性添加）也是化学式。例如 (H2O2) 和 (H2O2)3 是化学式。\n给定一个化学式 formula ，返回所有原子的数量。格式为：第一个（按字典序）原子的名字，跟着它的数量（如果数量大于 1），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于 1），以此类推。\n示例1：  输入：formula = \u0026ldquo;H2O\u0026rdquo;\n输出：\u0026ldquo;H2O\u0026rdquo;\n解释：\n原子的数量是 {\u0026lsquo;H\u0026rsquo;: 2, \u0026lsquo;O\u0026rsquo;: 1}。\n 示例2：  输入：formula = \u0026ldquo;Mg(OH)2\u0026rdquo;\n输出：\u0026ldquo;H2MgO2\u0026rdquo;\n解释：\n原子的数量是 {\u0026lsquo;H\u0026rsquo;: 2, \u0026lsquo;Mg\u0026rsquo;: 1, \u0026lsquo;O\u0026rsquo;: 2}。\n 示例3：  输入：formula = \u0026ldquo;K4(ON(SO3)2)2\u0026rdquo;\n输出：\u0026ldquo;K4N2O14S4\u0026rdquo;\n解释：\n原子的数量是 {\u0026lsquo;K\u0026rsquo;: 4, \u0026lsquo;N\u0026rsquo;: 2, \u0026lsquo;O\u0026rsquo;: 14, \u0026rsquo;S\u0026rsquo;: 4}。\n 示例4：  输入：formula = \u0026ldquo;Be32\u0026rdquo;\n输出：\u0026ldquo;Be32\u0026rdquo;\n 提示：  1 \u0026lt;= formula.length \u0026lt;= 1000 formula 由小写英文字母、数字 '(' 和 ')' 组成。 formula 是有效的化学式。  解题思路 栈 依次记录每个元素的数量，当遇到 '(' 时，入栈，直至遇到 ')'：\n 读取其后的数字 cnt ，没有则记为 1 从栈中依次弹出元素，直到遇到 '(' 为止 将这些元素的数量 乘以 cnt ，然后重新放回栈中  重复以上步骤直到遍历完化学式，从栈中取出所有元素，排序，生成结果并返回。\n为避免重复记录过多的元素，通过 map 进行计数，作为栈的元素单位。\nfunc countOfAtoms(formula string) string { // 获取下一个数字 \tgetNum := func(idx *int) int { num := 0 for ; *idx \u0026lt; len(formula); *idx++ { if formula[*idx] \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; formula[*idx] \u0026lt;= \u0026#39;9\u0026#39; { num = num*10 + int(formula[*idx]-\u0026#39;0\u0026#39;) } else { break } } if num == 0 { num = 1 } return num } // 获取下一个元素 \tgetAtom := func(idx *int) string { atom := make([]byte, 0, 2) atom = append(atom, formula[*idx]) for *idx++; *idx \u0026lt; len(formula); *idx++ { if formula[*idx] \u0026gt;= \u0026#39;a\u0026#39; \u0026amp;\u0026amp; formula[*idx] \u0026lt;= \u0026#39;z\u0026#39; { atom = append(atom, formula[*idx]) } else { break } } return string(atom) } // 栈 \tstack := make([]map[string]int, 0, len(formula)) // 入栈 \tmerge := func(tmp *map[string]int) { if len(*tmp) == 0 { return } if len(stack) \u0026gt; 0 \u0026amp;\u0026amp; len(stack[len(stack)-1]) \u0026gt; 0 { for k, v := range *tmp { stack[len(stack)-1][k] += v } } else { stack = append(stack, *tmp) } *tmp = make(map[string]int) } // 计数map \ttmp := make(map[string]int) for i := 0; i \u0026lt; len(formula); { switch formula[i] { // 左括号所有元素入栈 \tcase \u0026#39;(\u0026#39;: merge(\u0026amp;tmp) stack = append(stack, nil) i++ // 右括号，最近左括号范围的元素数量 乘以 括号后的数 \tcase \u0026#39;)\u0026#39;: i++ merge(\u0026amp;tmp) cnt := getNum(\u0026amp;i) for len(stack) \u0026gt; 0 { pairs := stack[len(stack)-1] stack = stack[:len(stack)-1] if pairs == nil { break } for k, v := range pairs { tmp[k] += v * cnt } } merge(\u0026amp;tmp) default: tmp[getAtom(\u0026amp;i)] += getNum(\u0026amp;i) } } // 合并为一个map \tmerge(\u0026amp;tmp) tmp = make(map[string]int) for _, s := range stack { for atom, cnt := range s { tmp[atom] += cnt } } // 字典序排序 \tatoms := make([]string, 0, len(tmp)) for atom := range tmp { atoms = append(atoms, atom) } sort.Strings(atoms) // 生成结果字符串 \tres := make([]byte, 0, len(formula)\u0026lt;\u0026lt;1) for _, atom := range atoms { res = append(res, []byte(atom)...) if tmp[atom] \u0026gt; 1 { res = append(res, []byte(strconv.FormatInt(int64(tmp[atom]), 10))...) } } return string(res) }  复杂度  时间复杂度：O(N2)，其中 N = len(formula) 空间复杂度：O(N)  ","date":"2021-07-05T20:30:53+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-726.-%E5%8E%9F%E5%AD%90%E7%9A%84%E6%95%B0%E9%87%8F/","title":"Leetcode 726. 原子的数量"},{"content":" 链接： https://leetcode-cn.com/problems/set-mismatch/\n难度： 简单\n题目描述 集合 s 包含从 1 到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 丢失了一个数字 并且 有一个数字重复 。\n给定一个数组 nums 代表了集合 S 发生错误后的结果。\n请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。\n示例 1：  输入：nums = [1,2,2,4]\n输出：[2,3]\n 示例 2：  输入：nums = [1,1]\n输出：[1,2]\n 提示：  2 \u0026lt;= nums.length \u0026lt;= 104 1 \u0026lt;= nums[i] \u0026lt;= 104  解题思路 哈希 利用哈希表记录每个数字是否出现，可以找到重复出现过的数字；遍历哈希表可以找到丢失的数字。\nfunc findErrorNums(nums []int) []int { res := []int{0, 0} exist := make([]bool, len(nums)) for _, num := range nums { if exist[num-1] { res[0] = num } exist[num-1] = true } for num, ok := range exist { if !ok { res[1] = num + 1 } } return res }  复杂度  时间复杂度：O(N), N = len(nums) 空间复杂度：O(N)  ","date":"2021-07-04T10:12:40+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-645.-%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88/","title":"Leetcode 645. 错误的集合"},{"content":" 链接： https://leetcode-cn.com/problems/sort-characters-by-frequency/\n难度： 中等\n题目描述 给定一个字符串，请将字符串里的字符按照出现的频率降序排列。\n示例1：  输入:\n\u0026ldquo;tree\u0026rdquo;\n输出:\n\u0026ldquo;eert\u0026rdquo;\n解释:\n\u0026lsquo;e\u0026rsquo;出现两次，\u0026rsquo;r\u0026rsquo;和\u0026rsquo;t\u0026rsquo;都只出现一次。\n因此\u0026rsquo;e\u0026rsquo;必须出现在\u0026rsquo;r\u0026rsquo;和\u0026rsquo;t\u0026rsquo;之前。此外，\u0026rdquo;eetr\u0026rdquo;也是一个有效的答案。\n 示例2：  输入:\n\u0026ldquo;cccaaa\u0026rdquo;\n输出:\n\u0026ldquo;cccaaa\u0026rdquo;\n解释:\n\u0026lsquo;c\u0026rsquo;和\u0026rsquo;a\u0026rsquo;都出现三次。此外，\u0026rdquo;aaaccc\u0026rdquo;也是有效的答案。\n注意\u0026rdquo;cacaca\u0026rdquo;是不正确的，因为相同的字母必须放在一起。\n 示例3：  输入:\n\u0026ldquo;Aabb\u0026rdquo;\n输出:\n\u0026ldquo;bbAa\u0026rdquo;\n解释:\n此外，\u0026rdquo;bbaA\u0026rdquo;也是一个有效的答案，但\u0026rdquo;Aabb\u0026rdquo;是不正确的。\n注意\u0026rsquo;A\u0026rsquo;和\u0026rsquo;a\u0026rsquo;被认为是两种不同的字符。\n 解题思路 计数+排序 统计每个字符出现的次数，按照统计的次数对字符进行排序，然后按照字符顺序和数量展开。\nfunc frequencySort(s string) string { cnt := make(map[byte]int) for i := 0; i \u0026lt; len(s); i++ { cnt[s[i]]++ } chars := make([]byte, 0, len(s)) for char := range cnt { chars = append(chars, char) } sort.Slice(chars, func(i, j int) bool { return cnt[chars[i]] \u0026gt; cnt[chars[j]] }) res := make([]byte, 0, len(s)) for _, char := range chars { res = append(res, bytes.Repeat([]byte{char}, cnt[char])...) } return string(res) }  复杂度  时间复杂度：O(NlogN), N = len(s) 空间复杂度：O(N)  ","date":"2021-07-03T09:35:21+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-451.-%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/","title":"Leetcode 451. 根据字符出现频率排序"},{"content":" 链接： https://leetcode-cn.com/problems/maximum-ice-cream-bars/\n难度： 中等\n题目描述 夏日炎炎，小男孩 Tony 想买一些雪糕消消暑。\n商店中新到 n 支雪糕，用长度为 n 的数组 costs 表示雪糕的定价，其中 costs[i] 表示第 i 支雪糕的现金价格。Tony 一共有 coins 现金可以用于消费，他想要买尽可能多的雪糕。\n给你价格数组 costs 和现金量 coins ，请你计算并返回 Tony 用 coins 现金能够买到的雪糕的 最大数量 。\n注意：Tony 可以按任意顺序购买雪糕。\n示例 1：  输入：costs = [1,3,2,4,1], coins = 7\n输出：4\n解释：Tony 可以买下标为 0、1、2、4 的雪糕，总价为 1 + 3 + 2 + 1 = 7\n 示例 2：  输入：costs = [10,6,8,7,7,8], coins = 5\n输出：0\n解释：Tony 没有足够的钱买任何一支雪糕。\n 示例 3：  输入：costs = [1,6,3,1,2,5], coins = 20\n输出：6\n解释：Tony 可以买下所有的雪糕，总价为 1 + 6 + 3 + 1 + 2 + 5 = 18 。\n 提示：  costs.length == n 1 \u0026lt;= n \u0026lt;= 105 1 \u0026lt;= costs[i] \u0026lt;= 105 1 \u0026lt;= coins \u0026lt;= 108  解题思路 贪心 为了获得 最大数量，优先购买价格最低的雪糕即可，按照雪糕价格进行一次排序，依次选择到买不起为止。\nfunc maxIceCream(costs []int, coins int) int { sort.Ints(costs) for i, cost := range costs { coins -= cost if coins \u0026lt; 0 { return i } } return len(costs) }  复杂度  时间复杂度：O(NlogN) 空间复杂度：O(1)  ","date":"2021-07-02T10:28:04+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1833.-%E9%9B%AA%E7%B3%95%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/","title":"Leetcode 1833. 雪糕的最大数量"},{"content":" 链接： https://leetcode-cn.com/problems/chuan-di-xin-xi/\n难度： 简单\n题目描述 小朋友 A 在和 ta 的小伙伴们玩传信息游戏，游戏规则如下：\n 有 n 名玩家，所有玩家编号分别为 0 ～ n-1，其中小朋友 A 的编号为 0 每个玩家都有固定的若干个可传信息的其他玩家（也可能没有）。传信息的关系是单向的（比如 A 可以向 B 传信息，但 B 不能向 A 传信息）。 每轮信息必须需要传递给另一个人，且信息可重复经过同一个人  给定总玩家数 n，以及按 [玩家编号,对应可传递玩家编号] 关系组成的二维数组 relation。返回信息从小 A (编号 0 ) 经过 k 轮传递到编号为 n-1 的小伙伴处的方案数；若不能到达，返回 0。\n示例1：  输入：n = 5, relation = [[0,2],[2,1],[3,4],[2,3],[1,4],[2,0],[0,4]], k = 3\n输出：3\n解释：信息从小 A 编号 0 处开始，经 3 轮传递，到达编号 4。共有 3 种方案，分别是 0-\u0026gt;2-\u0026gt;0-\u0026gt;4， 0-\u0026gt;2-\u0026gt;1-\u0026gt;4， 0-\u0026gt;2-\u0026gt;3-\u0026gt;4。\n 示例2：  输入：n = 3, relation = [[0,2],[2,1]], k = 2\n输出：0\n解释：信息不能从小 A 处经过 2 轮传递到编号 2\n 限制：  2 \u0026lt;= n \u0026lt;= 10 1 \u0026lt;= k \u0026lt;= 5 1 \u0026lt;= relation.length \u0026lt;= 90, 且 relation[i].length == 2 0 \u0026lt;= relation[i][0],relation[i][1] \u0026lt; n 且 relation[i][0] != relation[i][1]  解题思路 深度优先搜索 从 0 开始进行深度优先搜索，结点可以重复到达，深度限制为 k，最后的结点为 n-1 时，计数+1。\n为快速找到某个玩家可达的下一个玩家，用 map 记录。\nfunc numWays(n int, relation [][]int, k int) int { deliver := make(map[int][]int, len(relation)) for _, pair := range relation { deliver[pair[0]] = append(deliver[pair[0]], pair[1]) } var dfs func(player int, depth int) int dfs = func(player int, depth int) int { if depth == k { if player == n-1 { return 1 } return 0 } res := 0 for _, nextPlayer := range deliver[player] { res += dfs(nextPlayer, depth+1) } return res } return dfs(0, 0) }  复杂度  时间复杂度：O(nk) 空间复杂度：O(n+k+len(relation))  动态规划 dp[i][j] 表示第 i 轮传递后，信息传递到第 j 个玩家的方案数量，很容易得到状态转移方程：\n dp[0][k] = 1 dp[i][k] = dp[i-1][j] + 1, (j, k) ∈ relation  注意到每次遍历下一行仅依赖上一行，可以对空间做进一步优化，将矩阵压缩到两个数组。\nfunc numWays(n int, relation [][]int, k int) int { dp := make([]int, n) dp[0] = 1 for i := 0; i \u0026lt; k; i++ { next := make([]int, n) for _, r := range relation { next[r[1]] += dp[r[0]] } dp = next } return dp[n-1] }  复杂度  时间复杂度：O(n*len(relation)) 空间复杂度：O(n)  ","date":"2021-07-01T11:14:31+08:00","permalink":"https://xianlianghe0123.github.io/p/lcp-07.-%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF/","title":"LCP 07. 传递信息"},{"content":" 链接： https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\n难度： 困难\n题目描述 请实现两个函数，分别用来序列化和反序列化二叉树。\n你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。\n提示：输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。\n示例1：  输入：root = [1,2,3,null,null,4,5]\n输出：[1,2,3,null,null,4,5]\n 解题思路 先序遍历 序列化时，先序遍历整个二叉树，将遍历到的每个结点按顺序加入列表中。需要将遍历到的空结点也加入到列表中，作为分割。\n反序列化时，按照列表顺序构建二叉树，遇到空结点表示该分支已结束，回到另一个分支处，继续构造结点。\nclass Codec: def serialize(self, root): \u0026#34;\u0026#34;\u0026#34;Encodes a tree to a single string. :type root: TreeNode :rtype: str \u0026#34;\u0026#34;\u0026#34; list = [] def dfs(node): if node == None: list.append(\u0026#34;None\u0026#34;) else: list.append(str(node.val)) dfs(node.left) dfs(node.right) dfs(root) return \u0026#34;,\u0026#34;.join(list) def deserialize(self, data): \u0026#34;\u0026#34;\u0026#34;Decodes your encoded data to tree. :type data: str :rtype: TreeNode \u0026#34;\u0026#34;\u0026#34; list = data.split(\u0026#34;,\u0026#34;) i = 0 def dfs(): nonlocal i if list[i] == \u0026#34;None\u0026#34;: i += 1 return None node = TreeNode(int(list[i])) i += 1 node.left = dfs() node.right = dfs() return node return dfs()  复杂度  时间复杂度：O(N) 空间复杂度：O(N)  ","date":"2021-06-30T15:51:24+08:00","permalink":"https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-37.-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"剑指 Offer 37. 序列化二叉树"},{"content":" 链接： https://leetcode-cn.com/problems/excel-sheet-column-title/\n难度： 简单\n题目描述 给定一个正整数，返回它在 Excel 表中相对应的列名称。\n例如，\n 1 -\u0026gt; A\n2 -\u0026gt; B\n3 -\u0026gt; C\n\u0026hellip;\n26 -\u0026gt; Z\n27 -\u0026gt; AA\n28 -\u0026gt; AB\n\u0026hellip;\n 示例1：  输入: 1\n输出: \u0026ldquo;A\u0026rdquo;\n 示例2：  输入: 28\n输出: \u0026ldquo;AB\u0026rdquo;\n 示例3：  输入: 701\n输出: \u0026ldquo;ZY\u0026rdquo;\n 解题思路 数学 通过分析题意可以得知，该题是一个进制转换，将一个10进制的数转换为26进制。\n通过数学方法，逐次模26取余数，即可求得倒序的26进制每一位，反转该序列即可求得转换后的数。\n注意：该26进制从1开始计数，每次取模前应减1。\nfunc convertToTitle(columnNumber int) string { res := make([]byte, 0, 10) for ; columnNumber \u0026gt; 0; columnNumber /= 26 { columnNumber = columnNumber - 1 res = append(res, \u0026#39;A\u0026#39;+byte((columnNumber)%26)) } for i := 0; i \u0026lt; len(res)/2; i++ { res[i], res[len(res)-1-i] = res[len(res)-1-i], res[i] } return string(res) }  复杂度  时间复杂度：O(log26columnNumber) 空间复杂度：O(log26columnNumber)  ","date":"2021-06-29T10:26:51+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-168.-excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/","title":"Leetcode 168. Excel表列名称"},{"content":" 链接： https://leetcode-cn.com/problems/bus-routes/\n难度： 困难\n题目描述 给你一个数组 routes ，表示一系列公交线路，其中每个 routes[i] 表示一条公交线路，第 i 辆公交车将会在上面循环行驶。\n 例如，路线 routes[0] = [1, 5, 7] 表示第 0 辆公交车会一直按序列 1 -\u0026gt; 5 -\u0026gt; 7 -\u0026gt; 1 -\u0026gt; 5 -\u0026gt; 7 -\u0026gt; 1 -\u0026gt; ... 这样的车站路线行驶。  现在从 source 车站出发（初始时不在公交车上），要前往 target 车站。 期间仅可乘坐公交车。\n求出 最少乘坐的公交车数量 。如果不可能到达终点车站，返回 -1 。\n示例 1：  输入：routes = [[1,2,7],[3,6,7]], source = 1, target = 6\n输出：2\n解释：最优策略是先乘坐第一辆公交车到达车站 7 , 然后换乘第二辆公交车到车站 6 。\n 示例 2：  输入：routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\n输出：-1\n 提示：  1 \u0026lt;= routes.length \u0026lt;= 500. 1 \u0026lt;= routes[i].length \u0026lt;= 105 routes[i] 中的所有值 互不相同 sum(routes[i].length) \u0026lt;= 105 0 \u0026lt;= routes[i][j] \u0026lt; 106 0 \u0026lt;= source, target \u0026lt; 106  解题思路 广度优先搜索 由于借助公交车进行移动，可以以公交车作为基本单位实行广度优先搜索，在每个站点搜索所有可乘坐公交车，直到某一条可以到达终点，或者乘坐过可乘坐的所有公交车均不能到达终点为止。\n需要对起点和终点相同的情况进行特判。\nfunc numBusesToDestination(routes [][]int, source int, target int) int { if source == target { return 0 } type Pair struct { Bus int Step int } buses := make(map[int][]int) for i, route := range routes { for _, station := range route { buses[station] = append(buses[station], i) } } isVisit := make([]bool, len(routes)) queue := make([]*Pair, 0, len(isVisit)) for _, bus := range buses[source] { queue = append(queue, \u0026amp;Pair{ Bus: bus, Step: 1, }) isVisit[bus] = true } for len(queue) \u0026gt; 0 { bus := queue[0].Bus step := queue[0].Step queue = queue[1:] for _, b := range buses[target] { if b == bus { return step } } for _, station := range routes[bus] { for _, b := range buses[station] { if !isVisit[b] { queue = append(queue, \u0026amp;Pair{ Bus: b, Step: step + 1, }) isVisit[b] = true } } } } return -1 }  复杂度  时间复杂度：O(N*M) 空间复杂度：O(N*M)  ","date":"2021-06-28T10:54:56+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-815.-%E5%85%AC%E4%BA%A4%E8%B7%AF%E7%BA%BF/","title":"Leetcode 815. 公交路线"},{"content":" 链接： https://leetcode-cn.com/problems/snakes-and-ladders/\n难度： 中等\n题目描述 N x N 的棋盘 board 上，按从 1 到 N*N 的数字给方格编号，编号 从左下角开始，每一行交替方向。\n例如，一块 6 x 6 大小的棋盘，编号如下：\nr 行 c 列的棋盘，按前述方法编号，棋盘格中可能存在 “蛇” 或 “梯子”；如果 board[r][c] != -1，那个蛇或梯子的目的地将会是 board[r][c]。\n玩家从棋盘上的方格 1 （总是在最后一行、第一列）开始出发。\n每一回合，玩家需要从当前方格 x 开始出发，按下述要求前进：\n 选定目标方格：选择从编号 x+1，x+2，x+3，x+4，x+5，或者 x+6 的方格中选出一个目标方格 s ，目标方格的编号 \u0026lt;= N*N。  该选择模拟了掷骰子的情景，无论棋盘大小如何，你的目的地范围也只能处于区间 [x+1, x+6] 之间。  传送玩家：如果目标方格 S 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 S。 注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，你也不会继续移动。  返回达到方格 N*N 所需的最少移动次数，如果不可能，则返回 -1。\n示例：  输入：[\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,35,-1,-1,13,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,15,-1,-1,-1,-1]]\n输出：4\n解释：\n首先，从方格 1 [第 5 行，第 0 列] 开始。\n你决定移动到方格 2，并必须爬过梯子移动到到方格 15。\n然后你决定移动到方格 17 [第 3 行，第 5 列]，必须爬过蛇到方格 13。\n然后你决定移动到方格 14，且必须通过梯子移动到方格 35。\n然后你决定移动到方格 36, 游戏结束。\n可以证明你需要至少 4 次移动才能到达第 N*N 个方格，所以答案是 4。\n 提示：  2 \u0026lt;= board.length = board[0].length \u0026lt;= 20 board[i][j] 介于 1 和 N*N 之间或者等于 -1。 编号为 1 的方格上没有蛇或梯子。 编号为 N*N 的方格上没有蛇或梯子。  解题思路 广度优先搜索 每次搜索下 6 个格子，当碰到蛇或者梯子时，将跳转位置入队，否则将当前位置入队，步数加一，标记已访问，避免重复搜索。直到到达 N*N返回步数；或队列为空，返回 -1。\nfunc snakesAndLadders(board [][]int) int { type Pair struct { Pos int Step int } isVisit := make([]bool, len(board)*len(board[0])) queue := make([]*Pair, 0, len(isVisit)) queue = append(queue, \u0026amp;Pair{ Pos: 0, Step: 0, }) isVisit[0] = true for len(queue) \u0026gt; 0 { pos := queue[0].Pos step := queue[0].Step queue = queue[1:] if pos == len(isVisit)-1 { return step } for i := 1; i \u0026lt;= 6; i++ { if pos+i \u0026gt;= len(isVisit) { break } row := len(board) - 1 - (pos+i)/len(board[0]) col := (pos + i) % len(board[0]) if (len(board)-1-row)\u0026amp;1 == 1 { col = len(board[0]) - 1 - col } cell := board[row][col] - 1 if cell \u0026lt; 0 { if isVisit[pos+i] { continue } queue = append(queue, \u0026amp;Pair{ Pos: pos + i, Step: step + 1, }) isVisit[pos+i] = true } else if !isVisit[cell] { queue = append(queue, \u0026amp;Pair{ Pos: cell, Step: step + 1, }) isVisit[cell] = true } } } return -1 }  复杂度  时间复杂度：O(N2) 空间复杂度：O(N2)  ","date":"2021-06-27T19:07:10+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-909.-%E8%9B%87%E6%A2%AF%E6%A3%8B/","title":"Leetcode 909. 蛇梯棋"},{"content":" 链接： https://leetcode-cn.com/problems/open-the-lock/\n难度： 中等\n题目描述 你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为 '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。\n锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。\n列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。\n字符串 target 代表可以解锁的数字，你需要给出解锁需要的最小旋转次数，如果无论如何不能解锁，返回 -1 。\n示例1：  输入：deadends = [\u0026ldquo;0201\u0026rdquo;,\u0026ldquo;0101\u0026rdquo;,\u0026ldquo;0102\u0026rdquo;,\u0026ldquo;1212\u0026rdquo;,\u0026ldquo;2002\u0026rdquo;], target = \u0026ldquo;0202\u0026rdquo;\n输出：6\n解释：\n可能的移动序列为 \u0026ldquo;0000\u0026rdquo; -\u0026gt; \u0026ldquo;1000\u0026rdquo; -\u0026gt; \u0026ldquo;1100\u0026rdquo; -\u0026gt; \u0026ldquo;1200\u0026rdquo; -\u0026gt; \u0026ldquo;1201\u0026rdquo; -\u0026gt; \u0026ldquo;1202\u0026rdquo; -\u0026gt; \u0026ldquo;0202\u0026rdquo;。\n注意 \u0026ldquo;0000\u0026rdquo; -\u0026gt; \u0026ldquo;0001\u0026rdquo; -\u0026gt; \u0026ldquo;0002\u0026rdquo; -\u0026gt; \u0026ldquo;0102\u0026rdquo; -\u0026gt; \u0026ldquo;0202\u0026rdquo; 这样的序列是不能解锁的，\n因为当拨动到 \u0026ldquo;0102\u0026rdquo; 时这个锁就会被锁定。\n 示例2：  输入: deadends = [\u0026ldquo;8888\u0026rdquo;], target = \u0026ldquo;0009\u0026rdquo;\n输出：1\n解释：\n把最后一位反向旋转一次即可 \u0026ldquo;0000\u0026rdquo; -\u0026gt; \u0026ldquo;0009\u0026rdquo;\n 示例3：  输入: deadends = [\u0026ldquo;8887\u0026rdquo;,\u0026ldquo;8889\u0026rdquo;,\u0026ldquo;8878\u0026rdquo;,\u0026ldquo;8898\u0026rdquo;,\u0026ldquo;8788\u0026rdquo;,\u0026ldquo;8988\u0026rdquo;,\u0026ldquo;7888\u0026rdquo;,\u0026ldquo;9888\u0026rdquo;], target = \u0026ldquo;8888\u0026rdquo;\n输出：-1\n解释：\n无法旋转到目标数字且不被锁定。\n 示例4：  输入: deadends = [\u0026ldquo;0000\u0026rdquo;], target = \u0026ldquo;8888\u0026rdquo;\n输出：-1\n 提示：  1 \u0026lt;= deadends.length \u0026lt;= 500 deadends[i].length == 4 target.length == 4 target 不在 deadends 之中 target 和 deadends[i] 仅由若干位数字组成  解题思路 广度优先搜索 每次转动一个拨轮，记录转动后的锁状态，以及到目前为止转动的次数，如果未访问过，加入队列，直到首次与target匹配则返回。\n每次入队后将当前锁状态加入到 deadends 中，防止重复搜索。\n需要对一开始即被锁的情况进行特判。\nfunc openLock(deadends []string, target string) int { type Pair struct { Cur string Cnt int } deadendsMap := make(map[string]bool) for _, s := range deadends { deadendsMap[s] = true } if deadendsMap[\u0026#34;0000\u0026#34;] { return -1 } // 广度优先搜索 \tmin := -1 queue := make([]*Pair, 0, 10000) queue = append(queue, \u0026amp;Pair{ Cur: \u0026#34;0000\u0026#34;, Cnt: 0, }) deadendsMap[\u0026#34;0000\u0026#34;] = true for len(queue) \u0026gt; 0 { cur := queue[0].Cur cnt := queue[0].Cnt queue = queue[1:] if cur == target { if min == -1 { min = cnt break } } for i := 0; i \u0026lt; 4; i++ { // 向后旋转 \tt := []byte(cur) t[i] = \u0026#39;0\u0026#39; + ((t[i]-\u0026#39;0\u0026#39;)+1)%10 if !deadendsMap[string(t)] { queue = append(queue, \u0026amp;Pair{ Cur: string(t), Cnt: cnt + 1, }) deadendsMap[string(t)] = true } // 向前旋转 \tt = []byte(cur) t[i] = \u0026#39;0\u0026#39; + ((t[i]-\u0026#39;0\u0026#39;)-1+10)%10 if !deadendsMap[string(t)] { queue = append(queue, \u0026amp;Pair{ Cur: string(t), Cnt: cnt + 1, }) deadendsMap[string(t)] = true } } } return min }  复杂度  时间复杂度：O(bd*d)，其中 b 是数字的进制，d 是转盘数字的位数， 空间复杂度：O(bd*d)  ","date":"2021-06-25T17:34:59+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-752.-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/","title":"Leetcode 752. 打开转盘锁"},{"content":" 链接： https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/\n难度： 简单\n题目描述 请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。\n示例1：  输入：00000000000000000000000000001011\n输出：3\n解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 \u0026lsquo;1\u0026rsquo;。\n 示例 2：  输入：00000000000000000000000010000000\n输出：1\n解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 \u0026lsquo;1\u0026rsquo;。\n 示例 3：  输入：11111111111111111111111111111101\n输出：31\n解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 \u0026lsquo;1\u0026rsquo;。\n 提示：  输入必须是长度为 32 的 二进制串 。  解题思路 计数 每次统计最右边的一位，并向右移动一位。\nfunc hammingWeight(num uint32) int { cnt := 0 for ; num != 0; num \u0026gt;\u0026gt;= 1 { cnt += int(num \u0026amp; 1) } return cnt }  复杂度  时间复杂度：O(logN) 空间复杂度：O(1)  消除 使用lowbit算法，每次消除最右边的 1，直到该数为 0，消除次数即为1的个数 每次统计最右边的一位，并向右移动一位。\nfunc hammingWeight(num uint32) int { cnt := 0 for ; num != 0; cnt++ { num \u0026amp;= num - 1 } return cnt }  复杂度  时间复杂度：O(logN) 空间复杂度：O(1)  ","date":"2021-06-23T21:39:35+08:00","permalink":"https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-15.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/","title":"剑指 Offer 15. 二进制中1的个数"},{"content":" 链接： https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/\n难度： 中等\n题目描述 输入一个字符串，打印出该字符串中字符的所有排列。\n你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。\n示例1：  输入：s = \u0026ldquo;abc\u0026rdquo;\n输出：[\u0026ldquo;abc\u0026rdquo;,\u0026ldquo;acb\u0026rdquo;,\u0026ldquo;bac\u0026rdquo;,\u0026ldquo;bca\u0026rdquo;,\u0026ldquo;cab\u0026rdquo;,\u0026ldquo;cba\u0026rdquo;]\n 提示：  1 \u0026lt;= s 的长度 \u0026lt;= 8  解题思路 回溯 遍历未入栈字符列表，每次选取一个字符入栈，并标记此字符已经入栈，递归的寻找下一个字符，直到所有字符全部入栈，将结果加入集合中。\nfunc permutation(s string) []string { only := make(map[string]bool) choice := make([]bool, len(s)) prefix := make([]byte, 0, len(s)) var backtrack func() backtrack = func() { if len(prefix) == len(s) { only[string(prefix)] = true return } for i := range choice { if choice[i] { continue } prefix = append(prefix, s[i]) choice[i] = true backtrack() choice[i] = false prefix = prefix[:len(prefix)-1] } } backtrack() res := make([]string, 0, 1\u0026lt;\u0026lt;(len(s)-1)) for k := range only { res = append(res, k) } return res }  复杂度  时间复杂度：O(N*N!) 空间复杂度：O(N*N!)  ","date":"2021-06-22T21:43:40+08:00","permalink":"https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-38.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/","title":"剑指 Offer 38. 字符串的排列"},{"content":" 链接： https://leetcode-cn.com/problems/binary-watch/\n难度： 简单\n题目描述 二进制手表顶部有 4 个 LED 代表 小时（0-11），底部的 6 个 LED 代表 分钟（0-59）。每个 LED 代表一个 0 或 1，最低位在右侧。\n 例如，下面的二进制手表读取 \u0026quot;3:25\u0026quot; 。  给你一个整数 turnedOn ，表示当前亮着的 LED 的数量，返回二进制手表可以表示的所有可能时间。你可以 按任意顺序 返回答案。\n小时不会以零开头：\n 例如，\u0026quot;01:00\u0026quot; 是无效的时间，正确的写法应该是 \u0026quot;1:00\u0026quot; 。  分钟必须由两位数组成，可能会以零开头：\n 例如，\u0026quot;10:2\u0026quot; 是无效的时间，正确的写法应该是 \u0026quot;10:02\u0026quot; 。  示例 1：  输入：turnedOn = 1\n输出：[\u0026ldquo;0:01\u0026rdquo;,\u0026ldquo;0:02\u0026rdquo;,\u0026ldquo;0:04\u0026rdquo;,\u0026ldquo;0:08\u0026rdquo;,\u0026ldquo;0:16\u0026rdquo;,\u0026ldquo;0:32\u0026rdquo;,\u0026ldquo;1:00\u0026rdquo;,\u0026ldquo;2:00\u0026rdquo;,\u0026ldquo;4:00\u0026rdquo;,\u0026ldquo;8:00\u0026rdquo;]\n 示例 2：  输入：turnedOn = 9\n输出：[]\n 提示：  0 \u0026lt;= turnedOn \u0026lt;= 10  解题思路 穷举 枚举出所有小时和分钟的合法数，将符合条件的加入到结果列表中\nfunc readBinaryWatch(turnedOn int) []string { res := make([]string, 0, 720) for h := 0; h \u0026lt; 12; h++ { for m := 0; m \u0026lt; 60; m++ { if bits.OnesCount8(uint8(h))+bits.OnesCount8(uint8(m)) == turnedOn { res = append(res, fmt.Sprintf(\u0026#34;%d:%02d\u0026#34;, h, m)) } } } return res }  复杂度  时间复杂度：O(1) 空间复杂度：O(1)  ","date":"2021-06-21T21:27:36+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-401.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8/","title":"Leetcode 401. 二进制手表"},{"content":" 链接： https://leetcode-cn.com/problems/throne-inheritance/\n难度： 中等\n题目描述 一个王国里住着国王、他的孩子们、他的孙子们等等。每一个时间点，这个家庭里有人出生也有人死亡。\n这个王国有一个明确规定的皇位继承顺序，第一继承人总是国王自己。我们定义递归函数 Successor(x, curOrder) ，给定一个人 x 和当前的继承顺序，该函数返回 x 的下一继承人。\n Successor(x, curOrder):\n如果 x 没有孩子或者所有 x 的孩子都在 curOrder 中：\n如果 x 是国王，那么返回 null\n否则，返回 Successor(x 的父亲, curOrder)\n否则，返回 x 不在 curOrder 中最年长的孩子\n 比方说，假设王国由国王，他的孩子 Alice 和 Bob （Alice 比 Bob 年长）和 Alice 的孩子 Jack 组成。\n 一开始， curOrder 为 [\u0026ldquo;king\u0026rdquo;]. 调用 Successor(king, curOrder) ，返回 Alice ，所以我们将 Alice 放入 curOrder 中，得到 [\u0026quot;king\u0026quot;, \u0026quot;Alice\u0026quot;] 。 调用 Successor(Alice, curOrder) ，返回 Jack ，所以我们将 Jack 放入 curOrder 中，得到 [\u0026quot;king\u0026quot;, \u0026quot;Alice\u0026quot;, \u0026quot;Jack\u0026quot;] 。 调用 Successor(Jack, curOrder) ，返回 Bob ，所以我们将 Bob 放入 curOrder 中，得到 [\u0026quot;king\u0026quot;, \u0026quot;Alice\u0026quot;, \u0026quot;Jack\u0026quot;, \u0026quot;Bob\u0026quot;] 。 调用 Successor(Bob, curOrder) ，返回 null 。最终得到继承顺序为 [\u0026quot;king\u0026quot;, \u0026quot;Alice\u0026quot;, \u0026quot;Jack\u0026quot;, \u0026quot;Bob\u0026quot;] 。  通过以上的函数，我们总是能得到一个唯一的继承顺序。\n请你实现 ThroneInheritance 类：\n ThroneInheritance(string kingName) 初始化一个 ThroneInheritance 类的对象。国王的名字作为构造函数的参数传入。 void birth(string parentName, string childName) 表示 parentName 新拥有了一个名为 childName 的孩子。 void death(string name) 表示名为 name 的人死亡。一个人的死亡不会影响 Successor 函数，也不会影响当前的继承顺序。你可以只将这个人标记为死亡状态。 string[] getInheritanceOrder() 返回 除去 死亡人员的当前继承顺序列表。  示例：  输入： [\u0026ldquo;ThroneInheritance\u0026rdquo;, \u0026ldquo;birth\u0026rdquo;, \u0026ldquo;birth\u0026rdquo;, \u0026ldquo;birth\u0026rdquo;, \u0026ldquo;birth\u0026rdquo;, \u0026ldquo;birth\u0026rdquo;, \u0026ldquo;birth\u0026rdquo;, \u0026ldquo;getInheritanceOrder\u0026rdquo;, \u0026ldquo;death\u0026rdquo;, \u0026ldquo;getInheritanceOrder\u0026rdquo;]\n[[\u0026ldquo;king\u0026rdquo;], [\u0026ldquo;king\u0026rdquo;, \u0026ldquo;andy\u0026rdquo;], [\u0026ldquo;king\u0026rdquo;, \u0026ldquo;bob\u0026rdquo;], [\u0026ldquo;king\u0026rdquo;, \u0026ldquo;catherine\u0026rdquo;], [\u0026ldquo;andy\u0026rdquo;, \u0026ldquo;matthew\u0026rdquo;], [\u0026ldquo;bob\u0026rdquo;, \u0026ldquo;alex\u0026rdquo;], [\u0026ldquo;bob\u0026rdquo;, \u0026ldquo;asha\u0026rdquo;], [null], [\u0026ldquo;bob\u0026rdquo;], [null]]\n输出： [null, null, null, null, null, null, null, [\u0026ldquo;king\u0026rdquo;, \u0026ldquo;andy\u0026rdquo;, \u0026ldquo;matthew\u0026rdquo;, \u0026ldquo;bob\u0026rdquo;, \u0026ldquo;alex\u0026rdquo;, \u0026ldquo;asha\u0026rdquo;, \u0026ldquo;catherine\u0026rdquo;], null, [\u0026ldquo;king\u0026rdquo;, \u0026ldquo;andy\u0026rdquo;, \u0026ldquo;matthew\u0026rdquo;, \u0026ldquo;alex\u0026rdquo;, \u0026ldquo;asha\u0026rdquo;, \u0026ldquo;catherine\u0026rdquo;]]\n解释： ThroneInheritance t= new ThroneInheritance(\u0026ldquo;king\u0026rdquo;); // 继承顺序：king\nt.birth(\u0026ldquo;king\u0026rdquo;, \u0026ldquo;andy\u0026rdquo;); // 继承顺序：king \u0026gt; andy\nt.birth(\u0026ldquo;king\u0026rdquo;, \u0026ldquo;bob\u0026rdquo;); // 继承顺序：king \u0026gt; andy \u0026gt; bob\nt.birth(\u0026ldquo;king\u0026rdquo;, \u0026ldquo;catherine\u0026rdquo;); // 继承顺序：king \u0026gt; andy \u0026gt; bob \u0026gt; catherine\nt.birth(\u0026ldquo;andy\u0026rdquo;, \u0026ldquo;matthew\u0026rdquo;); // 继承顺序：king \u0026gt; andy \u0026gt; matthew \u0026gt; bob \u0026gt; catherine\nt.birth(\u0026ldquo;bob\u0026rdquo;, \u0026ldquo;alex\u0026rdquo;); // 继承顺序：king \u0026gt; andy \u0026gt; matthew \u0026gt; bob \u0026gt; alex \u0026gt; catherine\nt.birth(\u0026ldquo;bob\u0026rdquo;, \u0026ldquo;asha\u0026rdquo;); // 继承顺序：king \u0026gt; andy \u0026gt; matthew \u0026gt; bob \u0026gt; alex \u0026gt; asha \u0026gt; catherine\nt.getInheritanceOrder(); // 返回 [\u0026ldquo;king\u0026rdquo;, \u0026ldquo;andy\u0026rdquo;, \u0026ldquo;matthew\u0026rdquo;, \u0026ldquo;bob\u0026rdquo;, \u0026ldquo;alex\u0026rdquo;, \u0026ldquo;asha\u0026rdquo;, \u0026ldquo;catherine\u0026rdquo;]\nt.death(\u0026ldquo;bob\u0026rdquo;); // 继承顺序：king \u0026gt; andy \u0026gt; matthew \u0026gt; bob（已经去世）\u0026gt; alex \u0026gt; asha \u0026gt; catherine\nt.getInheritanceOrder(); // 返回 [\u0026ldquo;king\u0026rdquo;, \u0026ldquo;andy\u0026rdquo;, \u0026ldquo;matthew\u0026rdquo;, \u0026ldquo;alex\u0026rdquo;, \u0026ldquo;asha\u0026rdquo;, \u0026ldquo;catherine\u0026rdquo;]\n 提示：  1 \u0026lt;= kingName.length, parentName.length, childName.length, name.length \u0026lt;= 15 kingName，parentName， childName 和 name 仅包含小写英文字母。 所有的参数 childName 和 kingName 互不相同。 所有 death 函数中的死亡名字 name 要么是国王，要么是已经出生了的人员名字。 每次调用 birth(parentName, childName) 时，测试用例都保证 parentName 对应的人员是活着的。 最多调用 105 次birth 和 death 。 最多调用 10 次 getInheritanceOrder 。  解题思路 树 整个家庭成员的关系显然是一个树状结构，用树来保存家庭成员关系信息，而继承的顺序则是数的前序遍历。\n另外，为快速定位到某个成员，使用一个 map 记录代表每个成员的结点。\ntype Person struct { name string isLive bool children []*Person } type ThroneInheritance struct { root *Person pos map[string]*Person } func Constructor(kingName string) ThroneInheritance { king := \u0026amp;Person{ name: kingName, isLive: true, } return ThroneInheritance{ root: king, pos: map[string]*Person{ kingName: king, }, } } func (this *ThroneInheritance) Birth(parentName string, childName string) { this.pos[childName] = \u0026amp;Person{ name: childName, isLive: true, } this.pos[parentName].children = append(this.pos[parentName].children, this.pos[childName]) } func (this *ThroneInheritance) Death(name string) { this.pos[name].isLive = false } func (this *ThroneInheritance) GetInheritanceOrder() []string { res := make([]string, 0, len(this.pos)) var dfs func(p *Person) dfs = func(p *Person) { if p.isLive { res = append(res, p.name) } for _, child := range p.children { dfs(child) } } dfs(this.root) return res }  复杂度  时间复杂度：  Constructor: O(1) Birth: O(1) Death: O(1) GetInheritanceOrder: O(N)  空间复杂度：O(N)  ","date":"2021-06-20T09:58:32+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1600.-%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/","title":"Leetcode 1600. 皇位继承顺序"},{"content":" 链接： https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/\n难度： 简单\n题目描述 符合下列属性的数组 arr 称为 山脉数组 ：\n arr.length \u0026gt;= 3 存在 i（0 \u0026lt; i \u0026lt; arr.length - 1）使得：  arr[0] \u0026lt; arr[1] \u0026lt; \u0026hellip; arr[i-1] \u0026lt; arr[i] arr[i] \u0026gt; arr[i+1] \u0026gt; \u0026hellip; \u0026gt; arr[arr.length - 1]   给你由整数组成的山脉数组 arr ，返回任何满足 arr[0] \u0026lt; arr[1] \u0026lt; ... arr[i - 1] \u0026lt; arr[i] \u0026gt; arr[i + 1] \u0026gt; ... \u0026gt; arr[arr.length - 1] 的下标 i 。\n示例 1：  输入：arr = [0,1,0]\n输出：1\n 示例 2：  输入：arr = [0,2,1,0]\n输出：1\n 示例 3：  输入：arr = [0,10,5,2]\n输出：1\n 示例 4：  输入：arr = [3,4,5,1]\n输出：2\n 示例 5：  输入：arr = [24,69,100,99,79,78,67,36,26,19]\n输出：2  提示：  3 \u0026lt;= arr.length \u0026lt;= 104 0 \u0026lt;= arr[i] \u0026lt;= 106 题目数据保证 arr 是一个山脉数组  解题思路 暴力求解 遍历数组，找出最大值，返回其下标。\nfunc peakIndexInMountainArray(arr []int) int { max := 0 idx := 0 for i, num := range arr { if max \u0026lt; num { max = num idx = i } } return idx }  复杂度  时间复杂度：O(N) 空间复杂度：O(1)  二分查找 每次获取数组中间的数，并与相邻的两个数做比较：\n 均大于这两个数，说明该数为山顶，返回 大于前一个数，说明左侧均小于该书数，右侧查找 同理，大于后一个数，左侧查找\nfunc peakIndexInMountainArray(arr []int) int { mid := 0 for l, r := 0, len(arr)-1; ; { mid = (l + r) / 2 if arr[mid] \u0026gt; arr[mid-1] { if arr[mid] \u0026gt; arr[mid+1] { break } l = mid } else { r = mid } } return mid }   复杂度  时间复杂度：O(logN) 空间复杂度：O(1)  ","date":"2021-06-15T20:49:55+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-852.-%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95/","title":"Leetcode 852. 山脉数组的峰顶索引"},{"content":" 链接： https://leetcode-cn.com/problems/guess-number-higher-or-lower/\n难度： 简单\n题目描述 猜数字游戏的规则如下：\n 每轮游戏，我都会从 1 到 n 随机选择一个数字。 请你猜选出的是哪个数字。 如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。  你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：\n -1：我选出的数字比你猜的数字小 pick \u0026lt; num 1：我选出的数字比你猜的数字大 pick \u0026gt; num 0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick == num  返回我选出的数字。\n示例 1：  输入：n = 10, pick = 6\n输出：6\n 示例 2：  输入：n = 1, pick = 1\n输出：1\n 示例 3：  输入：n = 2, pick = 1\n输出：1\n 示例 4：  输入：n = 2, pick = 2\n输出：2  提示：  1 \u0026lt;= n \u0026lt;= 231 - 1 1 \u0026lt;= pick \u0026lt;= n  解题思路 二分查找 每次选取中间的数字获取比较结果，等于返回，大于去左半边找，小于去右半边找。\nfunc guessNumber(n int) int { var binSearch func(l, r int) int binSearch = func(l, r int) int { mid := (l + r) / 2 switch guess(mid) { case 0: return mid case -1: return binSearch(l, mid-1) case 1: return binSearch(mid+1, r) } return 0 } return binSearch(1, n) }  复杂度  时间复杂度：O(logN) 空间复杂度：O(1)  ","date":"2021-06-14T10:50:24+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-374.-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/","title":"Leetcode 374. 猜数字大小"},{"content":" 链接： https://leetcode-cn.com/problems/first-bad-version/\n难度： 简单\n题目描述 你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。\n假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。\n你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。\n示例 1：  给定 n = 5，并且 version = 4 是第一个错误的版本。\n调用 isBadVersion(3) -\u0026gt; false\n调用 isBadVersion(5) -\u0026gt; true\n调用 isBadVersion(4) -\u0026gt; true\n所以，4 是第一个错误的版本。  解题思路 二分查找 对于连续的版本号 [i, j] 每次判断版本号 (i+j)/2 是否出错，未出错查找范围缩小到 [(i+j)/2+1, j]，出错缩小到 [i, (i+j)/2]，直到 i = j 即得到首个出错的版本号 i\nfunc firstBadVersion(n int) int { var binSearch func(i, j int) int binSearch = func(i, j int) int { if i == j { return i } mid := (i + j) / 2 if isBadVersion(mid) { return binSearch(i, mid) } else { return binSearch(mid+1, j) } } return binSearch(1, n) }  复杂度  时间复杂度：O(logN) 空间复杂度：O(1)  ","date":"2021-06-13T10:25:24+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-278.-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/","title":"Leetcode 278. 第一个错误的版本"},{"content":" 链接： https://leetcode-cn.com/problems/perfect-squares/\n难度： 中等\n题目描述 给定正整数 *n*，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 *n*。你需要让组成和的完全平方数的个数最少。\n给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。\n完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。\n示例 1：  输入：n = 12\n输出：3\n解释：12 = 4 + 4 + 4\n 示例 2：  输入：n = 13\n输出：2\n解释：13 = 4 + 9\n 注意： 你可以假设： - 1 \u0026lt;= n \u0026lt;= 104\n解题思路 动态规划 dp[i] 表示组成数字 i 的最少完全平方数，易得到状态转移方程：\n dp[0] = 0 dp[i] = min(dp[i-j]+1), j \u0026lt; i 且 j是完全平方数\nfunc change(amount int, coins []int) int { dp = make([]int, amount+1) dp[0] = 1 for i := range coins { for j := 0; j \u0026lt;= amount; j++ { for k := 0; k*coins[i] \u0026lt;= j; k++ { dp[j] += dp[j-k*coins[i]] } } } return dp[amount] }   复杂度  时间复杂度：O(N*√N) 空间复杂度：O(N)  ","date":"2021-06-11T19:33:36+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-279.-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/","title":"Leetcode 279. 完全平方数"},{"content":" 链接： https://leetcode-cn.com/problems/coin-change-2/\n难度： 中等\n题目描述 给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。\n示例 1：  输入: amount = 5, coins = [1, 2, 5]\n输出: 4\n解释: 有四种方式可以凑成总金额:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n 示例 2：  输入: amount = 3, coins = [2]\n输出: 0\n解释: 只用面额2的硬币不能凑成总金额3。\n 示例 3：  输入: amount = 10, coins = [10]\n输出: 1\n 注意： 你可以假设： - 0 \u0026lt;= amount (总金额) \u0026lt;= 5000 - 1 \u0026lt;= coin (硬币面额) \u0026lt;= 5000 - 硬币种类不超过 500 种 - 结果符合 32 位符号整数\n解题思路 动态规划 dp[i][j] 表示前 i 种面额的硬币，组成总金额 j 的方案数，则可以得到状态转移方程：\n dp[0][0] = 1 dp[i][j] = ∑dp[i-1][j-k*coins[i]], k∈N 且 k*coins[i] \u0026lt;= j\nfunc change(amount int, coins []int) int { dp = make([]int, amount+1) dp[0] = 1 for i := range coins { for j := 0; j \u0026lt;= amount; j++ { for k := 0; k*coins[i] \u0026lt;= j; k++ { dp[j] += dp[j-k*coins[i]] } } } return dp[amount] }   复杂度  时间复杂度：O(N*amount) 空间复杂度：O(N*amount)  优化 用 dp[i] 记录组成总金额 i 的方案数，则对于每个面额 coin 的金币，都可以将其加进去，使得 dp[i+coin] 的方案数增加 dp[i] 。由此得到状态转移方程：\n dp[0] = 1 dp[i] = ∑dp[i-coin], coin∈coins\nfunc change(amount int, coins []int) int { dp := make([]int, amount+1) dp[0] = 1 for _, coin := range coins { for i := coin; i \u0026lt;= amount; i++ { dp[i] += dp[i-coin] } fmt.Println(dp) } return dp[amount] }   复杂度  时间复杂度：O(N*amount) 空间复杂度：O(amount)  ","date":"2021-06-10T10:35:20+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-518.-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii/","title":"Leetcode 518. 零钱兑换 II"},{"content":" 链接： https://leetcode-cn.com/problems/last-stone-weight-ii/\n难度： 中等\n题目描述 有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。\n每一回合，从中选出 任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x \u0026lt;= y。那么粉碎的可能结果如下：\n 如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。  最后，最多只会剩下一块 石头。返回此石头 最小的可能重量 。如果没有石头剩下，就返回 0。\n示例 1：  输入：stones = [2,7,4,1,8,1]\n输出：1\n解释：\n组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，\n组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，\n组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，\n组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。\n 示例 2：  输入：stones = [31,26,33,21,40]\n输出：5\n 示例 3：  输入：stones = [1,2]\n输出：1\n 提示：  1 \u0026lt;= stones.length \u0026lt;= 30 1 \u0026lt;= stones[i] \u0026lt;= 100  解题思路 动态规划 每次从石头堆中拿出两块石头 a 和 b，不妨假设 a \u0026lt; b，则放回石头堆的石头为 b - a。所以最后的结果是 ∑ki*stonesi, ki=-1或1。\n为使得结果最小，要求系数为 -1 和 1 的两堆石头的重量和要最接近，所以原问题转化 01背包问题，背包容量为石头重量总和 sum 的一半，要求从石头堆选取石头装到背包的最大值。\nfunc lastStoneWeightII(stones []int) int { sum := 0 for _, stone := range stones { sum += stone } dp := make([]int, sum/2+1) for _, stones := range stones { for j := len(dp) - 1; j \u0026gt;= 0; j-- { if j \u0026gt;= stones \u0026amp;\u0026amp; dp[j] \u0026lt; dp[j-stones]+stones { dp[j] = dp[j-stones] + stones } } } if (dp[len(dp)-1] \u0026lt;\u0026lt; 1) \u0026gt; sum { return (dp[len(dp)-1] \u0026lt;\u0026lt; 1) - sum } else { return sum - (dp[len(dp)-1] \u0026lt;\u0026lt; 1) } }  复杂度  时间复杂度：O(N*sum(stones)) 空间复杂度：O(sum(stones))  ","date":"2021-06-08T11:35:42+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1049.-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F-ii/","title":"Leetcode 1049. 最后一块石头的重量 II"},{"content":" 链接： https://leetcode-cn.com/problems/target-sum/\n难度： 中等\n题目描述 给你一个整数数组 nums 和一个整数 target 。\n向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：\n 例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 \u0026quot;+2-1\u0026quot; 。  返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。\n示例 1：  输入：nums = [1,1,1,1,1], target = 3\n输出：5\n解释：一共有 5 种方法让最终目标和为 3 。\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n 示例 2：  输入：nums = [1], target = 1\n输出：1\n 注意：  1 \u0026lt;= nums.length \u0026lt;= 20 0 \u0026lt;= nums[i] \u0026lt;= 1000 0 \u0026lt;= sum(nums[i]) \u0026lt;= 1000 -1000 \u0026lt;= target \u0026lt;= 100  解题思路 暴力求解 对于每个数字，可以有 + 和 - 两种符号，枚举出所有的情况，统计符合题意的数量。\nfunc findTargetSumWays(nums []int, target int) int { if len(nums) == 0 { if target == 0 { return 1 } else { return 0 } } return findTargetSumWays(nums[1:], target-nums[0]) + findTargetSumWays(nums[1:], target+nums[0]) }  复杂度  时间复杂度：O(2N) 空间复杂度：O(N)  动态规划 用 dp[i][j] 记录以 i 为结尾的前缀数组，计算结果为 j 的方案数量，很容易得到状态转移方程：\n dp[i][j] = dp[i-1][j-num[i]] + dp[i-1][j+num[i]]  由于计算结果可以为负值，故对其添加一个偏移量，使之全部为非负数\nfunc findTargetSumWays(nums []int, target int) int { dp := [20][2002]int{} dp[0][1000+nums[0]] += 1 dp[0][1000-nums[0]] += 1 for i := 1; i \u0026lt; len(nums); i++ { for j, cnt := range dp[i-1] { if cnt == 0 { continue } dp[i][j+nums[i]] += dp[i-1][j] dp[i][j-nums[i]] += dp[i-1][j] } } return dp[len(nums)-1][target+1000] }  复杂度  时间复杂度：O(N*scope) 空间复杂度：O(N*scope)  ","date":"2021-06-07T20:34:13+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-494.-%E7%9B%AE%E6%A0%87%E5%92%8C/","title":"Leetcode 494. 目标和"},{"content":" 链接： https://leetcode-cn.com/problems/ones-and-zeroes/\n难度： 中等\n题目描述 给你一个二进制字符串数组 strs 和两个整数 m 和 n 。\n请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。\n如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。\n示例 1：  输入：strs = [\u0026ldquo;10\u0026rdquo;, \u0026ldquo;0001\u0026rdquo;, \u0026ldquo;111001\u0026rdquo;, \u0026ldquo;1\u0026rdquo;, \u0026ldquo;0\u0026rdquo;], m = 5, n = 3\n输出：4\n解释：最多有 5 个 0 和 3 个 1 的最大子集是 {\u0026ldquo;10\u0026rdquo;,\u0026ldquo;0001\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;0\u0026rdquo;} ，因此答案是 4 。\n其他满足题意但较小的子集包括 {\u0026ldquo;0001\u0026rdquo;,\u0026ldquo;1\u0026rdquo;} 和 {\u0026ldquo;10\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;0\u0026rdquo;} 。{\u0026ldquo;111001\u0026rdquo;} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。\n 示例 2：  输入：strs = [\u0026ldquo;10\u0026rdquo;, \u0026ldquo;0\u0026rdquo;, \u0026ldquo;1\u0026rdquo;], m = 1, n = 1\n输出：2\n解释：最大的子集是 {\u0026ldquo;0\u0026rdquo;, \u0026ldquo;1\u0026rdquo;} ，所以答案是 2 。\n 注意：  1 \u0026lt;= strs.length \u0026lt;= 600 1 \u0026lt;= strs[i].length \u0026lt;= 100 strs[i] 仅由 '0' 和 '1' 组成 1 \u0026lt;= m, n \u0026lt;= 100  解题思路 动态规划 对于数组中的每个元素，都有两种选择，要么其位于最大集合中，要么其不在最大子集中。所以该题为背包问题的一个变种，参考背包问题的求解思路，用动态规划求解。\n用 dp[i][j][k] 表示当选择第 i 个元素时，0 的数量为 j，而 1 的数量为 k，此时最大子集的大小。状态转移方程如下：\n 当前元素不可被选择时，即j \u0026lt; zeros 或 k \u0026lt; ones，dp[i][j][k] = dp[i-1][j][k]； 当当前元素可以被选择时，即j \u0026gt;= zeros 且 k \u0026gt;= ones，dp[i][j][k] = max(dp[i-1][j-zeros][k-ones] + 1, dp[i-1][j][k])。  注意到每次转移仅依赖与上一个元素选择的结果，可以缩减一维空间，降低空间复杂度，而依赖前值的问题可以通过倒序计算解决:\nfunc findMaxForm(strs []string, m int, n int) int { dp := [101][101]int{} for _, str := range strs { zeros := 0 ones := 0 for i := 0; i \u0026lt; len(str); i++ { if str[i] == \u0026#39;0\u0026#39; { zeros++ } else { ones++ } } for j := m; j \u0026gt;= 0; j-- { for k := n; k \u0026gt;= 0; k-- { if j \u0026gt;= zeros \u0026amp;\u0026amp; k \u0026gt;= ones \u0026amp;\u0026amp; dp[j-zeros][k-ones] \u0026gt;= dp[j][k] { dp[j][k] = dp[j-zeros][k-ones] + 1 } } } } return dp[m][n] }  复杂度  时间复杂度：O(N*m*n) 空间复杂度：O(m*n)  ","date":"2021-06-06T10:08:43+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-474.-%E4%B8%80%E5%92%8C%E9%9B%B6/","title":"Leetcode 474. 一和零"},{"content":" 链接： https://leetcode-cn.com/problems/remove-linked-list-elements/\n难度： 简单\n题目描述 给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。\n示例 1：  输入：head = [1,2,6,3,4,5,6], val = 6\n输出：[1,2,3,4,5]\n 示例 2：  输入：head = [], val = 1\n输出：[]\n 示例 3：  输入：head = [7,7,7,7], val = 7\n输出：[]\n 提示：  列表中的节点在范围 [0, 10] 内 1 \u0026lt;= Node.val \u0026lt;= 50 0 \u0026lt;= k \u0026lt;= 50  解题思路 模拟 遍历整个链表，遇到值为 val 的结点，将其从链表中删除。\nfunc removeElements(head *ListNode, val int) *ListNode { head = \u0026amp;ListNode{ Val: 0, Next: head, } for node := head; node.Next != nil; { if node.Next.Val == val { node.Next = node.Next.Next } else { node = node.Next } } head = head.Next return head }  复杂度  时间复杂度：O(N) 空间复杂度：O(1)  ","date":"2021-06-05T22:26:23+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-203.-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/","title":"Leetcode 203. 移除链表元素"},{"content":" 链接： https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\n难度： 简单\n题目描述 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。\n图示两个链表在节点 c1 开始相交：\n题目数据 保证 整个链式结构中不存在环。\n注意，函数返回结果后，链表必须 保持其原始结构。\n示例1：  输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Intersected at \u0026lsquo;8\u0026rsquo;\n解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。\n在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n 示例2：  输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Intersected at \u0026lsquo;2\u0026rsquo;\n解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。\n在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n 示例3：  输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。\n由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n这两个链表不相交，因此返回 null 。\n 提示：  listA 中节点数目为 m listB 中节点数目为 n 0 \u0026lt;= m, n \u0026lt;= 3 * 104 1 \u0026lt;= Node.val \u0026lt;= 105 0 \u0026lt;= skipA \u0026lt;= m 0 \u0026lt;= skipB \u0026lt;= n 如果 listA 和 listB 没有交点，intersectVal 为 0 如果 listA 和 listB 有交点，intersectVal == listA[skipA + 1] == listB[skipB + 1]  进阶：你能否设计一个时间复杂度 O(n) 、仅用 O(1) 内存的解决方案？\n解题思路 哈希 使用哈希表记录其中的一个链表结点，遍历另一个结点，在哈希表中查找该结点是否出现。\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode { hash := make(map[*ListNode]bool) for node := headA; node != nil; node = node.Next { hash[node] = true } for node := headB; node != nil; node = node.Next { if hash[node] { return node } } return nil }  复杂度  时间复杂度：O(N+M) 空间复杂度：O(N)  截断 两个链表相交，即尾部对齐，可以将较长的链表截断，使得两个链表的长度相同，就可以逐结点比较。\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode { // 记长 \tlenA := 0 for node := headA; node != nil; node = node.Next { lenA++ } lenB := 0 for node := headB; node != nil; node = node.Next { lenB++ } nodeA := headA nodeB := headB // 对齐 \tif lenA \u0026gt; lenB { for i := 0; i \u0026lt; lenA-lenB; i++ { nodeA = nodeA.Next } } else { for i := 0; i \u0026lt; lenB-lenA; i++ { nodeB = nodeB.Next } } // 比较 \tfor ; nodeA != nil; nodeA, nodeB = nodeA.Next, nodeB.Next { if nodeA == nodeB { return nodeA } } return nil }  复杂度  时间复杂度：O(N+M) 空间复杂度：O(1)  ","date":"2021-06-04T17:53:32+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-160.-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/","title":"Leetcode 160. 相交链表"},{"content":" 链接： https://leetcode-cn.com/problems/contiguous-array/\n难度： 中等\n题目描述 给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。\n示例1：  输入: nums = [0,1]\n输出: 2\n说明: [0, 1] 是具有相同数量0和1的最长连续子数组。\n 示例2：  输入: nums = [0,1,0]\n输出: 2\n说明: 0, 1 是具有相同数量0和1的最长连续子数组。\n 示例3：  输入：nums = [23,2,6,4,7], k = 13\n输出：false\n 提示：  1 \u0026lt;= nums.length \u0026lt;= 105 nums[i] 不是 0 就是 1  解题思路 前缀和+哈希 在一段区间内，对该段区间求和即可得出 1 的数量，用区间长度减去 1 的数量，就可以得到 0 的数量，可以用前缀和降低时间复杂度。\n又结果要求对 0 和 1 的数量相等，所以前缀和可以只记录0 和 1 的数量差，当两个前缀数组的和相同时，表示该段数组中0 和 1 的数量相等。原问题转化为在一个数组中找到两个相同的数，且距离相差最大。\n可以利用哈希表保存每个数最早出现的位置，直到找到相同的数，其距离必然为最大，判断是否满足条件即可。\n注意，对 0 需要特殊判断，可以预先在哈希表中存入其位置为 -1。\nfunc findMaxLength(nums []int) int { pos := map[int]int{ 0: -1, } sum := 0 max := 0 for i, num := range nums { if num == 0 { sum-- } else { sum++ } if p, ok := pos[sum]; ok { if max \u0026lt; (i - p) { max = i - p } } else { pos[sum] = i } } return max }  复杂度  时间复杂度：O(N) 空间复杂度：O(N)  ","date":"2021-06-03T22:32:03+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-525.-%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/","title":"Leetcode 525. 连续数组"},{"content":" 链接： https://leetcode-cn.com/problems/continuous-subarray-sum/\n难度： 中等\n题目描述 给你一个整数数组 nums 和一个整数 k ，编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组：\n子数组大小 至少为 2 ，且 子数组元素总和为 k 的倍数。 如果存在，返回 true ；否则，返回 false 。\n如果存在一个整数 n ，令整数 x 符合 x = n * k ，则称 x 是 k 的一个倍数。\n示例1：  输入：nums = [23,2,4,6,7], k = 6\n输出：true\n解释：[2,4] 是一个大小为 2 的子数组，并且和为 6 。\n 示例2：  输入：nums = [23,2,6,4,7], k = 6\n输出：true\n解释：[23, 2, 6, 4, 7] 是大小为 5 的子数组，并且和为 42 。\n42 是 6 的倍数，因为 42 = 7 * 6 且 7 是一个整数。\n 示例3：  输入：nums = [23,2,6,4,7], k = 13\n输出：false\n 提示：  1 \u0026lt;= nums.length \u0026lt;= 105 0 \u0026lt;= nums[i] \u0026lt;= 109 0 \u0026lt;= sum(nums[i]) \u0026lt;= 231 - 1 1 \u0026lt;= k \u0026lt;= 231 - 1  解题思路 前缀和+哈希 要求解连续子区间的和，首先考虑利用前缀和来降低区间运算的复杂度，两个前缀数组和的差值是 k 的倍数即可。\n又结果要求对 k 取模为 0，所以前缀和可以只需保留对 k 取模的值，此时两个前缀数组的差值就变为了 0 ，原问题转化为在一个数组中找到两个相同的数，要求其距离大于 1。\n可以利用哈希表保存每个数最早出现的位置，直到找到相同的数，其距离必然为最大，判断是否满足条件即可。\n注意，对 0 需要特殊判断，可以预先在哈希表中存入其位置为 -1。\nfunc checkSubarraySum(nums []int, k int) bool { pos := map[int]int{ 0: -1, } sum := 0 for i := 0; i \u0026lt; len(nums); i++ { sum = (sum + nums[i]) % k if p, ok := pos[sum]; ok { if i-p \u0026gt; 1 { return true } } else { pos[sum] = i } } return false }  复杂度  时间复杂度：O(N) 空间复杂度：O(min(N,k))  ","date":"2021-06-02T22:51:40+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-523.-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/","title":"Leetcode 523. 连续的子数组和"},{"content":" 链接： https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/\n难度： 中等\n题目描述 给你一个下标从 0 开始的正整数数组 candiesCount ，其中 candiesCount[i] 表示你拥有的第 i 类糖果的数目。同时给你一个二维数组 queries ，其中 queries[i] = [favoriteTypei, favoriteDayi, dailyCapi] 。\n你按照如下规则进行一场游戏：\n 你从第 0 天开始吃糖果。 你在吃完 所有 第 i - 1 类糖果之前，不能 吃任何一颗第 i 类糖果。 在吃完所有糖果之前，你必须每天 至少 吃 一颗 糖果。  请你构建一个布尔型数组 answer ，满足 answer.length == queries.length 。answer[i] 为 true 的条件是：在每天吃 不超过 dailyCapi 颗糖果的前提下，你可以在第 favoriteDayi 天吃到第 favoriteTypei 类糖果；否则 answer[i] 为 false 。注意，只要满足上面 3 条规则中的第二条规则，你就可以在同一天吃不同类型的糖果。\n请你返回得到的数组 answer 。\n示例1：  输入：candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]\n输出：[true,false,true]\n提示：\n1- 在第 0 天吃 2 颗糖果(类型 0），第 1 天吃 2 颗糖果（类型 0），第 2 天你可以吃到类型 0 的糖果。\n2- 每天你最多吃 4 颗糖果。即使第 0 天吃 4 颗糖果（类型 0），第 1 天吃 4 颗糖果（类型 0 和类型 1），你也没办法在第 2 天吃到类型 4 的糖果。换言之，你没法在每天吃 4 颗糖果的限制下在第 2 天吃到第 4 类糖果。\n3- 如果你每天吃 1 颗糖果，你可以在第 13 天吃到类型 2 的糖果。\n 示例2：  输入：candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]\n输出：[false,true,true,false,false]\n 提示：  1 \u0026lt;= candiesCount.length \u0026lt;= 105 1 \u0026lt;= candiesCount[i] \u0026lt;= 105 1 \u0026lt;= queries.length \u0026lt;= 105 queries[i].length == 3 0 \u0026lt;= favoriteTypei \u0026lt; candiesCount.length 0 \u0026lt;= favoriteDayi \u0026lt;= 109 1 \u0026lt;= dailyCapi \u0026lt;= 109  解题思路 前缀和 据题意可知，每天可以吃的糖果数量在 1 ~ dailyCapi 之间，若想在第 favoriteDayi 天可以吃到第 favoriteTypei 类糖果，则必须将之前的类型全部吃完。\n从每天的可以吃的量可以推断出一个在第 favoriteDayi 天吃到糖果数量的一个范围，当该范围与小于等于第 favoriteTypei 类糖果的总量的范围有交集时，则可以吃到；否则不能。\n因每次获取的是当前种类之前的糖果总量，采用前缀和降低时间复杂度。\nfunc canEat(candiesCount []int, queries [][]int) []bool { sum := make([]int, len(candiesCount)) sum[0] = candiesCount[0] for i := 1; i \u0026lt; len(sum); i++ { sum[i] = sum[i-1] + candiesCount[i] } canEat := make([]bool, 0, len(queries)) for _, query := range queries { EatMin := query[1] + 1 EatMax := (query[1] + 1) * query[2] // 小于大的，大与小的有交集 \tif sum[query[0]] \u0026gt;= EatMin \u0026amp;\u0026amp; ((query[0] \u0026gt; 0 \u0026amp;\u0026amp; sum[query[0]-1] \u0026lt; EatMax) || query[0] == 0) { canEat = append(canEat, true) } else { canEat = append(canEat, false) } } return canEat }  复杂度  时间复杂度：O(N+Q) 空间复杂度：O(N)  ","date":"2021-06-01T22:35:59+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1744.-%E4%BD%A0%E8%83%BD%E5%9C%A8%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E9%82%A3%E5%A4%A9%E5%90%83%E5%88%B0%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%B3%96%E6%9E%9C%E5%90%97/","title":"Leetcode 1744. 你能在你最喜欢的那天吃到你最喜欢的糖果吗？"},{"content":" 链接： https://leetcode-cn.com/problems/power-of-four/\n难度： 简单\n题目描述 给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 true ；否则，返回 false 。\n整数 n 是 4 的幂次方需满足：存在整数 x 使得 n == 4x\n示例 1：  输入：n = 16\n输出：true\n 示例 2：  输入：n = 5\n输出：false\n 示例 3：  输入：n = 1\n输出：true\n 提示：  -231 \u0026lt;= n \u0026lt;= 231 - 1\u0026gt;  解题思路 二进制 2 的幂其二进制表示为最高位为 1，后跟偶数个 0 的数，每次向右移位两位，最终结果为 1，即说明是 4 的幂。\n另，4 的幂为非负数。\nfunc isPowerOfFour(n int) bool { for ; n \u0026gt; 0; n \u0026gt;\u0026gt;= 2 { if n == 1 { return true } else if n\u0026amp;3 != 0 { return false } } return false }  复杂度  时间复杂度：O(logB) 空间复杂度：O(1)  ","date":"2021-05-31T22:42:12+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-342.-4%E7%9A%84%E5%B9%82/","title":"Leetcode 342. 4的幂"},{"content":" 链接： https://leetcode-cn.com/problems/power-of-two/\n难度： 简单\n题目描述 给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。\n如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。\n示例 1：  输入：n = 1\n输出：true\n解释：20 = 1\n 示例 2：  输入：n = 16\n输出：true\n解释：24 = 16\n 示例 3：  输入：n = 3\n输出：false\n 示例 4：  输入：n = 4\n输出：true\n 示例 5：  输入：n = 5\n输出：false\n 提示：  -231 \u0026lt;= n \u0026lt;= 231 - 1\u0026gt;  解题思路 二进制 2 的幂其二进制表示为最高位为 1，其余位为 0 的数，只有二进制位中 1 的数量是 1的数才满足条件。\n另，2 的幂为非负数。\nfunc isPowerOfTwo(n int) bool { cnt := 0 for ; n \u0026gt; 0; n \u0026gt;\u0026gt;= 1 { cnt += n \u0026amp; 1 } if cnt == 1 { return true } return false }  复杂度  时间复杂度：O(logB) 空间复杂度：O(1)  优化 利用lowbit算法，消除最小为的 1 ，所得结果为 0 即满足条件。\nfunc isPowerOfTwo(n int) bool { if n \u0026gt; 0 \u0026amp;\u0026amp; n\u0026amp;(n-1) == 0 { return true } return false }  复杂度  时间复杂度：O(1) 空间复杂度：O(1)  ","date":"2021-05-30T11:06:34+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-231.-2-%E7%9A%84%E5%B9%82/","title":"Leetcode 231. 2 的幂"},{"content":" 链接： https://leetcode-cn.com/problems/total-hamming-distance/\n难度： 中等\n题目描述 两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。\n计算一个数组中，任意两个数之间汉明距离的总和。\n示例：  输入: x = 1, y = 4\n输出: 2\n解释: 在二进制表示中，4表示为0100，14表示为1110，2表示为0010。（这样表示是为了体现后四位之间关系）\n所以答案为：\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n 注意：  数组中元素的范围为从 0 到 109。 数组的长度不超过 104。  解题思路 按位计数 当一对数字某一位上的两个数字不同时，汉明距离的总和才会加一。故可以统计数组中相同位的 0 和 1 的数量，相乘可统计当前位的汉明距离和。\nfunc totalHammingDistance(nums []int) int { totalDistance := 0 for i := 1 \u0026lt;\u0026lt; 30; i \u0026gt; 0; i \u0026gt;\u0026gt;= 1 { ones := 0 zeros := 0 for _, num := range nums { if num\u0026amp;i == 0 { zeros++ } else { ones++ } } totalDistance += ones * zeros } return totalDistance }  复杂度  时间复杂度：O(N*B) 空间复杂度：O(1)  ","date":"2021-05-28T17:37:15+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-477.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%80%BB%E5%92%8C/","title":"Leetcode 477. 汉明距离总和"},{"content":" 链接： https://leetcode-cn.com/problems/hamming-distance/\n难度： 简单\n题目描述 两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。\n给出两个整数 x 和 y，计算它们之间的汉明距离。\n注意：  0 ≤ x, y \u0026lt; 231  示例：  输入: x = 1, y = 4\n输出: 2\n解释:\n1 (0 0 0 1)\n4 (0 1 0 0)\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;↑\u0026nbsp;\u0026nbsp;\u0026nbsp;↑\n上面的箭头指出了对应二进制位不同的位置。\n 解题思路 异或 异或操作可以得出标记出两个数二进制位不同的位置，然后统计数量即可。\nfunc hammingDistance(x int, y int) int { distance := 0 for xor := x ^ y; xor != 0; xor \u0026gt;\u0026gt;= 1 { distance += xor \u0026amp; 1 } return distance }  复杂度  时间复杂度：O(logB) 空间复杂度：O(1)  ","date":"2021-05-27T23:17:23+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-461.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/","title":"Leetcode 461. 汉明距离"},{"content":" 链接： https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/\n难度： 中等\n题目描述 给出一个字符串 s（仅含有小写英文字母和括号）。\n请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。\n注意，您的结果中 不应 包含任何括号。\n示例1：  输入：s = \u0026ldquo;(abcd)\u0026rdquo;\n输出：\u0026ldquo;dcba\u0026rdquo;\n 示例 2：  输入：s = \u0026ldquo;(u(love)i)\u0026rdquo;\n输出：\u0026ldquo;iloveu\u0026rdquo;\n 示例 3：  输入：s = \u0026ldquo;(ed(et(oc))el)\u0026rdquo;\n输出：\u0026ldquo;leetcode\u0026rdquo;\n 示例 4：  输入：s = \u0026ldquo;a(bcdefghijkl(mno)p)q\u0026rdquo;\n输出：\u0026ldquo;apmnolkjihgfedcbq\u0026rdquo;\n 提示：  0 \u0026lt;= s.length \u0026lt;= 2000 s 中只有小写英文字母和括号 我们确保所有括号都是成对出现的  解题思路 栈 利用栈来进行每一次的反转：\n 当遇到非 ) 时，入栈； 当遇到 ) 时，依次从栈中取出元素加入一个队列，直到取出 ( 时为止，再将队列中的元素全部入栈，即先完成了内层括号的反转。  依次执行上述逻辑，直到遍历到字符串结尾，栈中元素即为反转后的结果。\nfunc reverseParentheses(s string) string { stack := make([]byte, 0, len(s)) queue := make([]byte, 0, len(s)) for i := range s { if s[i] != \u0026#39;)\u0026#39; { stack = append(stack, s[i]) continue } queue = queue[:0] for j := len(stack) - 1; stack[j] != \u0026#39;(\u0026#39;; j-- { queue = append(queue, stack[j]) stack = stack[:len(stack)-1] } stack = stack[:len(stack)-1] stack = append(stack, queue...) } return string(stack) }  复杂度  时间复杂度：O(N) 空间复杂度：O(N2)  跳跃 通过模拟可以发现，每次奇数层的括号内元素需要反转，而偶数内不需要。\n当遇到一个括号时，可以跳转到其对应的另一个括号处，并改变遍历方向，即完成了反转。最终遍历的结果即是答案。\nfunc reverseParentheses(s string) string { stack := make([]int, 0, len(s)) pair := make(map[int]int) for i := range s { switch s[i] { case \u0026#39;(\u0026#39;: stack = append(stack, i) case \u0026#39;)\u0026#39;: pair[i] = stack[len(stack)-1] pair[stack[len(stack)-1]] = i stack = stack[:len(stack)-1] } } res := make([]byte, 0, len(s)) step := 1 for i := 0; i \u0026lt; len(s); i += step { if s[i] == \u0026#39;(\u0026#39; || s[i] == \u0026#39;)\u0026#39; { step = -step i = pair[i] } else { res = append(res, s[i]) } } return string(res) }  复杂度  时间复杂度：O(N) 空间复杂度：O(N)  ","date":"2021-05-26T23:59:13+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1190.-%E5%8F%8D%E8%BD%AC%E6%AF%8F%E5%AF%B9%E6%8B%AC%E5%8F%B7%E9%97%B4%E7%9A%84%E5%AD%90%E4%B8%B2/","title":"Leetcode 1190. 反转每对括号间的子串"},{"content":" 链接： https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/\n难度： 困难\n题目描述 给你一个由非负整数组成的数组 nums 。另有一个查询数组 queries ，其中 queries[i] = [xi, mi] 。\n第 i 个查询的答案是 xi 和任何 nums 数组中不超过 mi 的元素按位异或（XOR）得到的最大值。换句话说，答案是 max(nums[j] XOR xi) ，其中所有 j 均满足 nums[j] \u0026lt;= mi 。如果 nums 中的所有元素都大于 mi，最终答案就是 -1 。\n返回一个整数数组 answer 作为查询的答案，其中 answer.length == queries.length 且 answer[i] 是第 i 个查询的答案。\n示例1：  输入：nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]\n输出：[3,3,7]\n解释：\n1) 0 和 1 是仅有的两个不超过 1 的整数。0 XOR 3 = 3 而 1 XOR 3 = 2 。二者中的更大值是 3 。\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7.\n 示例2：  输入：nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]\n输出：[15,-1,5]\n 提示：  1 \u0026lt;= nums.length, queries.length \u0026lt;= 105 queries[i].length == 2 0 \u0026lt;= nums[j], xi, mi \u0026lt;= 109  解题思路 Trie树 同421题的思路，采用二进制形的形式，生成一个包含数组中所有数字的Trie树，通过贪心策略求解满足条件的那个最大值。\n因为对元素的取值范围有限制，所以每次需要判断代表 1 的路径能否可达，可以在每个节点记录通过当前路径的最小值，其与 mi 比较即可得到路径是否可达。\nfunc maximizeXor(nums []int, queries [][]int) []int { type Node struct { Left, Right *Node Min int } // 生成Trie数 \troot := new(Node) for _, num := range nums { node := root for bit := 1 \u0026lt;\u0026lt; 30; bit \u0026gt; 0; bit \u0026gt;\u0026gt;= 1 { if num\u0026amp;bit == 0 { if node.Left == nil { node.Left = \u0026amp;Node{ Left: nil, Right: nil, Min: num, } } node = node.Left if node.Min \u0026gt; num { node.Min = num } } else { if node.Right == nil { node.Right = \u0026amp;Node{ Left: nil, Right: nil, Min: num, } } node = node.Right if node.Min \u0026gt; num { node.Min = num } } } } res := make([]int, 0, len(queries)) // 求最大值 \tfor _, query := range queries { node := root val := 0 for bit := 1 \u0026lt;\u0026lt; 30; bit \u0026gt; 0; bit \u0026gt;\u0026gt;= 1 { if query[0]\u0026amp;bit == 0 { // 优先取1 \tif node.Right != nil \u0026amp;\u0026amp; node.Right.Min \u0026lt;= query[1] { node = node.Right val += bit } else if node.Left != nil { node = node.Left } else { val = -1 break } } else { // 优先取0 \tif node.Left != nil { node = node.Left } else if node.Right != nil \u0026amp;\u0026amp; node.Right.Min \u0026lt;= query[1] { node = node.Right val += bit } else { val = -1 break } } } if val == -1 { res = append(res, -1) } else { res = append(res, query[0]^val) } } return res }  复杂度  时间复杂度：O(N*logB) 空间复杂度：O(N*logB)  ","date":"2021-05-23T09:17:20+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1707.-%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/","title":"Leetcode 1707. 与数组中元素的最大异或值"},{"content":" 链接： https://leetcode-cn.com/problems/uncrossed-lines/\n难度： 中等\n题目描述 在两条独立的水平线上按给定的顺序写下 nums1 和 nums2 中的整数。\n现在，可以绘制一些连接两个数字 nums1[i] 和 nums2[j] 的直线，这些直线需要同时满足满足：\n nums1[i] == nums2[j] 且绘制的直线不与任何其他连线（非水平线）相交。 请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。\n以这种方法绘制线条，并返回可以绘制的最大连线数。\n示例1：  输入：nums1 = [1,4,2], nums2 = [1,2,4]\n输出：2\n解释：可以画出两条不交叉的线，如上图所示。\n但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。\n 示例2：  输入：nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]\n输出：3\n 示例3:  输入：nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]\n输出：2\n 提示：  1 \u0026lt;= nums1.length \u0026lt;= 500 1 \u0026lt;= nums2.length \u0026lt;= 500 1 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 2000  解题思路 动态规划 最长公共子序列的变种题目，其思路也相同，用动态规划解决。用 dp[i][j] 表示 nums1[0:i] 和 nums2[0:j] 两个子数组的最大连接数，状态转移方程如下：\n 当 nums1[i] = nums2[j] 时，dp[i][j] = dp[i-1][j-1] + 1 当 nums1[i] != nums2[j] 时， dp[i][j] = max(dp[i-1][j], dp[i][j-1])\nfunc maxUncrossedLines(nums1 []int, nums2 []int) int { dp := make([][]int, 0, len(nums1)+1) dp = append(dp, make([]int, len(nums2)+1)) for i := range nums1 { dp = append(dp, make([]int, len(nums2)+1)) for j := range nums2 { if nums1[i] == nums2[j] { dp[i+1][j+1] = dp[i][j] + 1 } else { if dp[i][j+1] \u0026gt; dp[i+1][j] { dp[i+1][j+1] = dp[i][j+1] } else { dp[i+1][j+1] = dp[i+1][j] } } } } return dp[len(nums1)][len(nums2)] }   复杂度  时间复杂度：O(NM) 空间复杂度：O(NM)  ","date":"2021-05-21T23:42:03+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1035.-%E4%B8%8D%E7%9B%B8%E4%BA%A4%E7%9A%84%E7%BA%BF/","title":"Leetcode 1035. 不相交的线"},{"content":" 链接： https://leetcode-cn.com/problems/top-k-frequent-words/\n难度： 中等\n题目描述 给一非空的单词列表，返回前 k 个出现次数最多的单词。\n返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。\n示例1：  输入: [\u0026ldquo;i\u0026rdquo;, \u0026ldquo;love\u0026rdquo;, \u0026ldquo;leetcode\u0026rdquo;, \u0026ldquo;i\u0026rdquo;, \u0026ldquo;love\u0026rdquo;, \u0026ldquo;coding\u0026rdquo;], k = 2\n输出: [\u0026ldquo;i\u0026rdquo;, \u0026ldquo;love\u0026rdquo;]\n解析: \u0026ldquo;i\u0026rdquo; 和 \u0026ldquo;love\u0026rdquo; 为出现次数最多的两个单词，均为2次。\n注意，按字母顺序 \u0026ldquo;i\u0026rdquo; 在 \u0026ldquo;love\u0026rdquo; 之前。\n 示例2：  输入: [\u0026ldquo;the\u0026rdquo;, \u0026ldquo;day\u0026rdquo;, \u0026ldquo;is\u0026rdquo;, \u0026ldquo;sunny\u0026rdquo;, \u0026ldquo;the\u0026rdquo;, \u0026ldquo;the\u0026rdquo;, \u0026ldquo;the\u0026rdquo;, \u0026ldquo;sunny\u0026rdquo;, \u0026ldquo;is\u0026rdquo;, \u0026ldquo;is\u0026rdquo;], k = 4\n输出: [\u0026ldquo;the\u0026rdquo;, \u0026ldquo;is\u0026rdquo;, \u0026ldquo;sunny\u0026rdquo;, \u0026ldquo;day\u0026rdquo;]\n解析: \u0026ldquo;the\u0026rdquo;, \u0026ldquo;is\u0026rdquo;, \u0026ldquo;sunny\u0026rdquo; 和 \u0026ldquo;day\u0026rdquo; 是出现次数最多的四个单词，\n出现次数依次为 4, 3, 2 和 1 次。\n 注意：  假定 k 总为有效值， 1 ≤ k ≤ 集合元素数。 输入的单词均由小写字母组成。  扩展联系：  尝试以 O(n log k) 时间复杂度和 O(n) 空间复杂度解决。  解题思路 哈希 遍历单词列表，记录每个单词的频率，然后经一次排序即可找出结果。\nfunc topKFrequent(words []string, k int) []string { wordsCnt := make(map[string]int) for _, word := range words { wordsCnt[word]++ } uniqWords := make([]string, 0, len(wordsCnt)) for k := range wordsCnt { uniqWords = append(uniqWords, k) } sort.Slice(uniqWords, func(i, j int) bool { if wordsCnt[uniqWords[i]] \u0026gt; wordsCnt[uniqWords[j]] { return true } else if wordsCnt[uniqWords[i]] \u0026lt; wordsCnt[uniqWords[j]] { return false } else { return uniqWords[i] \u0026lt; uniqWords[j] } }) return uniqWords[:k] }  复杂度  时间复杂度：O(NlogN) 空间复杂度：O(N)  ","date":"2021-05-20T21:45:44+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-692.-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%8D%95%E8%AF%8D/","title":"Leetcode 692. 前K个高频单词"},{"content":" 链接： https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/\n难度： 中等\n题目描述 给你一个整数数组 arr 。\n现需要从数组中取三个下标 i、j 和 k ，其中 (0 \u0026lt;= i \u0026lt; j \u0026lt;= k \u0026lt; arr.length) 。\na 和 b 定义如下：\n a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1] b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k] 注意：^ 表示 按位异或 操作。  请返回能够令 a == b 成立的三元组 (i, j , k) 的数目。\n示例1：  输入：arr = [2,3,1,6,7]\n输出：4\n解释：满足题意的三元组分别是 (0,1,2), (0,2,2), (2,3,4) 以及 (2,4,4)\n 示例 2：  输入：arr = [1,1,1,1,1]\n输出：10\n 示例 3：  输入：arr = [2,3]\n输出：0\n 示例 4：  输入：arr = [1,3,5,7,9]\n输出：3\n 示例 5：  输入：arr = [7,11,12,9,5,2,7,17,22]\n输出：8\n 提示：  1 \u0026lt;= arr.length \u0026lt;= 300 1 \u0026lt;= arr[i] \u0026lt;= 108  解题思路 暴力求解 枚举所有可能的 i、j 和 k ，求解所有符合条件的三元组数量。\nfunc countTriplets(arr []int) int { cnt := 0 for i := 0; i \u0026lt; len(arr); i++ { a := 0 for j := i + 1; j \u0026lt; len(arr); j++ { a ^= arr[j-1] b := 0 for k := j; k \u0026lt; len(arr); k++ { b ^= arr[k] if a == b { cnt++ } } } } return cnt }  复杂度  时间复杂度：O(N3) 空间复杂度：O(1)  异或性质 两个数异或为 0 ，则这两个数一定相等，反之亦然。\n可以利用此条性质，寻找一段异或为 0 的子数组，则以其中任意一点分割得到的两个子数组，其异或结果必然相等。\nfunc countTriplets(arr []int) int { cnt := 0 for i := 0; i \u0026lt; len(arr); i++ { a := arr[i] for j := i + 1; j \u0026lt; len(arr); j++ { a ^= arr[j] if a == 0 { cnt += j - i } } } return cnt }  复杂度  时间复杂度：O(N2) 空间复杂度：O(1)  ​\n","date":"2021-05-18T22:40:57+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1442.-%E5%BD%A2%E6%88%90%E4%B8%A4%E4%B8%AA%E5%BC%82%E6%88%96%E7%9B%B8%E7%AD%89%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%89%E5%85%83%E7%BB%84%E6%95%B0%E7%9B%AE/","title":"Leetcode 1442. 形成两个异或相等数组的三元组数目"},{"content":" 链接： https://leetcode-cn.com/problems/cousins-in-binary-tree/\n难度： 简单\n题目描述 在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。\n如果二叉树的两个节点深度相同，但 父节点不同 ，则它们是一对堂兄弟节点。\n我们给出了具有唯一值的二叉树的根节点 root ，以及树中两个不同节点的值 x 和 y 。\n只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true 。否则，返回 false。\n示例1：  输入：root = [1,2,3,4], x = 4, y = 3\n输出：false\n 示例2：  输入：root = [1,2,3,null,4,null,5], x = 5, y = 4\n输出：true\n 示例3：  输入：root = [1,2,3,null,4], x = 2, y = 3\n输出：false\n 提示：  二叉树的节点数介于 2 到 100 之间。 每个节点的值都是唯一的、范围为 1 到 100 的整数。  解题思路 搜索 记录两个结点的父节点和高度，然后比较即可。\nfunc isCousins(root *TreeNode, x int, y int) bool { parents := make([]int, 0, 2) heights := make([]int, 0, 2) var dfs func(*TreeNode, int, int) dfs = func(node *TreeNode, parent, height int) { if node == nil { return } if node.Val == x || node.Val == y { heights = append(heights, height) parents = append(parents, parent) } dfs(node.Left, node.Val, height+1) dfs(node.Right, node.Val, height+1) } dfs(root, 0, 1) if parents[0] != parents[1] \u0026amp;\u0026amp; heights[0] == heights[1] { return true } return false }  复杂度  时间复杂度：O(N) 空间复杂度：O(N)  ","date":"2021-05-17T09:29:10+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-993.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%A0%82%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9/","title":"Leetcode 993. 二叉树的堂兄弟节点"},{"content":" 链接： https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/\n难度： 中等\n题目描述 给你一个整数数组 nums ，返回 nums[i] XOR nums[j] 的最大运算结果，其中 0 ≤ i ≤ j \u0026lt; n 。\n进阶：你可以在 O(n) 的时间解决这个问题吗？\n示例1：  输入：nums = [3,10,5,25,2,8]\n输出：28\n解释：最大运算结果是 5 XOR 25 = 28.\n 示例2：  输入：nums = [0]\n输出：0\n 示例3：  输入：nums = [2,4]\n输出：6\n 示例4：  输入：nums = [8,10,2]\n输出：10\n 示例5：  输入：nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n输出：127\n 提示：  1 \u0026lt;= nums.length \u0026lt;= 2 * 104 0 \u0026lt;= nums[i] \u0026lt;= 232 - 1  解题思路 暴力求解 枚举所有的 i 和 j，求解比较得出最大值。\nfunc findMaximumXOR(nums []int) int { max := 0 for i := range nums { for j := i + 1; j \u0026lt; len(nums); j++ { t := nums[i] ^ nums[j] if max \u0026lt; t { max = t } } } return max }  复杂度  时间复杂度：O(N2) 空间复杂度：O(1)  Trie树 采用二进制形的形式，生成一个包含数组中所有数字的Trie树，通过贪心策略可以得到与某个数异或最大值。依次枚举每一个数，即可得到全局最大值。\nfunc findMaximumXOR(nums []int) int { type Node struct { Left, Right *Node } // 生成Trie数 \troot := new(Node) for _, num := range nums { node := root for bit := 1 \u0026lt;\u0026lt; 30; bit \u0026gt; 0; bit \u0026gt;\u0026gt;= 1 { if num\u0026amp;bit == 0 { if node.Left == nil { node.Left = new(Node) } node = node.Left } else { if node.Right == nil { node.Right = new(Node) } node = node.Right } } } // 求最大值 \tmax := 0 for _, num := range nums { node := root localMax := 0 for bit := 1 \u0026lt;\u0026lt; 30; bit \u0026gt; 0; bit \u0026gt;\u0026gt;= 1 { if num\u0026amp;bit == 0 { if node.Right != nil { node = node.Right localMax += bit } else { node = node.Left } } else { if node.Left != nil { node = node.Left localMax += bit } else { node = node.Right } } } if max \u0026lt; localMax { max = localMax } } return max }  复杂度  时间复杂度：O(N*logB) 空间复杂度：O(N*logB)  ","date":"2021-05-16T22:31:57+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-421.-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/","title":"Leetcode 421. 数组中两个数的最大异或值"},{"content":" 链接： https://leetcode-cn.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/\n难度： 困难\n题目描述 有一个长度为 arrLen 的数组，开始有一个指针在索引 0 处。\n每一步操作中，你可以将指针向左或向右移动 1 步，或者停在原地（指针不能被移动到数组范围外）。\n给你两个整数 steps 和 arrLen ，请你计算并返回：在恰好执行 steps 次操作以后，指针仍然指向索引 0 处的方案数。\n由于答案可能会很大，请返回方案数 模 10^9 + 7 后的结果。\n示例1：  输入：steps = 3, arrLen = 2\n输出：4\n解释：3 步后，总共有 4 种不同的方法可以停在索引 0 处。\n向右，向左，不动\n不动，向右，向左\n向右，不动，向左\n不动，不动，不动\n 示例2：  输入：steps = 2, arrLen = 4\n输出：2\n解释：2 步后，总共有 2 种不同的方法可以停在索引 0 处。\n向右，向左\n不动，不动\n 示例2：  输入：steps = 4, arrLen = 2\n输出：8\n 提示：  1 \u0026lt;= steps \u0026lt;= 500 1 \u0026lt;= arrLen \u0026lt;= 10^6  解题思路 动态规划 由于方案数量很多，记录中间结果并重复使用将有效的降低时间复杂度，考虑用动态规划求解。\n用 dp[i][j] 表示指针移动 i 次到达下标 j 的方案数量，其来源分为三部分： - 上一步到达下标 j-1 处，此时移动了 i-1 次， - 上一步已经到达 j 处，移动了 i-1 次 - 上一步到达 j+1 处，移动了 i-1 次\n根据以上情况得到状态转移方程： dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i-1][j+1]，随即可得出结果。\nfunc numWays(steps int, arrLen int) int { const MOD = 1_000_000_007 far := steps + 1 if far \u0026gt; arrLen { far = arrLen } dp := make([][]int, steps) // 计算到i-1步为止 \tdp[0] = make([]int, far) // 移动0次 \tdp[0][0] = 1 // 初始在0 \tfor i := 1; i \u0026lt; cap(dp); i++ { dp[i] = make([]int, 0, far) for j := 0; j \u0026lt; far; j++ { t := dp[i-1][j] if j == 0 { // 左边越界 \tt = (t + dp[i-1][j+1]) % MOD } else if j == far-1 { // 右边越界 \tt = (t + dp[i-1][j-1]) % MOD } else { t = ((t+dp[i-1][j-1])%MOD + dp[i-1][j+1]) % MOD } dp[i] = append(dp[i], t) } } res := dp[steps-1][0] if arrLen \u0026gt; 1 { res = (res + dp[steps-1][1]) % MOD } return res }  复杂度  时间复杂度：O(steps*min(steps, arrLen)) 空间复杂度：O(steps*min(steps, arrLen))  优化 由于下一行的状态转移计算仅依赖于上一行，所以可以仅用一个数组，降低空间复杂度\nfunc numWays(steps int, arrLen int) int { const MOD = 1_000_000_007 far := steps + 1 if far \u0026gt; arrLen { far = arrLen } dp := make([]int, far) // 移动0次 \tdp[0] = 1 // 初始在0 \tfor i := 1; i \u0026lt; steps; i++ { last := dp[0] for j := 0; j \u0026lt; far; j++ { t := dp[j] if j == 0 { // 左边越界 \tt = (t + dp[j+1]) % MOD } else if j == far-1 { // 右边越界 \tt = (t + last) % MOD } else { t = ((t+last)%MOD + dp[j+1]) % MOD } last = dp[j] dp[j] = t } } res := dp[0] if arrLen \u0026gt; 1 { res = (res + dp[1]) % MOD } return res }  复杂度  时间复杂度：O(steps*min(steps, arrLen)) 空间复杂度：O(min(steps, arrLen))  ","date":"2021-05-13T23:12:12+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1269.-%E5%81%9C%E5%9C%A8%E5%8E%9F%E5%9C%B0%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/","title":"Leetcode 1269. 停在原地的方案数"},{"content":" 链接： https://leetcode-cn.com/problems/xor-queries-of-a-subarray/\n难度： 中等\n题目描述 有一个正整数数组 arr，现给你一个对应的查询数组 queries，其中 queries[i] = [Li, Ri]。\n对于每个查询 i，请你计算从 Li 到 Ri 的 XOR 值（即 arr[Li] xor arr[Li+1] xor ... xor arr[Ri]）作为本次查询的结果。\n并返回一个包含给定查询 queries 所有结果的数组。\n示例1：  输入：arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]\n输出：[2,7,14,8]\n解释：\n数组中元素的二进制表示形式是：\n1 = 0001\n3 = 0011\n4 = 0100\n8 = 1000\n查询的 XOR 值为：\n[0,1] = 1 xor 3 = 2\n[1,2] = 3 xor 4 = 7\n[0,3] = 1 xor 3 xor 4 xor 8 = 14\n[3,3] = 8\n 示例2：  输入：arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]\n输出：[8,0,4,4]\n 提示：  1 \u0026lt;= arr.length \u0026lt;= 3 * 104 1 \u0026lt;= arr[i] \u0026lt;= 109 1 \u0026lt;= queries.length \u0026lt;= 3 * 104 queries[i].length == 2 0 \u0026lt;= queries[i][0] \u0026lt;= queries[i][1] \u0026lt; arr.length  解题思路 暴力 依照题意，直接对查询下标范围内的所有数进行异或运算。\nfunc xorQueries(arr []int, queries [][]int) []int { res := make([]int, 0, len(queries)) for _, query := range queries { t := 0 for i := query[0]; i \u0026lt;= query[1]; i++ { t ^= arr[i] } res = append(res, t) } return res }  复杂度  时间复杂度：O(N*M) 空间复杂度：O(1)  消除 利用异或运算的 自反性，记录前缀数组的异或值，然后通过异或操作对前缀数组的值进行消除，即可以 O(1) 的时间求得结果。\nfunc xorQueries(arr []int, queries [][]int) []int { xor := make([]int, 0, len(arr)+1) xor = append(xor, 0) for i := 0; i \u0026lt; len(arr); i++ { xor = append(xor, xor[i]^arr[i]) } res := make([]int, 0, len(queries)) for _, query := range queries { res = append(res, xor[query[0]]^xor[query[1]+1]) } return res }  复杂度  时间复杂度：O(N+M) 空间复杂度：O(N)  ","date":"2021-05-12T23:14:18+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1310.-%E5%AD%90%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%9F%A5%E8%AF%A2/","title":"Leetcode 1310. 子数组异或查询"},{"content":" 链接： https://leetcode-cn.com/problems/decode-xored-permutation/\n难度： 中等\n题目描述 给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。\n它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。\n给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。\n示例1：  输入：encoded = [3,1]\n输出：[1,2,3]\n解释：如果 perm = [1,2,3] ，那么 encoded = [1 XOR 2,2 XOR 3] = [3,1]\n 示例2：  输入：encoded = [6,5,4,6]\n输出：[2,4,1,5,3]\n 提示：  3 \u0026lt;= n \u0026lt; 105 n 是奇数。 encoded.length == n - 1  解题思路 消除 有题意可知，只要知道原数组 perm 的一个元素，就可以推导得出整个数组，而原数组的所有元素均已知，所以可以求得所有元素的异或值 1⊕2⊕…⊕n。\n由 encoded[i] = perm[i]⊕[i+1] 且 n为奇数，可以进一步得到 perm[1]⊕perm[2]⊕…⊕perm[n-1] = encoded[1]⊕encoded[3]⊕...⊕encoded[n-2]。\n将上述两个结果异或即可消除除 perm[0] 外的所有值，然后就可以推导 perm 了\nfunc decode(encoded []int) []int { perm := make([]int, 0, len(encoded)+1) tmp := 0 for i := 1; i \u0026lt;= cap(perm); i++ { tmp ^= i } for i := 1; i \u0026lt; len(encoded); i += 2 { tmp ^= encoded[i] } perm = append(perm, tmp) for i := range encoded { perm = append(perm, perm[i]^encoded[i]) } return perm }  复杂度  时间复杂度：O(N) 空间复杂度：O(1)  ","date":"2021-05-11T19:55:25+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1734.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%8E%92%E5%88%97/","title":"Leetcode 1734. 解码异或后的排列"},{"content":" 链接： https://leetcode-cn.com/problems/leaf-similar-trees/\n难度： 简单\n题目描述 请考虑一棵二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。\n举个例子，如上图所示，给定一棵叶值序列为 (6, 7, 4, 9, 8) 的树。\n如果有两棵二叉树的叶值序列是相同，那么我们就认为它们是 *叶相似* 的。\n如果给定的两个根结点分别为 root1 和 root2 的树是叶相似的，则返回 true；否则返回 false 。\n示例1：  输入：root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n输出：true\n 示例2：  输入：root1 = [1], root2 = [1]\n输出：true\n 示例3：  输入：root1 = [1], root2 = [2]\n输出：false\n 示例4：  输入：root1 = [1,2], root2 = [2,2]\n输出：true\n 示例5：  输入：root1 = [1,2,3], root2 = [1,3,2]\n输出：false\n 提示：  给定的两棵树可能会有 1 到 200 个结点。 给定的两棵树上的值介于 0 到 200 之间。  解题思路 直接求解 分别求出两棵树的*叶值序列*，然后逐一进行比较即可。\nfunc leafSimilar(root1 *TreeNode, root2 *TreeNode) bool { var dfs func(node *TreeNode, leafs *[]int) dfs = func(node *TreeNode, leafs *[]int) { fmt.Println(node.Val) if node.Left == nil \u0026amp;\u0026amp; node.Right == nil { *leafs = append(*leafs, node.Val) } else { if node.Left != nil { dfs(node.Left, leafs) } if node.Right != nil { dfs(node.Right, leafs) } } } leafs1 := make([]int, 0, 100) dfs(root1, \u0026amp;leafs1) leafs2 := make([]int, 0, 100) dfs(root2, \u0026amp;leafs2) if len(leafs1) != len(leafs2) { return false } for i := range leafs1 { if leafs1[i] != leafs2[i] { return false } } return true }  复杂度  时间复杂度：O(N1+N2) 空间复杂度：O(N1+N2)  ","date":"2021-05-10T23:30:50+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-872.-%E5%8F%B6%E5%AD%90%E7%9B%B8%E4%BC%BC%E7%9A%84%E6%A0%91/","title":"Leetcode 872. 叶子相似的树"},{"content":" 链接： https://leetcode-cn.com/problems/xor-operation-in-an-array/\n难度： 简单\n题目描述 给你两个整数，n 和 start 。\n数组 nums 定义为：nums[i] = start + 2*i（下标从 0 开始）且 n == nums.length 。\n请返回 nums 中所有元素按位异或（XOR）后得到的结果。\n示例1：  输入：n = 5, start = 0\n输出：8\n解释：数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。\n\u0026ldquo;^\u0026rdquo; 为按位异或 XOR 运算符。\n 示例2：  输入：n = 4, start = 3\n输出：8\n解释：数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.\n 示例3：  输入：n = 1, start = 7\n输出：7\n 示例4：  输入：n = 10, start = 5\n输出：2\n 提示：  1 \u0026lt;= n \u0026lt;= 1000 0 \u0026lt;= start \u0026lt;= 1000 n == nums.length  解题思路 模拟 按照数组生成方式生成数组，然后依次异或求解，由于每个元素只用依次，所以可以省略掉数组空间\nfunc xorOperation(n int, start int) int { res := 0 for i := 0; i \u0026lt; n; i++ { res ^= start + i\u0026lt;\u0026lt;1 } return res }  复杂度  时间复杂度：O(N) 空间复杂度：O(1)  ","date":"2021-05-07T17:05:42+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1486.-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/","title":"Leetcode 1486. 数组异或操作"},{"content":" 链接： https://leetcode-cn.com/problems/decode-xored-array/\n难度： 中等\n题目描述 未知 整数数组 arr 由 n 个非负整数组成。\n经编码后变为长度为 n - 1 的另一个整数数组 encoded ，其中 encoded[i] = arr[i] XOR arr[i + 1] 。例如，arr = [1,0,2,1] 经编码后得到 encoded = [1,2,3] 。\n给你编码后的数组 encoded 和原数组 arr 的第一个元素 first（arr[0]）。\n请解码返回原数组 arr 。可以证明答案存在并且是唯一的。\n示例1：  输入：encoded = [1,2,3], first = 1\n输出：[1,0,2,1]\n解释：若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]\n 示例2：  输入：encoded = [6,2,7,3], first = 4\n输出：[4,2,0,7,4]\n 提示：  2 \u0026lt;= n \u0026lt;= 104 encoded.length == n - 1 0 \u0026lt;= encoded[i] \u0026lt;= 105 0 \u0026lt;= first \u0026lt;= 105  解题思路 数学    a b a⊕b     0 0 0   0 1 1   1 0 1   1 1 0    通过上表可以推出: a = b ⊕ a⊕b，从而得到推导方程：arr[i+1] = arr[i] ⊕ encoded[i]\nfunc decode(encoded []int, first int) []int { res := make([]int, 0, len(encoded)+1) res = append(res, first) for i, e := range encoded { res = append(res, res[i] ^ e) } return res }  复杂度  时间复杂度：O(N) 空间复杂度：O(1)  ","date":"2021-05-06T23:09:07+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1720.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84/","title":"Leetcode 1720. 解码异或后的数组"},{"content":" 链接： https://leetcode-cn.com/problems/delete-and-earn/\n难度： 中等\n题目描述 给你一个整数数组 nums ，你可以对它进行一些操作。\n每次操作中，选择任意一个 nums[i] ，删除它并获得 nums[i] 的点数。之后，你必须删除每个等于 nums[i] - 1 或 nums[i] + 1 的元素。\n开始你拥有 0 个点数。返回你能通过这些操作获得的最大点数。\n示例1：  输入：nums = [3,4,2]\n输出：6\n解释：删除 4 获得 4 个点数，因此 3 也被删除。\n之后，删除 2 获得 2 个点数。总共获得 6 个点数。\n 示例2：  输入：nums = [2,2,3,3,3,4]\n输出：9\n解释：删除 3 获得 3 个点数，接着要删除两个 2 和 4 。\n之后，再次删除 3 获得 3 个点数，再次删除 3 获得 3 个点数。\n总共获得 9 个点数。\n 提示：  1 \u0026lt;= nums.length \u0026lt;= 2 * 104 1 \u0026lt;= nums[i] \u0026lt;= 104  解题思路 动态规划 典型的求最优解的问题，考虑用动态规划求解。\n当要删除一个数字 i 时，需将删除所有的 i 全部从数组中删除，记其数量为 cnt, 同时可以获得点数 i * cnt，将删除每个数获得的点数用 map 记录下来。\n用 dp[i] 表示在数组中，当前满足所有的数字均小于时的最大点数，则容易得到转移方程：\n dp[0] = 0, dp[1] = map[i] dp[i] = max(dp[i-1], dp[i-2]+map[i])  执行到整个数组的最大值时为止，得到最大点数。\nfunc deleteAndEarn(nums []int) int { maxNum := 0 cnt := make(map[int]int) for _, num := range nums { cnt[num]++ if maxNum \u0026lt; num { maxNum = num } } dp := make([]int, maxNum+1) dp[1] = cnt[1] for i := 2; i \u0026lt;= maxNum; i++ { dp[i] = dp[i-2] + cnt[i]*i if dp[i] \u0026lt; dp[i-1] { dp[i] = dp[i-1] } } return dp[maxNum] }  复杂度  时间复杂度：O(max(num[i])) 空间复杂度：O(N)  ","date":"2021-05-05T23:47:15+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-740.-%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/","title":"Leetcode 740. 删除并获得点数"},{"content":" 链接： https://leetcode-cn.com/problems/reverse-integer/\n难度： 简单\n题目描述 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。\n如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1] ，就返回 0。\n假设环境不允许存储 64 位整数（有符号或无符号）。\n示例1：  输入：x = 123\n输出：321\n 示例2：  输入：x = -123\n输出：-321\n 示例3：  输入：x = 120\n输出：21\n 示例4：  输入：x = 0\n输出：0\n 提示：  -231 \u0026lt;= x \u0026lt;= 231 - 14  解题思路 双指针 直接数字逐位反转，当数字为十位数时，32位整数无法存储，需要做一次溢位判断：\n可以将数字分为前9位数与第10位数进行比较，不再临界值的范围内，说明溢出。\nfunc reverse(x int) int { res := 0 for i := 0; x != 0 \u0026amp;\u0026amp; i \u0026lt; 9; i++ { res = res*10 + x%10 x /= 10 } if x != 0 { if (x \u0026gt; 0 \u0026amp;\u0026amp; (res \u0026gt; math.MaxInt32/10 || (res == math.MaxInt32/10 \u0026amp;\u0026amp; x \u0026gt; math.MaxInt32%10))) || (x \u0026lt; 0 \u0026amp;\u0026amp; (res \u0026lt; math.MinInt32/10 || (res == math.MinInt32/10 \u0026amp;\u0026amp; x \u0026lt; math.MinInt32%10))) { res = 0 } else { res = res*10 + x } } return res }  复杂度  时间复杂度：O(logB) 空间复杂度：O(1)  ","date":"2021-05-03T11:57:39+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-7.-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/","title":"Leetcode 7. 整数反转"},{"content":" 链接： https://leetcode-cn.com/problems/brick-wall/\n难度： 中等\n题目描述 你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。\n你现在要画一条 自顶向下 的、穿过 最少 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。\n给你一个二维数组 wall ，该数组包含这堵墙的相关信息。其中，wall[i] 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 穿过的砖块数量最少 ，并且返回 穿过的砖块数量 。\n示例1：  输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n输出：2\n 示例2：  输入：wall = [[1],[1],[1]]\n输出：3\n 提示：  n == wall.length 1 \u0026lt;= n \u0026lt;= 104 1 \u0026lt;= wall[i].length \u0026lt;= 104 1 \u0026lt;= sum(wall[i].length) \u0026lt;= 2 * 104 对于每一行 i ，sum(wall[i]) 应当是相同的 1 \u0026lt;= wall[i][j] \u0026lt;= 231 - 1  解题思路 计数 以每一行起点为 0 坐标，可以使得同一列的缝隙唯一标识，从而标记出所有缝隙的列坐标。\n统计每一列的缝隙出现次数，找出出现最多的缝隙，即可求得最小穿过砖块数量。\nfunc leastBricks(wall [][]int) int { gapCnt := make(map[int]int) for _, bricks := range wall { gap := 0 l := len(bricks) - 1 for i := 0; i \u0026lt; l; i++ { gap += bricks[i] gapCnt[gap]++ } } maxGaps := 0 for _, v := range gapCnt { if maxGaps \u0026lt; v { maxGaps = v } } return len(wall) - maxGaps }  复杂度  时间复杂度：O(M*N) 空间复杂度：O(M*N)  ","date":"2021-05-02T10:03:17+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-554.-%E7%A0%96%E5%A2%99/","title":"Leetcode 554. 砖墙"},{"content":" 链接： https://leetcode-cn.com/problems/employee-importance/\n难度： 简单\n题目描述 给定一个保存员工信息的数据结构，它包含了员工 唯一的 id ，重要度 和 直系下属的 id 。\n比如，员工 1 是员工 2 的领导，员工 2 是员工 3 的领导。他们相应的重要度为 15 , 10 , 5 。那么员工 1 的数据结构是 [1, 15, [2]] ，员工 2的 数据结构是 [2, 10, [3]] ，员工 3 的数据结构是 [3, 5, []] 。注意虽然员工 3 也是员工 1 的一个下属，但是由于 并不是直系 下属，因此没有体现在员工 1 的数据结构中。\n现在输入一个公司的所有员工信息，以及单个员工 id ，返回这个员工和他所有下属的重要度之和。\n示例：  输入：[[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n输出：11\n解释：员工 1 自身的重要度是 5 ，他有两个直系下属 2 和 3 ，而且 2 和 3 的重要度均为 3 。因此员工 1 的总重要度是 5 + 3 + 3 = 11 。\n 提示：  一个员工最多有一个 直系 领导，但是可以有多个 直系 下属 员工数量不超过 2000  解题思路 深度优先搜素 很容易可以看出整个的员工体系是一个树状结构，故可以采用深度优先搜索的策略，对某一员工及其下属逐一求和。\n为能快速定位到某一个员工，另使用一个 map 维护员工id到员工信息的映射。\nfunc getImportance(employees []*Employee, id int) int { m := make(map[int]*Employee) for _, e := range employees { m[e.Id] = e } var dfs func(id int) int dfs = func(id int) int { e, ok := m[id] if !ok { return 0 } sum := e.Importance for _, s := range e.Subordinates { sum += dfs(s) } return sum } return dfs(id) }  复杂度  时间复杂度：O(N) 空间复杂度：O(N)  ","date":"2021-05-01T21:20:28+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-690.-%E5%91%98%E5%B7%A5%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/","title":"Leetcode 690. 员工的重要性"},{"content":" 链接： https://leetcode-cn.com/problems/single-number-ii/\n难度： 中等\n题目描述 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。\n示例1：  输入：nums = [2,2,3,2] 输出：3\n 示例2：  输入：nums = [0,1,0,1,0,1,99] 输出：99\n 提示：  1 \u0026lt;= nums.length \u0026lt;= 3 * 104 -231 \u0026lt;= nums[i] \u0026lt;= 231 - 1 nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次  进阶：你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n解题思路 哈希 统计每个数出现的次数，然后找出其中只出现一次的数\nfunc singleNumber(nums []int) int { cnt := make(map[int]int) for _, num := range nums { cnt[num]++ } for k, v := range cnt { if v == 1 { return k } } return 0 }  复杂度  时间复杂度：O(N) 空间复杂度：O(N)  排序 将整个数组排序，没三个一组进行首尾比较，相同继续，不同返回。\nfunc singleNumber(nums []int) int { sort.Ints(nums) res := nums[0] for i := 2; i \u0026lt; len(nums); i += 3 { if res == nums[i] { res = nums[i+1] continue } else { break } } return res }  复杂度  时间复杂度：O(NlogN) 空间复杂度：O(1)  位运算 统计每一位的数字总和，其必然是 0 或者 3n+1，在统计过程中就可以逢3清零，依次求解下去即可。 考虑用两个位 a, b 记录求和数据，表如下所示:\n   cur num next     00 0 00   00 1 01   01 0 01   01 1 10   10 0 10   10 1 00    根据上表可推导出 a 和 b 的变换表：\n   a b x new_a     0 0 0 0   0 0 1 0   0 1 0 0   0 1 1 1   1 0 0 1   1 0 1 0    得到a的转移方程： new_a = a'bx + ab'x'\n   b a x new_b     0 0 0 0   0 0 1 1   0 1 0 0   0 1 1 0   1 0 0 1   1 0 1 0    得到b的转移方程： new_b = a'b'x + a'bx' = a'(b'x+bx') = a'(b⊕x)\nfunc singleNumber(nums []int) int { a, b := 0, 0 for _, x := range nums { t := ^a\u0026amp;b\u0026amp;x | a\u0026amp;^b\u0026amp;^x b = ^a \u0026amp; (b ^ x) a = t } return b } ","date":"2021-04-30T18:18:49+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-137.-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii/","title":"Leetcode 137. 只出现一次的数字 II"},{"content":" 链接： https://leetcode-cn.com/problems/frog-jump/\n难度： 困难\n题目描述 一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。\n给你石子的位置列表 stones（用单元格序号 升序 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。\n开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格 1 跳至单元格 2 ）。\n如果青蛙上一步跳跃了 k 个单位，那么它接下来的跳跃距离只能选择为 k - 1、k 或 k + 1 个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。\n示例1：  输入：stones = [0,1,3,5,6,8,12,17]\n输出：true\n解释：青蛙可以成功过河，按照如下方案跳跃：跳 1 个单位到第 2 块石子, 然后跳 2 个单位到第 3 块石子, 接着 跳 2 个单位到第 4 块石子, 然后跳 3 个单位到第 6 块石子, 跳 4 个单位到第 7 块石子, 最后，跳 5 个单位到第 8 个石子（即最后一块石子）。\n 示例2：  输入：stones = [0,1,2,3,4,8,9,11]\n输出：false\n解释：这是因为第 5 和第 6 个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。\n 提示：  2 \u0026lt;= stones.length \u0026lt;= 2000 0 \u0026lt;= stones[i] \u0026lt;= 231-1 stones[0] == 0  解题思路 动态规划 从题意可以看出，青蛙每次从某块石头开始起跳，可以降落到一个范围 [k-1 k+1], k 表示上一次的跳跃步长。由于每次跳跃都依赖于前一次跳跃的步长，考虑用动态规划实现。 dp[i] 记录所有可以跳跃到第 i 个石头上面的步长集合，之后就可以根据该集合，向后推导下一跳：\n针对 dp[i] 的每一个步长 step，当 step-1 \u0026lt;= stones[j]-stones[i] \u0026lt;= step+1, (j \u0026gt; i, k∈dp[i]) 时，将步长 stones[j]-stones[i] 添加进 dp[j]\ndp[len-1] 不是空集合，说明能找到，返回 true；否则找不到返回 false\nfunc canCross(stones []int) bool { dp := make([]map[int]bool, len(stones)) dp[0] = map[int]bool{0: true} for i := 0; i \u0026lt; len(stones); i++ { for step := range dp[i] { for j := i + 1; j \u0026lt; len(stones) \u0026amp;\u0026amp; stones[j]-stones[i] \u0026lt;= step+1; j++ { if stones[j]-stones[i] \u0026gt;= step-1 { if dp[j] == nil { dp[j] = make(map[int]bool) } dp[j][stones[j]-stones[i]] = true } } } } if len(dp[len(stones)-1]) != 0 { return true } return false }  复杂度  时间复杂度：O(N2) 空间复杂度：O(N2)  ","date":"2021-04-29T14:21:06+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-403.-%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3/","title":"Leetcode 403. 青蛙过河"},{"content":" 链接： https://leetcode-cn.com/problems/sum-of-square-numbers/\n难度： 中等\n题目描述 给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c 。\n示例1：  输入：c = 5\n输出：true\n解释：1 * 1 + 2 * 2 = 5\n 示例2：  输入：c = 3\n输出：false\n 示例3：  输入：c = 4\n输出：true\n 示例4：  输入：c = 2\n输出：true\n 示例5：  输入：c = 1 输出：true\n 提示：  0 \u0026lt;= c \u0026lt;= 231 - 1  解题思路 打表 维护一个保存所有平方数的 map，然后从0开始枚举所有可能是 a 的情况，寻找 b = c-a2 是否存在于 map 中\nvar exist = make(map[int]bool) func init() { for i := 0; i*i \u0026lt; math.MaxInt32; i++ { exist[i*i] = true } } func judgeSquareSum(c int) bool { for i := 0; i*i \u0026lt;= c; i++ { if exist[c-i*i] { return true } } return false }  复杂度  时间复杂度：O(√c) 空间复杂度：O(√N)  开方 枚举所有可能是 a 的情况，然后对 b = c-a2 开放，判断开方后的结果是否为整数即可\nfunc judgeSquareSum(c int) bool { for i := 0; i*i \u0026lt;= c; i++ { t := math.Sqrt(float64(c - i*i)) if i*i+int(t)*int(t) == c { return true } } return false }  复杂度  时间复杂度：O(√c) 空间复杂度：O(1)  双指针 用 i, j(i \u0026lt; j) 表示两个指针，向中间遍历，初始 i = 0, j = √c\n 当 i*i + j*j == c 时，返回 true; 当 i*i + j*j \u0026lt; c 时， i++; 当 i*i + j*j \u0026gt; c 时， j--;  直到 i \u0026gt; j 时，依然未能找到 a, b，返回 false\nfunc judgeSquareSum(c int) bool { for i := 0, j := int(); i*i \u0026lt;= c; i++ { t := math.Sqrt(float64(c - i*i)) if i*i+int(t)*int(t) == c { return true } } return false }  复杂度  时间复杂度：O(√c) 空间复杂度：O(1)  ","date":"2021-04-28T22:46:56+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-633.-%E5%B9%B3%E6%96%B9%E6%95%B0%E4%B9%8B%E5%92%8C/","title":"Leetcode 633. 平方数之和"},{"content":" 链接： https://leetcode-cn.com/problems/range-sum-of-bst/\n难度： 简单\n题目描述 给定二叉搜索树的根结点 root，返回值位于范围 [low, high] 之间的所有结点的值的和。\n示例1：  输入：root = [10,5,15,3,7,null,18], low = 7, high = 15\n输出：32\n 示例2：  输入：root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\n输出：23\n 提示：  树中节点数目在范围 [1, 2 * 104] 内 1 \u0026lt;= Node.val \u0026lt;= 105 1 \u0026lt;= low \u0026lt;= high \u0026lt;= 105 所有 Node.val 互不相同  解题思路 深度优先搜索 不同于一般搜索树的搜索，该搜索需要遍历整颗树，以累计求和，必要部分需要剪枝加快遍历速度。\n搜索时需要区分三种情况：\n 当前结点值 val \u0026lt; low 时，左子树均不满足条件，继续搜索右子树； 当前结点值 val \u0026gt; high 时，右子树均不满足条件，继续搜索左子树； 其余情况，累加当前结点值，无法剪枝，左右子树都需要继续搜索。\nfunc rangeSumBST(root *TreeNode, low int, high int) int { sum := 0 var search func(node *TreeNode) search = func(node *TreeNode) { if node == nil { return } if node.Val \u0026lt; low { search(node.Right) } else if node.Val \u0026gt; high { search(node.Left) } else { sum += node.Val search(node.Left) search(node.Right) } } search(root) return sum }   复杂度  时间复杂度：O(N) 空间复杂度：O(1)  ","date":"2021-04-27T10:31:11+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-938.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C/","title":"Leetcode 938. 二叉搜索树的范围和"},{"content":" 链接： https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/\n难度： 中等\n题目描述 传送带上的包裹必须在 D 天内从一个港口运送到另一个港口。\n传送带上的第 i 个包裹的重量为 weights[i]。每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。\n返回能在 D 天内将传送带上的所有包裹送达的船的最低运载能力。\n示例1：  输入：weights = [1,2,3,4,5,6,7,8,9,10], D = 5\n输出：15\n解释：\n船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：\n第 1 天：1, 2, 3, 4, 5\n第 2 天：6, 7\n第 3 天：8\n第 4 天：9\n第 5 天：10\n请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。\n 示例2：  输入：weights = [3,2,2,4,1,4], D = 3\n输出：6\n解释：\n船舶最低载重 6 就能够在 3 天内送达所有包裹，如下所示：\n第 1 天：3, 2\n第 2 天：2, 4\n第 3 天：1, 4\n 示例3：  输入：weights = [1,2,3,1,1], D = 4\n输出：3\n解释：\n第 1 天：1\n第 2 天：2\n第 3 天：3\n第 4 天：1, 1\n 提示：  1 \u0026lt;= D \u0026lt;= weights.length \u0026lt;= 50000 1 \u0026lt;= weights[i] \u0026lt;= 500  解题思路 暴力求解 将货物总重量的 平均数 和 最重货物 较大的一个重量作为初始的载重量，逐一向上累加，求得首次符合条件的结果。\nfunc shipWithinDays(weights []int, D int) int { sum := 0 max := 0 for _, weight := range weights { sum += weight if max \u0026lt; weight { max = weight } } minCap := sum / len(weights) if sum%len(weights) != 0 { minCap++ } if minCap \u0026lt; max { minCap = max } for { curCap := minCap // 当前容量 \tcnt := 1 // 第几天 \ti := 0 // 装到第几箱货物 \tfor i \u0026lt; len(weights) \u0026amp;\u0026amp; cnt \u0026lt;= D { // 能装入，继续 \tif curCap \u0026gt;= weights[i] { curCap -= weights[i] i++ continue } // 不能装入，等第二天 \tcnt++ curCap = minCap } // 装完 \tif i == len(weights) { return minCap } minCap++ } }  复杂度  时间复杂度：O(N*∑weight) 空间复杂度：O(1)  二分查找 将 最重货物重量 l 和 货物的总重量 r 作为二分查找的两端起始点，进行二分查找，每次求得完成送达的天数 d。\n 当 d \u0026lt;= D 时，载重量偏大，需要从左半部分 [l,mid] 查找 当 d \u0026gt; D 时，载重量偏小，需要从右半部分 (mid, r] 查找\nfunc shipWithinDays(weights []int, D int) int { r := 0 l := 0 for _, weight := range weights { r += weight if l \u0026lt; weight { l = weight } } var binarySearch func(l, r int) int binarySearch = func(l, r int) int { if l == r { return l } mid := (l + r) / 2 cnt := 1 curCap := mid for i := 0; i \u0026lt; len(weights); { // 能装入，继续 \tif curCap \u0026gt;= weights[i] { curCap -= weights[i] i++ continue } // 不能装入，等第二天 \tcnt++ curCap = mid } if cnt \u0026lt;= D { return binarySearch(l, mid) } else { return binarySearch(mid+1, r) } } return binarySearch(l, r) }   复杂度  时间复杂度：O(N*log(∑weight)) 空间复杂度：O(1)  ","date":"2021-04-26T11:10:26+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-1011.-%E5%9C%A8-d-%E5%A4%A9%E5%86%85%E9%80%81%E8%BE%BE%E5%8C%85%E8%A3%B9%E7%9A%84%E8%83%BD%E5%8A%9B/","title":"Leetcode 1011. 在 D 天内送达包裹的能力"},{"content":" 链接： https://leetcode-cn.com/problems/increasing-order-search-tree/\n难度： 简单\n题目描述 给你一棵二叉搜索树，请你 按中序遍历 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。\n示例1：  输入：root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\n输出：[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n 示例2：  输入：root = [5,1,7]\n输出：[1,null,5,null,7]\n 提示：  树中节点数的取值范围是 [1, 100] 0 \u0026lt;= Node.val \u0026lt;= 1000  解题思路 新建树 重新构造一棵树，中序遍历原树的每个结点，将其加入到新树的右结点中。\nfunc increasingBST(root *TreeNode) *TreeNode { newRoot := new(TreeNode) newNode := newRoot var InorderTraversal func(node *TreeNode) InorderTraversal = func(node *TreeNode) { if node == nil { return } InorderTraversal(node.Left) newNode.Right = \u0026amp;TreeNode{ Val: node.Val, Left: nil, Right: nil, } newNode = newNode.Right InorderTraversal(node.Right) } InorderTraversal(root) newRoot = newRoot.Right return newRoot }  复杂度  时间复杂度：O(N) 空间复杂度：O(N)  就地改指针 维护一个叶结点指针，中序遍历整棵树，每当遇到一个新结点时，该结点 left 置为空，叶结点 right 修改为该结点，叶结点修正为该结点。\nfunc increasingBST(root *TreeNode) *TreeNode { newRoot := new(TreeNode) newLeaf := newRoot var LDR func(node *TreeNode) LDR = func(node *TreeNode) { if node == nil { return } LDR(node.Left) newLeaf.Right = node newLeaf = newLeaf.Right node.Left = nil LDR(node.Right) } LDR(root) newRoot = newRoot.Right return newRoot }  复杂度  时间复杂度：O(N) 空间复杂度：O(1)  ","date":"2021-04-25T11:41:33+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-897.-%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91/","title":"Leetcode 897. 递增顺序搜索树"},{"content":" 链接： https://leetcode-cn.com/problems/combination-sum-iv/\n难度： 中等\n题目描述 给你一个由 不同 整数组成的数组 nums ，和一个目标整数 target 。请你从 nums 中找出并返回总和为 target 的元素组合的个数。\n题目数据保证答案符合 32 位整数范围。\n示例1：  输入：nums = [1,2,3], target = 4\n输出：7\n解释：\n所有可能的组合为：\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n请注意，顺序不同的序列被视作不同的组合。\n 示例2：  输入：nums = [9], target = 3\n输出：0\n 提示：  1 \u0026lt;= nums.length \u0026lt;= 200 1 \u0026lt;= nums[i] \u0026lt;= 1000 nums 中的所有元素 互不相同 1 \u0026lt;= target \u0026lt;= 1000  解题思路 动态规划 用 dp[i] 表示当 i 作为 target 时，排列方案的数量。当 dp[i] 不为 0 时，不妨假设排列的做后一位数字为 num，则 i-num 的排列数为 dp[i-num] ，容易得知状态转移方程：\n 当 i = 0 时，dp[i] = 1，表示没有元素被选中； 当 0 \u0026lt; i \u0026lt;= target 时，dp[i] = ∑dp[i-num],(num \u0026lt;= i)。\nfunc combinationSum4(nums []int, target int) int { dp := make([]int, target+1) dp[0] = 1 for i := 1; i \u0026lt;= target; i++ { for _, num := range nums { if num \u0026lt;= i { dp[i] += dp[i-num] } } } return dp[target] }   复杂度  时间复杂度：O(N*T) 空间复杂度：O(1)  ","date":"2021-04-24T21:50:28+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-377.-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/","title":"Leetcode 377. 组合总和 Ⅳ"},{"content":" 链接： https://leetcode-cn.com/problems/decode-ways/\n难度： 中等\n题目描述 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：\n\u0026#39;A\u0026#39; -\u0026gt; 1 \u0026#39;B\u0026#39; -\u0026gt; 2 ... \u0026#39;Z\u0026#39; -\u0026gt; 26 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，\u0026quot;11106\u0026quot; 可以映射为：\n \u0026quot;AAJF\u0026quot; ，将消息分组为 (1 1 10 6) \u0026quot;KJF\u0026quot; ，将消息分组为 (11 10 6)  注意，消息不能分组为 (1 11 06) ，因为 \u0026quot;06\u0026quot; 不能映射为 \u0026quot;F\u0026quot; ，这是由于 \u0026quot;6\u0026quot; 和 \u0026quot;06\u0026quot; 在映射中并不等价。\n给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。\n题目数据保证答案肯定是一个 32 位 的整数。\n示例1：  输入：s = \u0026ldquo;12\u0026rdquo;\n输出：2\n解释：它可以解码为 \u0026ldquo;AB\u0026rdquo;（1 2）或者 \u0026ldquo;L\u0026rdquo;（12）。\n 示例2：  输入：s = \u0026ldquo;226\u0026rdquo;\n输出：3\n解释：它可以解码为 \u0026ldquo;BZ\u0026rdquo; (2 26), \u0026ldquo;VF\u0026rdquo; (22 6), 或者 \u0026ldquo;BBF\u0026rdquo; (2 2 6) 。\n 示例3：  输入：s = \u0026ldquo;0\u0026rdquo;\n输出：0\n解释：没有字符映射到以 0 开头的数字。\n含有 0 的有效映射是 \u0026lsquo;J\u0026rsquo; -\u0026gt; \u0026ldquo;10\u0026rdquo; 和 \u0026rsquo;T\u0026rsquo;-\u0026gt; \u0026ldquo;20\u0026rdquo; 。\n由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。\n 示例4:  输入：s = \u0026ldquo;06\u0026rdquo;\n输出：0\n解释：\u0026ldquo;06\u0026rdquo; 不能映射到 \u0026ldquo;F\u0026rdquo; ，因为字符串含有前导 0（\u0026rdquo;6\u0026rdquo; 和 \u0026ldquo;06\u0026rdquo; 在映射中并不等价）。\n 提示：  1 \u0026lt;= s.length \u0026lt;= 100 s 只包含数字，并且可能包含前导零。  解题思路 动态规划 使用数组 dp 保存解码的总数， dp[i] 表示截止到长度为 i 的字串可以解码的总数，转移时有两种情况需要考虑：\n 第一种情况，对 s[i] 进行解码，要求 s[i] != 0 第二种情况，对 s[i-1]s[i] 解码, 要求 \u0026quot;00\u0026quot; \u0026lt; s[i-1]s[i] \u0026lt;= \u0026quot;26  然后就可以推导出状态转移方程：\n 初始时，dp[0] = 0, 表示空字符串有一种解法 - 空串 仅满足情况一， dp[i+1] = dp[i] 经满足情况二， dp[i+1] = dp[i-1] 同时满足情况一和二， dp[i+1] = dp[i] + dp[i-1] 情况一和二均不满足，说明该字符串不能解码  求解到 s 尾，即可求解得所有解码总数 dp[len(s)]。\nfunc numDecodings(s string) int { dp := make([]int, len(s)+1) dp[0] = 1 for i := 0; i \u0026lt; len(s); i++ { exist := false // 标记是否可以解码 \t// 情况一 \tif s[i] \u0026gt; \u0026#39;0\u0026#39; { dp[i+1] += dp[i] exist = true } // 情况二 \tif i \u0026gt; 0 \u0026amp;\u0026amp; s[i-1] != \u0026#39;0\u0026#39; { num := 10*int(s[i-1]-\u0026#39;0\u0026#39;) + int(s[i]-\u0026#39;0\u0026#39;) if num \u0026gt; 0 \u0026amp;\u0026amp; num \u0026lt;= 26 { dp[i+1] += dp[i-1] exist = true } } if !exist { break } } return dp[len(s)] }  优化 每次迭代只涉及到三个变量，故可以用三个变量代替数组，进一步降低空间复杂度\nfunc numDecodings(s string) int { dp := []int{0, 1, 0} for i := 0; i \u0026lt; len(s); i++ { exist := false // 标记是否可以解码 \tdp[2] = 0 // 情况一 \tif s[i] \u0026gt; \u0026#39;0\u0026#39; { dp[2] += dp[1] exist = true } // 情况二 \tif i \u0026gt; 0 \u0026amp;\u0026amp; s[i-1] != \u0026#39;0\u0026#39; { num := 10*int(s[i-1]-\u0026#39;0\u0026#39;) + int(s[i]-\u0026#39;0\u0026#39;) if num \u0026gt; 0 \u0026amp;\u0026amp; num \u0026lt;= 26 { dp[2] += dp[0] exist = true } } if !exist { break } dp[0], dp[1] = dp[1], dp[2] } return dp[2] }  复杂度  时间复杂度：O(N) 空间复杂度：优化前：O(N)，优化后O(1)  ","date":"2021-04-21T10:35:45+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-91.-%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F/","title":"Leetcode 91. 解码方式"},{"content":" 链接： https://leetcode-cn.com/problems/compare-version-numbers/\n难度： 中等\n题目描述 给你两个版本号 version1 和 version2 ，请你比较它们。\n版本号由一个或多个修订号组成，各修订号由一个 '.' 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。\n比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 忽略任何前导零后的整数值 。也就是说，修订号 1 和修订号 001 相等 。如果版本号没有指定某个下标处的修订号，则该修订号视为 0 。例如，版本 1.0 小于版本 1.1 ，因为它们下标为 0 的修订号相同，而下标为 1 的修订号分别为 0 和 1 ，0 \u0026lt; 1 。\n返回规则如下：\n 如果 version1 \u0026gt; version2 返回 1， 如果 version1 \u0026lt; version2 返回 -1， 除此之外返回 0。  示例1：  输入：version1 = \u0026ldquo;1.01\u0026rdquo;, version2 = \u0026ldquo;1.001\u0026rdquo;\n输出：0\n解释：忽略前导零，\u0026rdquo;01\u0026rdquo; 和 \u0026ldquo;001\u0026rdquo; 都表示相同的整数 \u0026ldquo;1\u0026rdquo;\n 示例2：  输入：version1 = \u0026ldquo;1.0\u0026rdquo;, version2 = \u0026ldquo;1.0.0\u0026rdquo;\n输出：0\n解释：version1 没有指定下标为 2 的修订号，即视为 \u0026ldquo;0\u0026rdquo;\n 示例3：  输入：version1 = \u0026ldquo;0.1\u0026rdquo;, version2 = \u0026ldquo;1.1\u0026rdquo;\n输出：-1\n解释：version1 中下标为 0 的修订号是 \u0026ldquo;0\u0026rdquo;，version2 中下标为 0 的修订号是 \u0026ldquo;1\u0026rdquo; 。0 \u0026lt; 1，所以 version1 \u0026lt; version2\n 示例4：  输入：version1 = \u0026ldquo;1.0.1\u0026rdquo;, version2 = \u0026ldquo;1\u0026rdquo;\n输出：1\n 示例5：  输入：version1 = \u0026ldquo;7.5.2.4\u0026rdquo;, version2 = \u0026ldquo;7.5.3\u0026rdquo;\n输出：-1\n 提示：  1 \u0026lt;= version1.length, version2.length \u0026lt;= 500 version1 和 version2 仅包含数字和 '.' version1 和 version2 都是 有效版本号 version1 和 version2 的所有修订号都可以存储在 32 位整数 中  解题思路 分割 将两个版本号以 '.' 为分割符进行分割，之后注意比较各个部分，较短的版本号，后续缺失的部分用 0 进行代替。\nfunc compareVersion(version1 string, version2 string) int { num1 := strings.Split(version1, \u0026#34;.\u0026#34;) num2 := strings.Split(version2, \u0026#34;.\u0026#34;) for i := 0; i \u0026lt; len(num1) || i \u0026lt; len(num2); i++ { var p, q int64 if i \u0026lt; len(num1) { p, _ = strconv.ParseInt(num1[i], 10, 64) } if i \u0026lt; len(num2) { q, _ = strconv.ParseInt(num2[i], 10, 64) } if p \u0026gt; q { return 1 } else if p \u0026lt; q { return -1 } } return 0 }  复杂度  时间复杂度：O(N+N+max(N, M)) 空间复杂度：O(N+M)  双指针 指针 i , j 分别指向 version1 和 version2 , 每次分别从两个版本号中获取一个有效数字进行比较：\n i 指向的数字大，返回 1； j 指向的数字大，返回 -1； 两个数字相同，继续向后遍历。  遍历结束，仍未比较得出大小，说明两个版本号相同，返回 0\nfunc compareVersion(version1 string, version2 string) int { num1, num2 := 0, 0 for i, j := 0, 0; i \u0026lt; len(version1) || j \u0026lt; len(version2); { for ; i \u0026lt; len(version1) \u0026amp;\u0026amp; version1[i] != \u0026#39;.\u0026#39;; i++ { num1 = num1*10 + int(version1[i]-\u0026#39;0\u0026#39;) } for ; j \u0026lt; len(version2) \u0026amp;\u0026amp; version2[j] != \u0026#39;.\u0026#39;; j++ { num2 = num2*10 + int(version2[j]-\u0026#39;0\u0026#39;) } fmt.Println(num1, num2, i, j) if num1 \u0026gt; num2 { return 1 } else if num1 \u0026lt; num2 { return -1 } else { i++ j++ num1, num2 = 0, 0 } } return 0 }  复杂度  时间复杂度：O(N+M) 空间复杂度：O(1)  ","date":"2021-04-20T20:33:19+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-165.-%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/","title":"Leetcode 165. 比较版本号"},{"content":" 链接： https://leetcode-cn.com/problems/implement-strstr/\n难度： 简单\n题目描述 实现 strStr() 函数。\n给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 -1 。\n说明： 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\n对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr() 以及 Java 的 indexOf() 定义相符。\n示例1：  输入：haystack = \u0026ldquo;hello\u0026rdquo;, needle = \u0026ldquo;ll\u0026rdquo;\n输出：2\n 示例2：  输入：haystack = \u0026ldquo;aaaaa\u0026rdquo;, needle = \u0026ldquo;bba\u0026rdquo;\n输出：-1\n 示例3：  输入：haystack = \u0026ldquo;\u0026rdquo;, needle = \u0026ldquo;\u0026rdquo;\n输出：0\n 提示：  0 \u0026lt;= haystack.length, needle.length \u0026lt;= 5 * 104 haystack 和 needle 仅由小写英文字符组成  解题思路 暴力匹配 从 haystack 的每个字符开始，依次向后和 needle 中的字符逐个匹配：\n 匹配成功，继续向后匹配； 匹配失败，从 haystack 的下个字符重新进行匹配； 匹配到 needle 结束，说明完成了查找，返回 haystack 初始匹配的下标。  遍历结束，都未完成匹配，表示无法找到，返回 -1\nfunc strStr(haystack string, needle string) int { maxIdx := len(haystack) - len(needle) + 1 for i := 0; i \u0026lt; maxIdx; i++ { j := 0 for ; j \u0026lt; len(needle); j++ { if haystack[i+j] != needle[j] { break } } if j == len(needle) { return i } } return -1 }  复杂度  时间复杂度：O(N*M) 空间复杂度：O(1)  KMP算法 func strStr(haystack string, needle string) int { if len(needle) == 0 { return 0 } // 求解next数组 \tnext := make([]int, len(needle)) next[0] = -1 i, j := -1, 0 for j+1 \u0026lt; len(needle) { if i == -1 || needle[i] == needle[j] { i++ j++ if needle[i] == needle[j] { next[j] = next[i] } else { next[j] = i } } else { i = next[i] } } // 匹配 \ti, j = 0, 0 for i \u0026lt; len(haystack) \u0026amp;\u0026amp; j \u0026lt; len(needle) { if j == -1 || haystack[i] == needle[j] { i++ j++ } else { j = next[j] } } if j == len(needle) { return i - j } return -1 }  复杂度  时间复杂度：O(N+M) 空间复杂度：O(1)  ","date":"2021-04-20T17:21:05+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-28.-%E5%AE%9E%E7%8E%B0-strstr/","title":"Leetcode 28. 实现 strStr()"},{"content":" 链接： https://leetcode-cn.com/problems/remove-element/\n难度： 简单\n题目描述 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n说明： 为什么返回数值是整数，但输出的答案是数组呢?\n请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n你可以想象内部操作如下:\n// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝 int len = removeDuplicates(nums); // 在函数里修改输入数组对于调用者是可见的。 // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。 for (int i = 0; i \u0026lt; len; i++) { print(nums[i]); } 示例1：  输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n 示例2：  输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n 提示：  0 \u0026lt;= nums.length \u0026lt;= 100 0 \u0026lt;= nums[i] \u0026lt;= 50 0 \u0026lt;= val \u0026lt;= 100  解题思路 双指针 用两个指针分别指向 待返回的结果数组 和 待遍历的原数组 第一个指针 i 表示当前已删除 val 的结果数组的下一个可赋值的位置，也即结果数组的长度；第二个指针 j 表示当前遍历到的元素下标。\n 当 nums[i] == val 时，继续向后遍历； 当 nums[j] != val 时，表示该数毋需删除，将其加入到结果数组，遍历下一个元素。  遍历结束，返回数组长度 i\nfunc removeElement(nums []int, val int) int { i := 0 for j := 0; j \u0026lt; len(nums); j++ { if nums[j] != val { nums[i] = nums[j] i++ } } return i }  复杂度  时间复杂度：O(N) 空间复杂度：O(1)  ","date":"2021-04-19T10:34:28+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-27.-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/","title":"Leetcode 27. 移除元素"},{"content":" 链接： https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\n难度： 简单\n题目描述 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。\n不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。\n说明： 为什么返回数值是整数，但输出的答案是数组呢?\n请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n你可以想象内部操作如下:\n// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝 int len = removeDuplicates(nums); // 在函数里修改输入数组对于调用者是可见的。 // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。 for (int i = 0; i \u0026lt; len; i++) { print(nums[i]); } 示例1：  输入：nums = [1,1,2]\n输出：2, nums = [1,2]\n解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。\n 示例2：  输入：nums = [0,0,1,1,1,2,2,3,3,4]\n输出：5, nums = [0,1,2,3,4]\n解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。\n 提示：  0 \u0026lt;= nums.length \u0026lt;= 3 * 104 -104 \u0026lt;= nums[i] \u0026lt;= 104 nums 已按升序排列  解题思路 双指针 由于整个数组已经过排序，排在某个数之前的数不会在其后重复出现，所以可以简单的用双指针实现。\n第一个指针 i 表示当前不重复的数组最后一个数的下标，第二个指针 j 表示当前遍历到的元素下标。\n 当 nums[i] == nums[j] 时，表示该数已加入结果中，继续向后遍历； 当 nums[i] != nums[j] 时，表示该数是一个新的不重复数，将其填入 nums[i+1] 中，i指针向后移动一位。  遍历结束，返回数组长度 i+1\nfunc removeDuplicates(nums []int) int { i := 0 for j := 1; j \u0026lt; len(nums); j++ { if nums[i] != nums[j] { i++ nums[i] = nums[j] } } return i + 1 }  复杂度  时间复杂度：O(N) 空间复杂度：O(1)  ","date":"2021-04-18T10:52:18+08:00","permalink":"https://xianlianghe0123.github.io/p/leetcode-26.-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/","title":"Leetcode 26. 删除有序数组中的重复项"}]