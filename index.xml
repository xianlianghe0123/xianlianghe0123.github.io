<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>贺贤良</title>
        <link>https://xianlianghe0123.github.io/</link>
        <description>Recent content on 贺贤良</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>cn-zh</language>
        <lastBuildDate>Fri, 23 Jul 2021 10:32:17 +0800</lastBuildDate><atom:link href="https://xianlianghe0123.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Leetcode 1893. 检查是否区域内所有整数都被覆盖</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1893.-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%8C%BA%E5%9F%9F%E5%86%85%E6%89%80%E6%9C%89%E6%95%B4%E6%95%B0%E9%83%BD%E8%A2%AB%E8%A6%86%E7%9B%96/</link>
        <pubDate>Fri, 23 Jul 2021 10:32:17 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1893.-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%8C%BA%E5%9F%9F%E5%86%85%E6%89%80%E6%9C%89%E6%95%B4%E6%95%B0%E9%83%BD%E8%A2%AB%E8%A6%86%E7%9B%96/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/check-if-all-the-integers-in-a-range-are-covered/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h3 id=&#34;题目描述&#34;&gt;题目描述&lt;/h3&gt;

&lt;p&gt;给你一个二维整数数组 &lt;code&gt;ranges&lt;/code&gt; 和两个整数 &lt;code&gt;left&lt;/code&gt; 和 &lt;code&gt;right&lt;/code&gt; 。每个 &lt;code&gt;ranges[i] = [start&lt;sub&gt;i&lt;/sub&gt;, end&lt;sub&gt;i&lt;/sub&gt;]&lt;/code&gt; 表示一个从 &lt;code&gt;start&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 到 &lt;code&gt;end&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 的 &lt;strong&gt;闭区间&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;如果闭区间 &lt;code&gt;[left, right]&lt;/code&gt; 内每个整数都被 &lt;code&gt;ranges&lt;/code&gt; 中 &lt;strong&gt;至少一个&lt;/strong&gt; 区间覆盖，那么请你返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;已知区间 &lt;code&gt;ranges[i] = [start&lt;sub&gt;i&lt;/sub&gt;, end&lt;sub&gt;i&lt;/sub&gt;]&lt;/code&gt; ，如果整数 &lt;code&gt;x&lt;/code&gt; 满足 &lt;code&gt;start&lt;sub&gt;i&lt;/sub&gt; &amp;lt;= x &amp;lt;= end&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; ，那么我们称整数 &lt;code&gt;x&lt;/code&gt; 被覆盖了。&lt;/p&gt;

&lt;h4 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;2 到 5 的每个整数都被覆盖了：&lt;br /&gt;
- 2 被第一个区间覆盖。&lt;br /&gt;
- 3 和 4 被第二个区间覆盖。&lt;br /&gt;
- 5 被第三个区间覆盖&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;ranges = [[1,10],[10,20]], left = 21, right = 21&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;21 没有被任何一个区间覆盖。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;提示&#34;&gt;提示：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= ranges.length &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= start&lt;sub&gt;i&lt;/sub&gt; &amp;lt;= end&lt;sub&gt;i&lt;/sub&gt; &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= left &amp;lt;= right &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;暴力求解&#34;&gt;暴力求解&lt;/h4&gt;

&lt;p&gt;对于区间内的每个数字，遍历 &lt;code&gt;range&lt;/code&gt;，判断其是否被覆盖，不被覆盖返回 &lt;code&gt;false&lt;/code&gt;，被覆盖继续执行下一轮循环。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isCovered&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ranges&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
&lt;span style=&#34;color:#a6e22e&#34;&gt;Outer&lt;/span&gt;:
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ranges&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Outer&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NM), N = len(ranges), M = right-left+1 $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;哈希&#34;&gt;哈希&lt;/h4&gt;

&lt;p&gt;直接记录被覆盖的数，然后遍历 &lt;code&gt;[left, right]&lt;/code&gt; ，判断该区间内的数是否全部被覆盖。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isCovered&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ranges&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;isCover&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ranges&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;isCover&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;isCover&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NS+M), N = len(ranges), S = scope, M = right-left+1 $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(S) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 138. 复制带随机指针的链表</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-138.-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</link>
        <pubDate>Thu, 22 Jul 2021 11:22:49 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-138.-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/copy-list-with-random-pointer/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/copy-list-with-random-pointer/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h3 id=&#34;题目描述&#34;&gt;题目描述&lt;/h3&gt;

&lt;p&gt;给你一个长度为 &lt;code&gt;n&lt;/code&gt; 的链表，每个节点包含一个额外增加的随机指针 &lt;code&gt;random&lt;/code&gt; ，该指针可以指向链表中的任何节点或空节点。&lt;/p&gt;

&lt;p&gt;构造这个链表的 &lt;strong&gt;深拷贝&lt;/strong&gt;。 深拷贝应该正好由 &lt;code&gt;n&lt;/code&gt; 个 &lt;strong&gt;全新&lt;/strong&gt; 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 &lt;code&gt;next&lt;/code&gt; 指针和 &lt;code&gt;random&lt;/code&gt; 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。&lt;strong&gt;复制链表中的指针都不应指向原链表中的节点&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;例如，如果原链表中有 &lt;code&gt;X&lt;/code&gt; 和 &lt;code&gt;Y&lt;/code&gt; 两个节点，其中 &lt;code&gt;X.random --&amp;gt; Y&lt;/code&gt; 。那么在复制链表中对应的两个节点 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; ，同样有 &lt;code&gt;x.random --&amp;gt; y&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;返回复制链表的头节点。&lt;/p&gt;

&lt;p&gt;用一个由 &lt;code&gt;n&lt;/code&gt; 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 &lt;code&gt;[val, random_index]&lt;/code&gt; 表示：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;val&lt;/code&gt;：一个表示 &lt;code&gt;Node.val&lt;/code&gt; 的整数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random_index&lt;/code&gt;：随机指针指向的节点索引（范围从 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;n-1&lt;/code&gt;）；如果不指向任何节点，则为 &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你的代码 &lt;strong&gt;只&lt;/strong&gt; 接受原链表的头节点 &lt;code&gt;head&lt;/code&gt; 作为传入参数。&lt;/p&gt;

&lt;h4 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/e1.png&#34; width=&#34;680px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;head = [[7,null],[13,0],[11,4],[10,2],[1,0]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[[7,null],[13,0],[11,4],[10,2],[1,0]]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/e2.png&#34; width=&#34;680px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;head = [[1,1],[2,1]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[[1,1],[2,1]]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/e3.png&#34; width=&#34;680px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;head = [[3,null],[3,0],[3,null]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[[3,null],[3,0],[3,null]]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;示例-4&#34;&gt;示例 4:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;head = []&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;给定的链表为空（空指针），因此返回 null&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;提示&#34;&gt;提示：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= n &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10000 &amp;lt;= Node.val &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.random&lt;/code&gt; 为空（&lt;code&gt;null&lt;/code&gt;）或指向链表中的节点。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希&#34;&gt;哈希&lt;/h4&gt;

&lt;p&gt;使用哈希表维护一个旧结点到新结点的映射，依次从前向后遍历链表，并逐一的构造新结点。&lt;/p&gt;

&lt;p&gt;构造每个新结点时，需要额外维护 &lt;code&gt;random&lt;/code&gt; 指针，可以在构造后即进行维护。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每遍历到一个新结点时，可能已经在维护之前的 &lt;code&gt;random&lt;/code&gt; 指针时已构造，故需要先从哈希表中查找，查找到即使用新结点，没查找到构造新结点。&lt;/li&gt;
&lt;li&gt;维护 &lt;code&gt;random&lt;/code&gt; 指针时，结点可能已经在遍历时构造，也需要优先查找。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;经过一次遍历，即可完成原链表的深拷贝。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;copyRandomList&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mapping&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newHead&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newHead&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// 优先查找，可能已被random构造
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapping&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;,
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;:   &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;mapping&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;// random 指针更新
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;randomNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapping&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt;]
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;randomNode&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;,
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;:   &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
				}
				&lt;span style=&#34;color:#a6e22e&#34;&gt;mapping&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;randomNode&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;randomNode&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newHead&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N), N = len(list) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(N) $&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;分裂&#34;&gt;分裂&lt;/h4&gt;

&lt;p&gt;在原来链表的基础上，将每个结点裂变出一个新结点，形成如 &lt;code&gt;A-&amp;gt;A&#39;-&amp;gt;B-&amp;gt;B&#39;-&amp;gt;……&lt;/code&gt; 的结构，修正每个新结点的 &lt;code&gt;random&lt;/code&gt; 指针为原结点的下一个结点，然后将原链表拆分，即得到结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;copyRandomList&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 裂变 结点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt;,
		}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 修正 random
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Random&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 拆分链表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;newHead&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newHead&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newHead&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N), N = len(list) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>剑指 Offer 52. 两个链表的第一个公共节点</title>
        <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-52.-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</link>
        <pubDate>Wed, 21 Jul 2021 10:43:36 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-52.-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h3 id=&#34;题目描述&#34;&gt;题目描述&lt;/h3&gt;

&lt;p&gt;输入两个链表，找出它们的第一个公共节点。&lt;/p&gt;

&lt;p&gt;如下面的两个链表：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/160_statement.png&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;

&lt;p&gt;在节点 c1 开始相交。&lt;/p&gt;

&lt;h4 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/160_example_1.png&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;Reference of the node with value = 8&lt;br /&gt;
&lt;strong&gt;输入解释：&lt;/strong&gt;相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/160_example_2.png&#34; width=&#34;350px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;Reference of the node with value = 2&lt;br /&gt;
&lt;strong&gt;输入解释：&lt;/strong&gt;相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/160_example_3.png&#34; width=&#34;200px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;null&lt;br /&gt;
&lt;strong&gt;输入解释：&lt;/strong&gt;从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;这两个链表不相交，因此返回 null。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;注意&#34;&gt;注意：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;如果两个链表没有交点，返回 &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;在返回结果后，两个链表仍须保持原有的结构。&lt;/li&gt;
&lt;li&gt;可假定整个链表结构中没有循环。&lt;/li&gt;
&lt;li&gt;程序尽量满足 $O(n)$ 时间复杂度，且仅用 $O(1)$ 内存。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希&#34;&gt;哈希&lt;/h4&gt;

&lt;p&gt;遍历链表 &lt;code&gt;List1&lt;/code&gt;，记录其所有的结点，然后遍历链表 &lt;code&gt;List2&lt;/code&gt; ，查找在第一个链表中首次出现的结点并返回，查找不到返回空。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getIntersectionNode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ;&lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ;&lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;;&lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N+M), N = len(List1), M = len(List2) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(N)$&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;双指针&#34;&gt;双指针&lt;/h4&gt;

&lt;p&gt;两个链表从第一个公共结点开始，后续的结点都是相同的，可以将两个链表的尾部对齐，将长的链表截断，然后依次两两结点比较即可。&lt;/p&gt;

&lt;p&gt;为确认截断位置，需要遍历一遍两个链表。不妨假设长的链表为 &lt;code&gt;List1&lt;/code&gt;， 短的为 &lt;code&gt;List2&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用两个指针 &lt;code&gt;node1&lt;/code&gt;、&lt;code&gt;node2&lt;/code&gt; 分别同时对 &lt;code&gt;List1&lt;/code&gt; 和 &lt;code&gt;List2&lt;/code&gt; 进行遍历。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List2&lt;/code&gt; 首先被遍历完，此时 &lt;code&gt;List1&lt;/code&gt; 剩余未遍历完的结点数量即为 &lt;code&gt;List1&lt;/code&gt; 需要截断的数量。此时，直接将 &lt;code&gt;node2&lt;/code&gt; 指向 &lt;code&gt;List1&lt;/code&gt; 头结点。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;node1&lt;/code&gt; 遍历到尾部时候，&lt;code&gt;node2&lt;/code&gt;恰到达截断位置，故将 &lt;code&gt;node1&lt;/code&gt; 指向 &lt;code&gt;List2&lt;/code&gt; 头结点`，即完成对齐，继续向后遍历查找相同结点。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;node1 == node2&lt;/code&gt; 时，查找结束，或者找到了公共结点，或者没找到&lt;code&gt;node1&lt;/code&gt;、&lt;code&gt;node2&lt;/code&gt;均为空，返回 &lt;code&gt;node1&lt;/code&gt; 即可&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当两个链表等长时候，相当于已经完成了对齐，跳过了第一阶段，直接遍历即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getIntersectionNode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;node2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt;;; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node2&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node1&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;node1&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;node1&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;node2&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;node2&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N+M), N = len(List1), M = len(List2) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1877. 数组中最大数对和的最小值</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1877.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AF%B9%E5%92%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</link>
        <pubDate>Tue, 20 Jul 2021 09:55:22 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1877.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AF%B9%E5%92%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/minimize-maximum-pair-sum-in-array/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/minimize-maximum-pair-sum-in-array/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h3 id=&#34;题目描述&#34;&gt;题目描述&lt;/h3&gt;

&lt;p&gt;一个数对 &lt;code&gt;(a,b)&lt;/code&gt; 的 &lt;strong&gt;数对和&lt;/strong&gt; 等于 &lt;code&gt;a + b&lt;/code&gt; 。&lt;strong&gt;最大数对和&lt;/strong&gt; 是一个数对数组中最大的 &lt;strong&gt;数对和&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;比方说，如果我们有数对 &lt;code&gt;(1,5)&lt;/code&gt; ，&lt;code&gt;(2,3)&lt;/code&gt; 和 &lt;code&gt;(4,4)&lt;/code&gt;，&lt;strong&gt;最大数对和&lt;/strong&gt; 为 &lt;code&gt;max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8&lt;/code&gt; 。
给你一个长度为 偶数 &lt;code&gt;n&lt;/code&gt; 的数组 &lt;code&gt;nums&lt;/code&gt; ，请你将 &lt;code&gt;nums&lt;/code&gt; 中的元素分成 &lt;code&gt;n / 2&lt;/code&gt; 个数对，使得：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 中每个元素 &lt;strong&gt;恰好&lt;/strong&gt; 在 &lt;strong&gt;一个&lt;/strong&gt; 数对中，且&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最大数对和&lt;/strong&gt; 的值 &lt;strong&gt;最小&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;请你在最优数对划分的方案下，返回最小的 &lt;strong&gt;最大数对和&lt;/strong&gt; 。&lt;/p&gt;

&lt;h4 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [3,5,2,3]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;7&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;数组中的元素可以分为数对 (3,3) 和 (5,2) 。&lt;br /&gt;
最大数对和为 max(3+3, 5+2) = max(6, 7) = 7 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [3,5,4,2,4,6]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;8&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;数组中的元素可以分为数对 (3,5)，(4,4) 和 (6,2) 。&lt;br /&gt;
最大数对和为 max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;提示&#34;&gt;提示：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == nums.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= n &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 是偶数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums[i] &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;排序&#34;&gt;排序&lt;/h4&gt;

&lt;p&gt;为使得 &lt;strong&gt;最大数对和&lt;/strong&gt; 最小，应让最大值和最小值成对，次大值和次小值成对……，以此类推。&lt;/p&gt;

&lt;p&gt;经过一次排序，可以快速地找出每一组数对，并记录最大数对和。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minPairSum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ints&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NlogN), N = len(nums) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(logN) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1838. 最高频元素的频数</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1838.-%E6%9C%80%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0%E7%9A%84%E9%A2%91%E6%95%B0/</link>
        <pubDate>Mon, 19 Jul 2021 10:31:28 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1838.-%E6%9C%80%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0%E7%9A%84%E9%A2%91%E6%95%B0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h3 id=&#34;题目描述&#34;&gt;题目描述&lt;/h3&gt;

&lt;p&gt;元素的 &lt;strong&gt;频数&lt;/strong&gt; 是该元素在一个数组中出现的次数。&lt;/p&gt;

&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; 和一个整数 &lt;code&gt;k&lt;/code&gt; 。在一步操作中，你可以选择 &lt;code&gt;nums&lt;/code&gt; 的一个下标，并将该下标对应元素的值增加 &lt;code&gt;1&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;执行最多 &lt;code&gt;k&lt;/code&gt; 次操作后，返回数组中最高频元素的 &lt;strong&gt;最大可能频数&lt;/strong&gt; 。&lt;/p&gt;

&lt;h4 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [1,2,4], k = 5&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;对第一个元素执行 3 次递增操作，对第二个元素执 2 次递增操作，此时 nums = [4,4,4] 。&lt;br /&gt;
4 是数组中最高频元素，频数是 3 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [1,4,8,13], k = 5&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;存在多种最优解决方案：&lt;br /&gt;
- 对第一个元素执行 3 次递增操作，此时 nums = [4,4,8,13] 。4 是数组中最高频元素，频数是 2 。&lt;br /&gt;
- 对第二个元素执行 4 次递增操作，此时 nums = [1,8,8,13] 。8 是数组中最高频元素，频数是 2 。&lt;br /&gt;
- 对第三个元素执行 5 次递增操作，此时 nums = [1,4,13,13] 。13 是数组中最高频元素，频数是 2 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [3,9,6], k = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;提示&#34;&gt;提示：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums[i] &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;排序-滑动窗口&#34;&gt;排序 &amp;amp; 滑动窗口&lt;/h4&gt;

&lt;p&gt;假设经过变换后 &lt;code&gt;x&lt;/code&gt; 的频数最多，则对于原数组来说，每次优先让小于 &lt;code&gt;x&lt;/code&gt; 且最接近 &lt;code&gt;x&lt;/code&gt; 的数字变换为 &lt;code&gt;x&lt;/code&gt;，消耗的 &lt;code&gt;k&lt;/code&gt; 最小， 可以使得 &lt;code&gt;x&lt;/code&gt; 的频数最大。&lt;/p&gt;

&lt;p&gt;为快速确定数字与 &lt;code&gt;x&lt;/code&gt; 的接近程度，可以对数组进行一次排序。&lt;/p&gt;

&lt;p&gt;后续需要的是确定这个 &lt;code&gt;x&lt;/code&gt;：对于每个元素 &lt;code&gt;num&lt;/code&gt;，将能变换的全变换为 &lt;code&gt;num&lt;/code&gt; 后，统计频数。按照上述思路，完成变换后的数字在数组中是连续的，故可以使用滑动窗口降低时间复杂度。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;[l, r)&lt;/code&gt; 记录滑动窗口的左右边界，每次判断右边界直到到达数组尾：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每次变换为 &lt;code&gt;nums[r]&lt;/code&gt; 时，需要将滑动数组内的数字全部变换为 &lt;code&gt;nums[r]&lt;/code&gt;，需要的变换次数为 &lt;code&gt;need = (nums[r] - nums[r-1]) * (r - l)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;need&lt;/code&gt; 大于等于剩余次数时，右边界 &lt;code&gt;r&lt;/code&gt; 向右扩展，剩余次数减去 &lt;code&gt;need&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;need&lt;/code&gt; 小于剩余次数时，左边界 &lt;code&gt;l&lt;/code&gt; 向右收缩，剩余次数加上 &lt;code&gt;nums[r-1] - nums[l]&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;右边界 &lt;code&gt;r&lt;/code&gt; 到达数组结尾时，滑动窗口完成滑动，其中滑动窗口的最大长度 &lt;code&gt;r - l&lt;/code&gt; 即为数组中最高频元素的 &lt;strong&gt;最大可能频数&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxFrequency&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ints&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;); {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;need&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;)
		&lt;span style=&#34;color:#75715e&#34;&gt;// 扩展
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;need&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;need&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 收缩
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;]
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NlogN), N = len(nums) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(logN) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>面试题 10.02. 变位词组</title>
        <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-10.02.-%E5%8F%98%E4%BD%8D%E8%AF%8D%E7%BB%84/</link>
        <pubDate>Sun, 18 Jul 2021 11:32:11 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-10.02.-%E5%8F%98%E4%BD%8D%E8%AF%8D%E7%BB%84/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/group-anagrams-lcci/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/group-anagrams-lcci/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;编写一种方法，对字符串数组进行排序，将所有变位词组合在一起。变位词是指字母相同，但排列不同的字符串。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;本题相对原题稍作修改&lt;/p&gt;

&lt;h5 id=&#34;示例&#34;&gt;示例：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; [&amp;ldquo;eat&amp;rdquo;, &amp;ldquo;tea&amp;rdquo;, &amp;ldquo;tan&amp;rdquo;, &amp;ldquo;ate&amp;rdquo;, &amp;ldquo;nat&amp;rdquo;, &amp;ldquo;bat&amp;rdquo;],&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt;&lt;br /&gt;
[&lt;br /&gt;
  [&amp;ldquo;ate&amp;rdquo;,&amp;ldquo;eat&amp;rdquo;,&amp;ldquo;tea&amp;rdquo;],&lt;br /&gt;
  [&amp;ldquo;nat&amp;rdquo;,&amp;ldquo;tan&amp;rdquo;],&lt;br /&gt;
  [&amp;ldquo;bat&amp;rdquo;]&lt;br /&gt;
]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希-计数&#34;&gt;哈希 &amp;amp; 计数&lt;/h4&gt;

&lt;p&gt;对于每个字符串，使用数组统计每个字母出现的数字，两个同位词得出的统计数组必然相同，故用该数组作为 &lt;code&gt;key&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;groupAnagrams&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strs&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;][]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strs&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([][]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NL), N = len(strs), L = max(len(str)) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(NL) $&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;哈希-排序&#34;&gt;哈希 &amp;amp; 排序&lt;/h4&gt;

&lt;p&gt;不同变位词中字母相同，所以将字符串按照字母排序后，其值也一定相同。故可以将其排序后的值作为哈希表的 &lt;code&gt;key&lt;/code&gt;，并将其添加进 &lt;code&gt;value&lt;/code&gt; 数组中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;groupAnagrams&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strs&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;][]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strs&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Slice&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
		})
		&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;[string(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;[string(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)], &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([][]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NLlogL), N = len(strs), L = max(len(str)) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(NL) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>剑指 Offer 42. 连续子数组的最大和</title>
        <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-42.-%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</link>
        <pubDate>Sat, 17 Jul 2021 13:21:52 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-42.-%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。&lt;/p&gt;

&lt;p&gt;要求时间复杂度为$O(n)$。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; nums = [-2,1,-3,4,-1,2,1,-5,4]&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; 6&lt;br /&gt;
&lt;strong&gt;解释:&lt;/strong&gt; 连续子数组 [4,-1,2,1] 的和最大，为 6。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= arr[i] &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;用 &lt;code&gt;dp[i]&lt;/code&gt; 记录以 &lt;code&gt;i&lt;/code&gt; 为结尾的连续子数组和的最大值，容易得到状态转移方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[0] = nums[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dp[i] = max(dp[i-1]+nums[i], nums[i])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于每次转移仅涉及到前一个结果，使用变量代替数组降低空间复杂度&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubArray&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pre&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pre&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pre&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;pre&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		}
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;
        }
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N), N = len(nums) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>剑指 Offer 53 - I. 在排序数组中查找数字 I</title>
        <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-53-i.-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97-i/</link>
        <pubDate>Fri, 16 Jul 2021 14:55:24 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-53-i.-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97-i/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;统计一个数字在排序数组中出现的次数。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; nums = [5,7,7,8,8,10], target = 8&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; nums = [5,7,7,8,8,10], target = 6&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; 0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= 数组长度 &amp;lt;= 50000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;顺序查找&#34;&gt;顺序查找&lt;/h4&gt;

&lt;p&gt;顺序遍历，统计数量 &lt;code&gt;target&lt;/code&gt;。由于数组有序，当当前元素大于 &lt;code&gt;target&lt;/code&gt;时，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
		}

	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N), N = len(nums) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;二分查找&#34;&gt;二分查找&lt;/h4&gt;

&lt;p&gt;二分查找，找到首个等于 &lt;code&gt;target&lt;/code&gt; 的元素位置，依次向后遍历到元素不等于 &lt;code&gt;target&lt;/code&gt; 为止，记录出现的次数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(logN), N = len(nums) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1846. 减小和重新排列数组后的最大元素</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1846.-%E5%87%8F%E5%B0%8F%E5%92%8C%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</link>
        <pubDate>Thu, 15 Jul 2021 10:33:47 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1846.-%E5%87%8F%E5%B0%8F%E5%92%8C%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个正整数数组 &lt;code&gt;arr&lt;/code&gt; 。请你对 &lt;code&gt;arr&lt;/code&gt; 执行一些操作（也可以不进行任何操作），使得数组满足以下条件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arr&lt;/code&gt; 中 &lt;strong&gt;第一个&lt;/strong&gt; 元素必须为 &lt;code&gt;1&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;任意相邻两个元素的差的绝对值 &lt;strong&gt;小于等于&lt;/strong&gt; &lt;code&gt;1&lt;/code&gt; ，也就是说，对于任意的 &lt;code&gt;1 &amp;lt;= i &amp;lt; arr.length&lt;/code&gt; （&lt;strong&gt;数组下标从 0 开始&lt;/strong&gt;），都满足 &lt;code&gt;abs(arr[i] - arr[i - 1]) &amp;lt;= 1&lt;/code&gt; 。&lt;code&gt;abs(x)&lt;/code&gt; 为 &lt;code&gt;x&lt;/code&gt; 的绝对值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以执行以下 2 种操作任意次：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;减小&lt;/strong&gt; &lt;code&gt;arr&lt;/code&gt; 中任意元素的值，使其变为一个 &lt;strong&gt;更小的正整数&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重新排列&lt;/strong&gt; &lt;code&gt;arr&lt;/code&gt; 中的元素，你可以以任意顺序重新排列。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;请你返回执行以上操作后，在满足前文所述的条件下，&lt;code&gt;arr&lt;/code&gt; 中可能的 &lt;strong&gt;最大值&lt;/strong&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [2,2,1,2,1]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
我们可以重新排列 arr 得到 [1,2,2,2,1] ，该数组满足所有条件。&lt;br /&gt;
arr 中最大元素为 2 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [100,1,1000]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
一个可行的方案如下：&lt;br /&gt;
1. 重新排列 arr 得到 [1,100,1000] 。&lt;br /&gt;
2. 将第二个元素减小为 2 。&lt;br /&gt;
3. 将第三个元素减小为 3 。&lt;br /&gt;
现在 arr = [1,2,3] ，满足所有条件。&lt;br /&gt;
arr 中最大元素为 3 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [1,2,3,4,5]
&lt;strong&gt;输出：&lt;/strong&gt;5
&lt;strong&gt;解释：&lt;/strong&gt;数组已经满足所有条件，最大元素为 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr[i] &amp;lt;= 10&lt;sup&gt;9&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;排序&#34;&gt;排序&lt;/h4&gt;

&lt;p&gt;先将数组排序，并令&lt;code&gt;arr[0] = 1&lt;/code&gt;，然后逐一地调整后续元素，其值为上个元素值加一。当遇到小于等于前一个值的元素时，从当前元素重新开始调整，直至遍历结束，返回尾部元素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maximumElementAfterDecrementingAndRearranging&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ints&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NlogN), N = len(arr) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(logN) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1818. 绝对差值和</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1818.-%E7%BB%9D%E5%AF%B9%E5%B7%AE%E5%80%BC%E5%92%8C/</link>
        <pubDate>Wed, 14 Jul 2021 10:34:23 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1818.-%E7%BB%9D%E5%AF%B9%E5%B7%AE%E5%80%BC%E5%92%8C/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/minimum-absolute-sum-difference/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/minimum-absolute-sum-difference/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你两个正整数数组 &lt;code&gt;nums1&lt;/code&gt; 和 &lt;code&gt;nums2&lt;/code&gt; ，数组的长度都是 n 。&lt;/p&gt;

&lt;p&gt;数组 &lt;code&gt;nums1&lt;/code&gt; 和 &lt;code&gt;nums2&lt;/code&gt; 的 &lt;strong&gt;绝对差值和&lt;/strong&gt; 定义为所有 &lt;code&gt;|nums1[i] - nums2[i]|（0 &amp;lt;= i &amp;lt; n）&lt;/code&gt;的 &lt;strong&gt;总和（下标从 0 开始）&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;你可以选用 &lt;code&gt;nums1&lt;/code&gt; 中的 &lt;strong&gt;任意一个&lt;/strong&gt; 元素来替换 &lt;code&gt;nums1&lt;/code&gt; 中的 &lt;strong&gt;至多&lt;/strong&gt; 一个元素，以 &lt;strong&gt;最小化&lt;/strong&gt; 绝对差值和。&lt;/p&gt;

&lt;p&gt;在替换数组 &lt;code&gt;nums1&lt;/code&gt; 中最多一个元素 &lt;strong&gt;之后&lt;/strong&gt; ，返回最小绝对差值和。因为答案可能很大，所以需要对 &lt;code&gt;10&lt;sup&gt;9&lt;/sup&gt; + 7&lt;/code&gt; &lt;strong&gt;取余&lt;/strong&gt; 后返回。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;|x|&lt;/code&gt; 定义为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;x &amp;gt;= 0&lt;/code&gt; ，值为 &lt;code&gt;x&lt;/code&gt; ，或者&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x &amp;lt;= 0&lt;/code&gt; ，值为 &lt;code&gt;-x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums1 = [1,7,5], nums2 = [2,3,5]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;有两种可能的最优方案：&lt;br /&gt;
- 将第二个元素替换为第一个元素：[1,7,5] =&amp;gt; [1,1,5] ，或者&lt;br /&gt;
- 将第二个元素替换为第三个元素：[1,7,5] =&amp;gt; [1,5,5]&lt;br /&gt;
两种方案的绝对差值和都是 |1-2| + (|1-3| 或者 |5-3|) + |5-5| = 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;nums1 和 nums2 相等，所以不用替换元素。绝对差值和为 0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;20&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;将第一个元素替换为第二个元素：[1,10,4,4,2,7] =&amp;gt; [10,10,4,4,2,7]&lt;br /&gt;
绝对差值和为 |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == nums1.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n == nums2.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums1[i], nums2[i] &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;排序-二分查找&#34;&gt;排序 &amp;amp; 二分查找&lt;/h4&gt;

&lt;p&gt;不妨设用 &lt;code&gt;nums1[j]&lt;/code&gt; 替换了 &lt;code&gt;nums1[i]&lt;/code&gt;，使得绝对差值和最小化。替换前之差为 &lt;code&gt;|nums1[i] - nums2[i]|&lt;/code&gt;，替换之后为 &lt;code&gt;|nums1[j] - nums2[i]|&lt;/code&gt;，则其替换后绝对差值和的缩小量即为 &lt;code&gt;|nums1[i] - nums2[i]| - |nums1[j] - nums2[i]|&lt;/code&gt;，要求该缩小量最大。&lt;/p&gt;

&lt;p&gt;通过上式观察得出：对于每个 &lt;code&gt;i&lt;/code&gt;，前一项 &lt;code&gt;|nums1[i] - nums2[i]|&lt;/code&gt; 确定不变，唯一的变量即在 &lt;code&gt;j&lt;/code&gt;，需要找出使得 &lt;code&gt;|nums1[j] - nums2[i]|&lt;/code&gt; 最小的 &lt;code&gt;j&lt;/code&gt;，也就是找出 &lt;code&gt;nums1&lt;/code&gt; 中与 &lt;code&gt;nums2[i]&lt;/code&gt; 最接近的值。&lt;/p&gt;

&lt;p&gt;对于每个 &lt;code&gt;i&lt;/code&gt;，通过二分查找的方法，找出最接近的 &lt;code&gt;j&lt;/code&gt;。一次遍历完成后，得到最大的缩小量的最大值 &lt;code&gt;max&lt;/code&gt;，用原始绝对差值和减去 &lt;code&gt;max&lt;/code&gt; 即得到 &lt;strong&gt;最小化&lt;/strong&gt; 绝对差值和。&lt;/p&gt;

&lt;p&gt;二分查找时，当不存在与 &lt;code&gt;nums2[i]&lt;/code&gt; 相等的值时，需要找寻最接近的值，此时查找终止条件为仅剩两个元素，因为最接近的值可能大于 &lt;code&gt;nums2[i]&lt;/code&gt;，也可能小于 &lt;code&gt;nums2[i]&lt;/code&gt;，需要对两个元素均进行判断。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minAbsoluteSumDiff&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1e9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 求绝对值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;diff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// nums1排序
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sortedNums1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;))
	copy(&lt;span style=&#34;color:#a6e22e&#34;&gt;sortedNums1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ints&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sortedNums1&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 绝对差只和
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 最小化缩小量最大值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;absDiff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;diff&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;])
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;absDiff&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 求和
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 二分查找确定最小化缩小量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;sortedNums1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// l, r 最接近nums2[i]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;diff&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sortedNums1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;])
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;diff&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sortedNums1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;])
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dl&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dr&lt;/span&gt; {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;absDiff&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dl&lt;/span&gt; {
						&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;absDiff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dl&lt;/span&gt;
					}
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;absDiff&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dr&lt;/span&gt; {
						&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;absDiff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dr&lt;/span&gt;
					}
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
			&lt;span style=&#34;color:#75715e&#34;&gt;// 与nums2相等，已找到
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedNums1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;absDiff&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;absDiff&lt;/span&gt;
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sortedNums1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NlogN),N=len(nums1) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(N) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 275. H 指数 II</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-275.-h-%E6%8C%87%E6%95%B0-ii/</link>
        <pubDate>Mon, 12 Jul 2021 10:50:26 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-275.-h-%E6%8C%87%E6%95%B0-ii/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/h-index-ii/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/h-index-ii/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定一位研究者论文被引用次数的数组（被引用次数是非负整数）,数组已经按照 &lt;strong&gt;升序排列&lt;/strong&gt;。编写一个方法，计算出研究者的 h 指数。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;grey&#34;&gt;h 指数的定义：&lt;/font&gt;h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）&lt;strong&gt;总共&lt;/strong&gt; 有 h 篇论文分别被引用了&lt;strong&gt;至少&lt;/strong&gt; h 次。且其余的 $N - h$ 篇论文每篇被引用次数 &lt;strong&gt;不超过&lt;/strong&gt; h 次。&lt;/p&gt;

&lt;p&gt;例如：某人的 h 指数是 20，这表示他已发表的论文中，每篇被引用了至少 20 次的论文总共有 20 篇。&lt;/p&gt;

&lt;h5 id=&#34;示例&#34;&gt;示例：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;citations = [0,1,3,5,6]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 0, 1, 3, 5, 6 次。&lt;br /&gt;
     由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 &lt;strong&gt;不多于&lt;/strong&gt; 3 次，所以她的 h 指数是 3。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;如果 h 有多种可能的值，h 指数是其中最大的那个。&lt;/p&gt;

&lt;h5 id=&#34;进阶&#34;&gt;进阶：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;这是 H 指数 的延伸题目，本题中的 citations 数组是保证有序的。&lt;/li&gt;
&lt;li&gt;你可以优化你的算法到对数时间复杂度吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;顺序查找&#34;&gt;顺序查找&lt;/h4&gt;

&lt;p&gt;解题思路同 &lt;strong&gt;Leetcode 274. H 指数&lt;/strong&gt;，由于已经排好序，只需要从后往前查找即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N), N=len(citations) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;二分查找&#34;&gt;二分查找&lt;/h4&gt;

&lt;p&gt;用 &lt;code&gt;[l, r]&lt;/code&gt; 作为二分查找的区间下标，每次用区间中位数 &lt;code&gt;citations[mid]&lt;/code&gt; 与到数组末尾的距离 &lt;code&gt;len(citations)-mid&lt;/code&gt; 相比:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;citations[mid] &amp;lt; len(citations)-l&lt;/code&gt; 时，不满足条件，需要继续到右侧查找，令 &lt;code&gt;l = mid+1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;citations[mid] ≥ len(citations)-l&lt;/code&gt; 时，&lt;code&gt;len(citations)-mid&lt;/code&gt; 是一个满足条件的 &lt;code&gt;h&lt;/code&gt;，但不确定是否为最大的 &lt;code&gt;h&lt;/code&gt;，需要保留并继续到右侧查找，令 &lt;code&gt;r = mid&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;遍历到 &lt;code&gt;l = r&lt;/code&gt; 时，仅剩一个元素 &lt;code&gt;citations[mid]&lt;/code&gt;，当其 &lt;code&gt;≥ len(citations)-l&lt;/code&gt;，&lt;code&gt;len(citations)-l&lt;/code&gt;即为最大 h，返回；否则，说明找不到符合条件的 &lt;code&gt;h&lt;/code&gt;,返回 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; ; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(logN), N=len(citations) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 274. H 指数</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-274.-h-%E6%8C%87%E6%95%B0/</link>
        <pubDate>Sun, 11 Jul 2021 12:04:41 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-274.-h-%E6%8C%87%E6%95%B0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/h-index/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/h-index/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;grey&#34;&gt;h 指数的定义：&lt;/font&gt;h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）&lt;strong&gt;总共&lt;/strong&gt; 有 h 篇论文分别被引用了&lt;strong&gt;至少&lt;/strong&gt; h 次。且其余的 $N - h$ 篇论文每篇被引用次数 &lt;strong&gt;不超过&lt;/strong&gt; h 次。&lt;/p&gt;

&lt;p&gt;例如：某人的 h 指数是 20，这表示他已发表的论文中，每篇被引用了至少 20 次的论文总共有 20 篇。&lt;/p&gt;

&lt;h5 id=&#34;示例&#34;&gt;示例：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;citations = [3,0,6,1,5]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。&lt;br /&gt;
     由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;如果 h 有多种可能的值，h 指数是其中最大的那个。&lt;/p&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;排序&#34;&gt;排序&lt;/h4&gt;

&lt;p&gt;按照每篇论文被引用次数从多到少排序，依次遍历直到首次找到第 &lt;code&gt;i&lt;/code&gt; 篇论文，其被引用次数 &lt;code&gt;&amp;lt; i&lt;/code&gt;，则说明其前面的论文被引用数均 &lt;code&gt;≥ i-1&lt;/code&gt;，且其前一篇恰好时第 &lt;code&gt;i-1&lt;/code&gt; 篇，返回 &lt;code&gt;i-1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当遍历完整个数组均为找到时，表明最后一篇被引用数仍 &lt;code&gt;≥ len(citations)&lt;/code&gt;，返回 &lt;code&gt;len(citations)&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hIndex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Reverse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IntSlice&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;)))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;citations&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NlogN), N=len(citations) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(logN) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 981. 基于时间的键值存储</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-981.-%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E9%94%AE%E5%80%BC%E5%AD%98%E5%82%A8/</link>
        <pubDate>Sat, 10 Jul 2021 11:47:18 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-981.-%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E9%94%AE%E5%80%BC%E5%AD%98%E5%82%A8/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/time-based-key-value-store/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/time-based-key-value-store/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;创建一个基于时间的键值存储类 &lt;code&gt;TimeMap&lt;/code&gt;，它支持下面两个操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;set(string key, string value, int timestamp)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;存储键 &lt;code&gt;key&lt;/code&gt;、值 &lt;code&gt;value&lt;/code&gt;，以及给定的时间戳 &lt;code&gt;timestamp&lt;/code&gt;。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;get(string key, int timestamp)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;返回先前调用 &lt;code&gt;set(key, value, timestamp_prev)&lt;/code&gt; 所存储的值，其中 &lt;code&gt;timestamp_prev &amp;lt;= timestamp&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果有多个这样的值，则返回对应最大的  &lt;code&gt;timestamp_prev&lt;/code&gt; 的那个值。&lt;/li&gt;
&lt;li&gt;如果没有值，则返回空字符串（&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;inputs = [&amp;ldquo;TimeMap&amp;rdquo;,&amp;ldquo;set&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;set&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;get&amp;rdquo;], inputs = [[],[&amp;ldquo;foo&amp;rdquo;,&amp;ldquo;bar&amp;rdquo;,1],[&amp;ldquo;foo&amp;rdquo;,1],[&amp;ldquo;foo&amp;rdquo;,3],[&amp;ldquo;foo&amp;rdquo;,&amp;ldquo;bar2&amp;rdquo;,4],[&amp;ldquo;foo&amp;rdquo;,4],[&amp;ldquo;foo&amp;rdquo;,5]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[null,null,&amp;ldquo;bar&amp;rdquo;,&amp;ldquo;bar&amp;rdquo;,null,&amp;ldquo;bar2&amp;rdquo;,&amp;ldquo;bar2&amp;rdquo;]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
TimeMap kv;&lt;br /&gt;
kv.set(&amp;ldquo;foo&amp;rdquo;, &amp;ldquo;bar&amp;rdquo;, 1); // 存储键 &amp;ldquo;foo&amp;rdquo; 和值 &amp;ldquo;bar&amp;rdquo; 以及时间戳 timestamp = 1&lt;br /&gt;
kv.get(&amp;ldquo;foo&amp;rdquo;, 1);  // 输出 &amp;ldquo;bar&amp;rdquo;&lt;br /&gt;
kv.get(&amp;ldquo;foo&amp;rdquo;, 3); // 输出 &amp;ldquo;bar&amp;rdquo; 因为在时间戳 3 和时间戳 2 处没有对应 &amp;ldquo;foo&amp;rdquo; 的值，所以唯一的值位于时间戳 1 处（即 &amp;gt; &amp;ldquo;bar&amp;rdquo;）&lt;br /&gt;
kv.set(&amp;ldquo;foo&amp;rdquo;, &amp;ldquo;bar2&amp;rdquo;, 4);&lt;br /&gt;
kv.get(&amp;ldquo;foo&amp;rdquo;, 4); // 输出 &amp;ldquo;bar2&amp;rdquo;&lt;br /&gt;
kv.get(&amp;ldquo;foo&amp;rdquo;, 5); // 输出 &amp;ldquo;bar2&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;inputs = [&amp;ldquo;TimeMap&amp;rdquo;,&amp;ldquo;set&amp;rdquo;,&amp;ldquo;set&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;get&amp;rdquo;,&amp;ldquo;get&amp;rdquo;], inputs = [[],[&amp;ldquo;love&amp;rdquo;,&amp;ldquo;high&amp;rdquo;,10],[&amp;ldquo;love&amp;rdquo;,&amp;ldquo;low&amp;rdquo;,20],[&amp;ldquo;love&amp;rdquo;,5],[&amp;ldquo;love&amp;rdquo;,10],[&amp;ldquo;love&amp;rdquo;,15],[&amp;ldquo;love&amp;rdquo;,20],[&amp;ldquo;love&amp;rdquo;,25]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[null,null,null,&amp;ldquo;&amp;rdquo;,&amp;ldquo;high&amp;rdquo;,&amp;ldquo;high&amp;rdquo;,&amp;ldquo;low&amp;rdquo;,&amp;ldquo;low&amp;rdquo;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;所有的键/值字符串都是小写的。&lt;/li&gt;
&lt;li&gt;所有的键/值字符串长度都在 &lt;code&gt;[1, 100]&lt;/code&gt; 范围内。&lt;/li&gt;
&lt;li&gt;所有 &lt;code&gt;TimeMap.set&lt;/code&gt; 操作中的时间戳 &lt;code&gt;timestamps&lt;/code&gt; 都是严格递增的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= timestamp &amp;lt;= 10&lt;sup&gt;7&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TimeMap.set&lt;/code&gt; 和 &lt;code&gt;TimeMap.get&lt;/code&gt; 函数在每个测试用例中将（组合）调用总计 &lt;code&gt;120000&lt;/code&gt; 次。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希-二分查找&#34;&gt;哈希+二分查找&lt;/h4&gt;

&lt;p&gt;利用哈希表作为存储。每个 &lt;code&gt;key&lt;/code&gt; 记录按照 &lt;code&gt;timestamp&lt;/code&gt; 顺序记录的数组，数组元素记录 &lt;code&gt;value&lt;/code&gt; 和 &lt;code&gt;timestamp&lt;/code&gt; 。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Set&lt;/code&gt; ，由于 &lt;code&gt;timestamp&lt;/code&gt; 严格递增，只需将 &lt;code&gt;value&lt;/code&gt; 和 &lt;code&gt;timestamp&lt;/code&gt; 添加到对应数组的尾部；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Get&lt;/code&gt; ，利用数组的有序性，使用二分查找，找到不大于 &lt;code&gt;timestamp&lt;/code&gt; 的首个值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeMap&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;][]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/** Initialize your data structure here. */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Constructor&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeMap&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeMap&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;: make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;][]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;),
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TimeMap&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt;,
	})
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TimeMap&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;]
	&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;timestamp&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Set&lt;/code&gt;：$ O(1) $&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Get&lt;/code&gt;：$ O(logN), N=len(keys) $&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(N) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>面试题 17.10. 主要元素</title>
        <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.10.-%E4%B8%BB%E8%A6%81%E5%85%83%E7%B4%A0/</link>
        <pubDate>Fri, 09 Jul 2021 10:46:07 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.10.-%E4%B8%BB%E8%A6%81%E5%85%83%E7%B4%A0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/find-majority-element-lcci/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/find-majority-element-lcci/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;数组中占比超过一半的元素称之为主要元素。给你一个 &lt;strong&gt;整数&lt;/strong&gt; 数组，找出其中的主要元素。若没有，返回 &lt;code&gt;-1&lt;/code&gt; 。请设计时间复杂度为 $O(N)$ 、空间复杂度为 $O(1)$ 的解决方案。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;[1,2,5,9,5,9,5,5,5]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;[3,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;-1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;[2,2,1,1,1,2,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希计数&#34;&gt;哈希计数&lt;/h4&gt;

&lt;p&gt;遍历数组，记录每个数出现的次数，直到某个数 &lt;code&gt;num&lt;/code&gt; 出现的次数大于数组长度的一半则返回 &lt;code&gt;num&lt;/code&gt;，否则返回 &lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;majorityElement&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;] &amp;gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(N) $&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;排序&#34;&gt;排序&lt;/h4&gt;

&lt;p&gt;将数组排序，依次统计连续相同数字的数量，直到满足条件为止。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;majorityElement&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ints&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &amp;gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NlogN) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;摩尔投票算法&#34;&gt;摩尔投票算法&lt;/h4&gt;

&lt;p&gt;这一算法应用的问题原型是在集合中寻找可能存在的多数元素，这一元素在输入的序列重复出现并占到了序列元素的一半以上。&lt;/p&gt;

&lt;p&gt;假设存在占到序列元素一半以上的众数，每次将两个不相同的两个数消除，直到最后剩下的数字即为该数。&lt;/p&gt;

&lt;p&gt;如果一个序列中没有占到多数的元素，那么第一次的结果就可能是无效的随机元素，所以在第一遍遍历之后应该再进行一个遍历以统计第一次算法遍历的结果出现次数，以确定其是否占到了序列元素的一半以上。&lt;/p&gt;

&lt;p&gt;算法步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用 &lt;code&gt;major&lt;/code&gt; 和 &lt;code&gt;cnt&lt;/code&gt; 记录主要元素和其数量，初始 &lt;code&gt;cnt&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;cnt&lt;/code&gt; 数量为 &lt;code&gt;0&lt;/code&gt; 时，将 &lt;code&gt;major&lt;/code&gt; 设置为当前元素；&lt;/li&gt;
&lt;li&gt;当当前元素 &lt;code&gt;num&lt;/code&gt; 和 &lt;code&gt;major&lt;/code&gt; 不同时，&lt;code&gt;cnt&lt;/code&gt; 减一；&lt;/li&gt;
&lt;li&gt;当当前元素 &lt;code&gt;num&lt;/code&gt; 和 &lt;code&gt;major&lt;/code&gt; 相同时，&lt;code&gt;cnt&lt;/code&gt; 加一；&lt;/li&gt;
&lt;li&gt;一次遍历后，&lt;code&gt;major&lt;/code&gt; 即为选出来的元素；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;二次遍历统计 &lt;code&gt;major&lt;/code&gt;，验证其是否占到了序列元素的一半以上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;majorityElement&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;major&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;major&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;major&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;major&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &amp;gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;major&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;复杂度-2&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(1) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 930. 和相同的二元子数组</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-930.-%E5%92%8C%E7%9B%B8%E5%90%8C%E7%9A%84%E4%BA%8C%E5%85%83%E5%AD%90%E6%95%B0%E7%BB%84/</link>
        <pubDate>Thu, 08 Jul 2021 15:11:00 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-930.-%E5%92%8C%E7%9B%B8%E5%90%8C%E7%9A%84%E4%BA%8C%E5%85%83%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/binary-subarrays-with-sum/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/binary-subarrays-with-sum/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个二元数组 &lt;code&gt;nums&lt;/code&gt; ，和一个整数 &lt;code&gt;goal&lt;/code&gt; ，请你统计并返回有多少个和为 &lt;code&gt;goal&lt;/code&gt; 的 &lt;strong&gt;非空&lt;/strong&gt; 子数组。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;子数组&lt;/strong&gt; 是数组的一段连续部分。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [1,0,1,0,1], goal = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;4&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
有 4 个满足题目要求的子数组：[1,0,1]、[1,0,1,0]、[0,1,0,1]、[1,0,1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [0,0,0,0,0], goal = 0&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;15&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums[i]&lt;/code&gt; 不是 &lt;code&gt;0&lt;/code&gt; 就是 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= goal &amp;lt;= nums.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希&#34;&gt;哈希&lt;/h4&gt;

&lt;p&gt;假设满足条件的子数组下标为 &lt;code&gt;[i, j)&lt;/code&gt; ，则以 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt; 为结尾的两个前缀数组的前缀和记作 &lt;code&gt;sum[i]&lt;/code&gt;、&lt;code&gt;sum[j]&lt;/code&gt; ，有 &lt;code&gt;goal = sum[j] - sum[i]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;将上式变换为：&lt;code&gt;sum[i] = sum[j] - goal&lt;/code&gt; ，故可以用哈希表记录前缀和出现的次数，当遍历到 &lt;code&gt;j&lt;/code&gt; 时，将 &lt;code&gt;sum[j]&lt;/code&gt; 出现的次数加入到结果中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numSubarraysWithSum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;goal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;goal&lt;/span&gt;]
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(N), N=len(nums) $&lt;/li&gt;
&lt;li&gt;空间复杂度：$ O(N) $&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1711. 大餐计数</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1711.-%E5%A4%A7%E9%A4%90%E8%AE%A1%E6%95%B0/</link>
        <pubDate>Wed, 07 Jul 2021 10:28:11 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1711.-%E5%A4%A7%E9%A4%90%E8%AE%A1%E6%95%B0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/count-good-meals/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/count-good-meals/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;大餐&lt;/strong&gt; 是指 &lt;strong&gt;恰好包含两道不同餐品&lt;/strong&gt; 的一餐，其美味程度之和等于 2 的幂。&lt;/p&gt;

&lt;p&gt;你可以搭配 &lt;strong&gt;任意&lt;/strong&gt; 两道餐品做一顿大餐。&lt;/p&gt;

&lt;p&gt;给你一个整数数组 &lt;code&gt;deliciousness&lt;/code&gt; ，其中 &lt;code&gt;deliciousness[i]&lt;/code&gt; 是第 &lt;code&gt;i​​​​​​​​​​​​​​&lt;/code&gt; 道餐品的美味程度，返回你可以用数组中的餐品做出的不同 &lt;strong&gt;大餐&lt;/strong&gt; 的数量。结果需要对 &lt;code&gt;10&lt;sup&gt;9&lt;/sup&gt; + 7&lt;/code&gt; 取余。&lt;/p&gt;

&lt;p&gt;注意，只要餐品下标不同，就可以认为是不同的餐品，即便它们的美味程度相同。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;deliciousness = [1,3,5,7,9]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;4&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;大餐的美味程度组合为 (1,3) 、(1,7) 、(3,5) 和 (7,9) 。&lt;br /&gt;
它们各自的美味程度之和分别为 4 、8 、8 和 16 ，都是 2 的幂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2:&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;deliciousness = [1,1,1,3,3,3,7]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;15&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;大餐的美味程度组合为 3 种 (1,1) ，9 种 (1,3) ，和 3 种 (1,7) 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= deliciousness.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= deliciousness[i] &amp;lt;= 2&lt;sup&gt;20&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希计数&#34;&gt;哈希计数&lt;/h4&gt;

&lt;p&gt;通过哈希表 &lt;code&gt;foodCnt&lt;/code&gt; 记录每个美味程度的菜品数量。&lt;/p&gt;

&lt;p&gt;对于每个美味程度 &lt;code&gt;d&lt;/code&gt;，可以求得与其组成大餐的另一道菜品的所有美味程度 &lt;code&gt;power - d&lt;/code&gt;，将 &lt;code&gt;foodCnt[d]*foodCnt[power-d]&lt;/code&gt; 即可得到这两种美味程度组成的大餐数量&lt;/p&gt;

&lt;p&gt;上述方式可能会重复计算，有两个地方需要特殊处理：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;d == power -d&lt;/code&gt; 时，问题变成了从 &lt;code&gt;foodCnt[d]&lt;/code&gt; 道菜品中找出两个不同的菜品，这是个组合问题，其结果为 &lt;code&gt;foodCnt[d]*(foodCnt[d]-1)/2&lt;/code&gt;；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第一次选中 &lt;code&gt;d&lt;/code&gt;，和第一次选中 &lt;code&gt;power-d&lt;/code&gt; 存在重复计算，可以限制 &lt;code&gt;power-d &amp;gt;= d&lt;/code&gt;，则仅计算依次。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countPairs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;deliciousness&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1e9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;foodCnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deliciousness&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;foodCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foodCnt&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;power&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;power&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxInt32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;power&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;power&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;another&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;power&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;another&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foodCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;another&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;another&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;foodCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;another&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NlogB), N=len(deliciousness) B=max(deliciousness[i])$&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1418. 点菜展示表</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1418.-%E7%82%B9%E8%8F%9C%E5%B1%95%E7%A4%BA%E8%A1%A8/</link>
        <pubDate>Tue, 06 Jul 2021 09:20:22 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1418.-%E7%82%B9%E8%8F%9C%E5%B1%95%E7%A4%BA%E8%A1%A8/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/display-table-of-food-orders-in-a-restaurant/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/display-table-of-food-orders-in-a-restaurant/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个数组 &lt;code&gt;orders&lt;/code&gt; ，表示客户在餐厅中完成的订单，确切地说， &lt;code&gt;orders[i]=[customerName&lt;sub&gt;i&lt;/sub&gt;,tableNumber&lt;sub&gt;i&lt;/sub&gt;,foodItem&lt;sub&gt;i&lt;/sub&gt;]&lt;/code&gt; ，其中 &lt;code&gt;customerName&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 是客户的姓名，&lt;code&gt;tableNumber&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 是客户所在餐桌的桌号，而 &lt;code&gt;foodItem&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 是客户点的餐品名称。&lt;/p&gt;

&lt;p&gt;请你返回该餐厅的 &lt;strong&gt;点菜展示表&lt;/strong&gt; 。在这张表中，表中第一行为标题，其第一列为餐桌桌号 “Table” ，后面每一列都是按字母顺序排列的餐品名称。接下来每一行中的项则表示每张餐桌订购的相应餐品数量，第一列应当填对应的桌号，后面依次填写下单的餐品数量。&lt;/p&gt;

&lt;p&gt;注意：客户姓名不是点菜展示表的一部分。此外，表中的数据行应该按餐桌桌号升序排列。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;orders = [[&amp;ldquo;David&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;Ceviche&amp;rdquo;],[&amp;ldquo;Corina&amp;rdquo;,&amp;ldquo;10&amp;rdquo;,&amp;ldquo;Beef Burrito&amp;rdquo;],[&amp;ldquo;David&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;Fried Chicken&amp;rdquo;],[&amp;ldquo;Carla&amp;rdquo;,&amp;ldquo;5&amp;rdquo;,&amp;ldquo;Water&amp;rdquo;],[&amp;ldquo;Carla&amp;rdquo;,&amp;ldquo;5&amp;rdquo;,&amp;ldquo;Ceviche&amp;rdquo;],[&amp;ldquo;Rous&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;Ceviche&amp;rdquo;]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[[&amp;ldquo;Table&amp;rdquo;,&amp;ldquo;Beef Burrito&amp;rdquo;,&amp;ldquo;Ceviche&amp;rdquo;,&amp;ldquo;Fried Chicken&amp;rdquo;,&amp;ldquo;Water&amp;rdquo;],[&amp;ldquo;3&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;],[&amp;ldquo;5&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;1&amp;rdquo;],[&amp;ldquo;10&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;0&amp;rdquo;]]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
点菜展示表如下所示：&lt;br /&gt;
Table,Beef Burrito,Ceviche,Fried Chicken,Water&lt;br /&gt;
3    ,0           ,2      ,1            ,0&lt;br /&gt;
5    ,0           ,1      ,0            ,1&lt;br /&gt;
10   ,1           ,0      ,0            ,0&lt;br /&gt;
对于餐桌 3：David 点了 &amp;ldquo;Ceviche&amp;rdquo; 和 &amp;ldquo;Fried Chicken&amp;rdquo;，而 Rous 点了 &amp;ldquo;Ceviche&amp;rdquo;&lt;br /&gt;
而餐桌 5：Carla 点了 &amp;ldquo;Water&amp;rdquo; 和 &amp;ldquo;Ceviche&amp;rdquo;&lt;br /&gt;
餐桌 10：Corina 点了 &amp;ldquo;Beef Burrito&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2:&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;orders = [[&amp;ldquo;James&amp;rdquo;,&amp;ldquo;12&amp;rdquo;,&amp;ldquo;Fried Chicken&amp;rdquo;],[&amp;ldquo;Ratesh&amp;rdquo;,&amp;ldquo;12&amp;rdquo;,&amp;ldquo;Fried Chicken&amp;rdquo;],[&amp;ldquo;Amadeus&amp;rdquo;,&amp;ldquo;12&amp;rdquo;,&amp;ldquo;Fried Chicken&amp;rdquo;],[&amp;ldquo;Adam&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;Canadian Waffles&amp;rdquo;],[&amp;ldquo;Brianna&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;Canadian Waffles&amp;rdquo;]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[[&amp;ldquo;Table&amp;rdquo;,&amp;ldquo;Canadian Waffles&amp;rdquo;,&amp;ldquo;Fried Chicken&amp;rdquo;],[&amp;ldquo;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;0&amp;rdquo;],[&amp;ldquo;12&amp;rdquo;,&amp;ldquo;0&amp;rdquo;,&amp;ldquo;3&amp;rdquo;]]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
对于餐桌 1：Adam 和 Brianna 都点了 &amp;ldquo;Canadian Waffles&amp;rdquo;&lt;br /&gt;
而餐桌 12：James, Ratesh 和 Amadeus 都点了 &amp;ldquo;Fried Chicken&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3:&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;orders = [[&amp;ldquo;Laura&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;Bean Burrito&amp;rdquo;],[&amp;ldquo;Jhon&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;Beef Burrito&amp;rdquo;],[&amp;ldquo;Melissa&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;Soda&amp;rdquo;]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[[&amp;ldquo;Table&amp;rdquo;,&amp;ldquo;Bean Burrito&amp;rdquo;,&amp;ldquo;Beef Burrito&amp;rdquo;,&amp;ldquo;Soda&amp;rdquo;],[&amp;ldquo;2&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;1&amp;rdquo;]]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= orders.length &amp;lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orders[i].length == 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= customerNamei.length, foodItemi.length &amp;lt;= 20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;customerName&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 和 &lt;code&gt;foodItem&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 由大小写英文字母及空格字符 &lt;code&gt;&#39; &#39;&lt;/code&gt; 组成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tableNumber&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 是 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;500&lt;/code&gt; 范围内的整数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希计数&#34;&gt;哈希计数&lt;/h4&gt;

&lt;p&gt;遍历所有每个订单，记录同一桌号每种菜品的数量，然后根据桌号顺序，和菜品顺序生成结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;displayTable&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;orders&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;tableFoodsCnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;foods&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;orders&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// 菜品名单
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;isAddToFoods&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;// 去重
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;orders&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// 加入菜品名单
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;isAddToFoods&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;foods&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;foods&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
			&lt;span style=&#34;color:#a6e22e&#34;&gt;isAddToFoods&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// 统计数量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Atoi&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tableFoodsCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;tableFoodsCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;] = make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;tableFoodsCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;order&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 菜品排序
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Strings&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;foods&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 桌号排序
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;tables&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;tableFoodsCnt&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tableFoodsCnt&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;tables&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;tables&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ints&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tables&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 生成结果
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([][]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;tables&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;foods&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 表头
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Table&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;food&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foods&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;food&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 填表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tables&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;foods&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FormatInt&lt;/span&gt;(int64(&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// 桌号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 菜品数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;food&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foods&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FormatInt&lt;/span&gt;(int64(&lt;span style=&#34;color:#a6e22e&#34;&gt;tableFoodsCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;food&lt;/span&gt;]), &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：$ O(NlogN), N=len(orders) $&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 726. 原子的数量</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-726.-%E5%8E%9F%E5%AD%90%E7%9A%84%E6%95%B0%E9%87%8F/</link>
        <pubDate>Mon, 05 Jul 2021 20:30:53 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-726.-%E5%8E%9F%E5%AD%90%E7%9A%84%E6%95%B0%E9%87%8F/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/number-of-atoms/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/number-of-atoms/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;困难&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定一个化学式 &lt;code&gt;formula&lt;/code&gt; （作为字符串），返回每种原子的数量。&lt;/p&gt;

&lt;p&gt;原子总是以一个大写字母开始，接着跟随0个或任意个小写字母，表示原子的名字。&lt;/p&gt;

&lt;p&gt;如果数量大于 1，原子后会跟着数字表示原子的数量。如果数量等于 1 则不会跟数字。例如，H2O 和 H2O2 是可行的，但 H1O2 这个表达是不可行的。&lt;/p&gt;

&lt;p&gt;两个化学式连在一起是新的化学式。例如 H2O2He3Mg4 也是化学式。&lt;/p&gt;

&lt;p&gt;一个括号中的化学式和数字（可选择性添加）也是化学式。例如 (H2O2) 和 (H2O2)3 是化学式。&lt;/p&gt;

&lt;p&gt;给定一个化学式 &lt;code&gt;formula&lt;/code&gt; ，返回所有原子的数量。格式为：第一个（按字典序）原子的名字，跟着它的数量（如果数量大于 1），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于 1），以此类推。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;formula = &amp;ldquo;H2O&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;&amp;ldquo;H2O&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
原子的数量是 {&amp;lsquo;H&amp;rsquo;: 2, &amp;lsquo;O&amp;rsquo;: 1}。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;formula = &amp;ldquo;Mg(OH)2&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;&amp;ldquo;H2MgO2&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
原子的数量是 {&amp;lsquo;H&amp;rsquo;: 2, &amp;lsquo;Mg&amp;rsquo;: 1, &amp;lsquo;O&amp;rsquo;: 2}。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;formula = &amp;ldquo;K4(ON(SO3)2)2&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;&amp;ldquo;K4N2O14S4&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
原子的数量是 {&amp;lsquo;K&amp;rsquo;: 4, &amp;lsquo;N&amp;rsquo;: 2, &amp;lsquo;O&amp;rsquo;: 14, &amp;rsquo;S&amp;rsquo;: 4}。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例4&#34;&gt;示例4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;formula = &amp;ldquo;Be32&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;&amp;ldquo;Be32&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= formula.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;formula&lt;/code&gt; 由小写英文字母、数字 &lt;code&gt;&#39;(&#39;&lt;/code&gt; 和 &lt;code&gt;&#39;)&#39;&lt;/code&gt; 组成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;formula&lt;/code&gt; 是有效的化学式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;栈&#34;&gt;栈&lt;/h4&gt;

&lt;p&gt;依次记录每个元素的数量，当遇到 &lt;code&gt;&#39;(&#39;&lt;/code&gt; 时，入栈，直至遇到 &lt;code&gt;&#39;)&#39;&lt;/code&gt;：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;读取其后的数字 &lt;code&gt;cnt&lt;/code&gt; ，没有则记为 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从栈中依次弹出元素，直到遇到 &lt;code&gt;&#39;(&#39;&lt;/code&gt; 为止&lt;/li&gt;
&lt;li&gt;将这些元素的数量 &lt;strong&gt;乘以&lt;/strong&gt; &lt;code&gt;cnt&lt;/code&gt; ，然后重新放回栈中&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;重复以上步骤直到遍历完化学式，从栈中取出所有元素，排序，生成结果并返回。&lt;/p&gt;

&lt;p&gt;为避免重复记录过多的元素，通过 &lt;code&gt;map&lt;/code&gt; 进行计数，作为栈的元素单位。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countOfAtoms&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取下一个数字
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;getNum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;); &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取下一个元素
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;getAtom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;])
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;); &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;])
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 栈
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;))
	&lt;span style=&#34;color:#75715e&#34;&gt;// 入栈
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt; = make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 计数map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;); {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
		&lt;span style=&#34;color:#75715e&#34;&gt;// 左括号所有元素入栈
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:
			&lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;// 右括号，最近左括号范围的元素数量 乘以 括号后的数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;:
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getNum&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;pairs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
				&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[:len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pairs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
				}
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pairs&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;
				}
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
			&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;getAtom&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getNum&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 合并为一个map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt; = make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 字典序排序
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;atoms&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;atoms&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;atoms&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Strings&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atoms&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 生成结果字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;formula&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atoms&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FormatInt&lt;/span&gt;(int64(&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;atom&lt;/span&gt;]), &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N&lt;sup&gt;2&lt;/sup&gt;)，其中 N = len(formula)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 645. 错误的集合</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-645.-%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88/</link>
        <pubDate>Sun, 04 Jul 2021 10:12:40 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-645.-%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/set-mismatch/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/set-mismatch/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;集合 &lt;code&gt;s&lt;/code&gt; 包含从 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;n&lt;/code&gt; 的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 &lt;strong&gt;丢失了一个数字&lt;/strong&gt; 并且 &lt;strong&gt;有一个数字重复&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;给定一个数组 &lt;code&gt;nums&lt;/code&gt; 代表了集合 &lt;code&gt;S&lt;/code&gt; 发生错误后的结果。&lt;/p&gt;

&lt;p&gt;请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [1,2,2,4]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[2,3]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [1,1]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[1,2]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= nums.length &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums[i] &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希&#34;&gt;哈希&lt;/h4&gt;

&lt;p&gt;利用哈希表记录每个数字是否出现，可以找到重复出现过的数字；遍历哈希表可以找到丢失的数字。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findErrorNums&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N), N = len(nums)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 451. 根据字符出现频率排序</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-451.-%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Sat, 03 Jul 2021 09:35:21 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-451.-%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/sort-characters-by-frequency/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/sort-characters-by-frequency/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定一个字符串，请将字符串里的字符按照出现的频率降序排列。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt;&lt;br /&gt;
&amp;ldquo;tree&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt;&lt;br /&gt;
&amp;ldquo;eert&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解释:&lt;/strong&gt;&lt;br /&gt;
&amp;lsquo;e&amp;rsquo;出现两次，&amp;rsquo;r&amp;rsquo;和&amp;rsquo;t&amp;rsquo;都只出现一次。&lt;br /&gt;
因此&amp;rsquo;e&amp;rsquo;必须出现在&amp;rsquo;r&amp;rsquo;和&amp;rsquo;t&amp;rsquo;之前。此外，&amp;rdquo;eetr&amp;rdquo;也是一个有效的答案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt;&lt;br /&gt;
&amp;ldquo;cccaaa&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt;&lt;br /&gt;
&amp;ldquo;cccaaa&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解释:&lt;/strong&gt;&lt;br /&gt;
&amp;lsquo;c&amp;rsquo;和&amp;rsquo;a&amp;rsquo;都出现三次。此外，&amp;rdquo;aaaccc&amp;rdquo;也是有效的答案。&lt;br /&gt;
注意&amp;rdquo;cacaca&amp;rdquo;是不正确的，因为相同的字母必须放在一起。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt;&lt;br /&gt;
&amp;ldquo;Aabb&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt;&lt;br /&gt;
&amp;ldquo;bbAa&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解释:&lt;/strong&gt;&lt;br /&gt;
此外，&amp;rdquo;bbaA&amp;rdquo;也是一个有效的答案，但&amp;rdquo;Aabb&amp;rdquo;是不正确的。&lt;br /&gt;
注意&amp;rsquo;A&amp;rsquo;和&amp;rsquo;a&amp;rsquo;被认为是两种不同的字符。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;计数-排序&#34;&gt;计数+排序&lt;/h4&gt;

&lt;p&gt;统计每个字符出现的次数，按照统计的次数对字符进行排序，然后按照字符顺序和数量展开。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;frequencySort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;chars&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;chars&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;chars&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Slice&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chars&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;chars&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;chars&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]]
	})
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chars&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Repeat&lt;/span&gt;([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(NlogN), N = len(s)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1833. 雪糕的最大数量</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1833.-%E9%9B%AA%E7%B3%95%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</link>
        <pubDate>Fri, 02 Jul 2021 10:28:04 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1833.-%E9%9B%AA%E7%B3%95%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/maximum-ice-cream-bars/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/maximum-ice-cream-bars/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;夏日炎炎，小男孩 Tony 想买一些雪糕消消暑。&lt;/p&gt;

&lt;p&gt;商店中新到 &lt;code&gt;n&lt;/code&gt; 支雪糕，用长度为 &lt;code&gt;n&lt;/code&gt; 的数组 &lt;code&gt;costs&lt;/code&gt; 表示雪糕的定价，其中 &lt;code&gt;costs[i]&lt;/code&gt; 表示第 &lt;code&gt;i&lt;/code&gt; 支雪糕的现金价格。Tony 一共有 &lt;code&gt;coins&lt;/code&gt; 现金可以用于消费，他想要买尽可能多的雪糕。&lt;/p&gt;

&lt;p&gt;给你价格数组 &lt;code&gt;costs&lt;/code&gt; 和现金量 &lt;code&gt;coins&lt;/code&gt; ，请你计算并返回 Tony 用 &lt;code&gt;coins&lt;/code&gt; 现金能够买到的雪糕的 &lt;strong&gt;最大数量&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;Tony 可以按任意顺序购买雪糕。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;costs = [1,3,2,4,1], coins = 7&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;4&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;Tony 可以买下标为 0、1、2、4 的雪糕，总价为 1 + 3 + 2 + 1 = 7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;costs = [10,6,8,7,7,8], coins = 5&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;Tony 没有足够的钱买任何一支雪糕。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;costs = [1,6,3,1,2,5], coins = 20&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;6&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;Tony 可以买下所有的雪糕，总价为 1 + 6 + 3 + 1 + 2 + 5 = 18 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;costs.length == n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= costs[i] &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= coins &amp;lt;= 10&lt;sup&gt;8&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;贪心&#34;&gt;贪心&lt;/h4&gt;

&lt;p&gt;为了获得 &lt;strong&gt;最大数量&lt;/strong&gt;，优先购买价格最低的雪糕即可，按照雪糕价格进行一次排序，依次选择到买不起为止。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxIceCream&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;costs&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ints&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;costs&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;costs&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cost&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;costs&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(NlogN)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>LCP 07. 传递信息</title>
        <link>https://xianlianghe0123.github.io/p/lcp-07.-%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Thu, 01 Jul 2021 11:14:31 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/lcp-07.-%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/chuan-di-xin-xi/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/chuan-di-xin-xi/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;小朋友 A 在和 ta 的小伙伴们玩传信息游戏，游戏规则如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有 n 名玩家，所有玩家编号分别为 0 ～ n-1，其中小朋友 A 的编号为 0&lt;/li&gt;
&lt;li&gt;每个玩家都有固定的若干个可传信息的其他玩家（也可能没有）。传信息的关系是单向的（比如 A 可以向 B 传信息，但 B 不能向 A 传信息）。&lt;/li&gt;
&lt;li&gt;每轮信息必须需要传递给另一个人，且信息可重复经过同一个人&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;给定总玩家数 n，以及按 &lt;code&gt;[玩家编号,对应可传递玩家编号]&lt;/code&gt; 关系组成的二维数组 &lt;code&gt;relation&lt;/code&gt;。返回信息从小 A (编号 0 ) 经过 &lt;code&gt;k&lt;/code&gt; 轮传递到编号为 n-1 的小伙伴处的方案数；若不能到达，返回 0。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 5, relation = [[0,2],[2,1],[3,4],[2,3],[1,4],[2,0],[0,4]], k = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;信息从小 A 编号 0 处开始，经 3 轮传递，到达编号 4。共有 3 种方案，分别是 0-&amp;gt;2-&amp;gt;0-&amp;gt;4， 0-&amp;gt;2-&amp;gt;1-&amp;gt;4， 0-&amp;gt;2-&amp;gt;3-&amp;gt;4。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 3, relation = [[0,2],[2,1]], k = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;信息不能从小 A 处经过 2 轮传递到编号 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;限制&#34;&gt;限制：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= n &amp;lt;= 10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= 5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= relation.length &amp;lt;= 90, 且 relation[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= relation[i][0],relation[i][1] &amp;lt; n 且 relation[i][0] != relation[i][1]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;深度优先搜索&#34;&gt;深度优先搜索&lt;/h4&gt;

&lt;p&gt;从 &lt;code&gt;0&lt;/code&gt; 开始进行深度优先搜索，结点可以重复到达，深度限制为 &lt;code&gt;k&lt;/code&gt;，最后的结点为 &lt;code&gt;n-1&lt;/code&gt; 时，计数+1。&lt;/p&gt;

&lt;p&gt;为快速找到某个玩家可达的下一个玩家，用 &lt;code&gt;map&lt;/code&gt; 记录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numWays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;relation&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;deliver&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;relation&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;relation&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;deliver&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;deliver&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]], &lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;player&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;depth&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;player&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;depth&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;depth&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;player&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nextPlayer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deliver&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;player&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nextPlayer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;depth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n&lt;sup&gt;k&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n+k+len(relation))&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dp[i][j]&lt;/code&gt; 表示第 &lt;code&gt;i&lt;/code&gt; 轮传递后，信息传递到第 &lt;code&gt;j&lt;/code&gt; 个玩家的方案数量，很容易得到状态转移方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[0][k] = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dp[i][k] = dp[i-1][j] + 1, (j, k) ∈ relation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意到每次遍历下一行仅依赖上一行，可以对空间做进一步优化，将矩阵压缩到两个数组。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numWays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;relation&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;relation&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(n*len(relation))&lt;/li&gt;
&lt;li&gt;空间复杂度：O(n)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>剑指 Offer 37. 序列化二叉树</title>
        <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-37.-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
        <pubDate>Wed, 30 Jun 2021 15:51:24 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-37.-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;困难&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;请实现两个函数，分别用来序列化和反序列化二叉树。&lt;/p&gt;

&lt;p&gt;你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 &lt;font color=&#34;grey&#34;&gt;LeetCode 序列化二叉树的格式&lt;/font&gt;。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/serdeser.jpeg&#34; width=&#34;324px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root = [1,2,3,null,null,4,5]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[1,2,3,null,null,4,5]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;先序遍历&#34;&gt;先序遍历&lt;/h4&gt;

&lt;p&gt;序列化时，先序遍历整个二叉树，将遍历到的每个结点按顺序加入列表中。需要将遍历到的空结点也加入到列表中，作为分割。&lt;/p&gt;

&lt;p&gt;反序列化时，按照列表顺序构建二叉树，遇到空结点表示该分支已结束，回到另一个分支处，继续构造结点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Codec&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;serialize&lt;/span&gt;(self, root):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Encodes a tree to a single string.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :rtype: str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(node):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; None:
                list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;None&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val))
                dfs(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left)
                dfs(node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right)

        dfs(root)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(list)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deserialize&lt;/span&gt;(self, data):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Decodes your encoded data to tree.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type data: str
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :rtype: TreeNode
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;():
            nonlocal i
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; list[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;None&amp;#34;&lt;/span&gt;:
                i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None
            node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TreeNode(int(list[i]))
            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfs()
            node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dfs()

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dfs()   &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 168. Excel表列名称</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-168.-excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</link>
        <pubDate>Tue, 29 Jun 2021 10:26:51 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-168.-excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/excel-sheet-column-title/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/excel-sheet-column-title/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定一个正整数，返回它在 Excel 表中相对应的列名称。&lt;/p&gt;

&lt;p&gt;例如，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1 -&amp;gt; A&lt;br /&gt;
2 -&amp;gt; B&lt;br /&gt;
3 -&amp;gt; C&lt;br /&gt;
&amp;hellip;&lt;br /&gt;
26 -&amp;gt; Z&lt;br /&gt;
27 -&amp;gt; AA&lt;br /&gt;
28 -&amp;gt; AB&lt;br /&gt;
&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; 1&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; &amp;ldquo;A&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; 28&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; &amp;ldquo;AB&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; 701&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; &amp;ldquo;ZY&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;数学&#34;&gt;数学&lt;/h4&gt;

&lt;p&gt;通过分析题意可以得知，该题是一个进制转换，将一个10进制的数转换为26进制。&lt;/p&gt;

&lt;p&gt;通过数学方法，逐次模26取余数，即可求得倒序的26进制每一位，反转该序列即可求得转换后的数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;该26进制从1开始计数，每次取模前应减1。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;convertToTitle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;columnNumber&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;columnNumber&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;columnNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;columnNumber&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;columnNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;byte((&lt;span style=&#34;color:#a6e22e&#34;&gt;columnNumber&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;))
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(log&lt;sub&gt;26&lt;/sub&gt;columnNumber)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(log&lt;sub&gt;26&lt;/sub&gt;columnNumber)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 815. 公交路线</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-815.-%E5%85%AC%E4%BA%A4%E8%B7%AF%E7%BA%BF/</link>
        <pubDate>Mon, 28 Jun 2021 10:54:56 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-815.-%E5%85%AC%E4%BA%A4%E8%B7%AF%E7%BA%BF/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/bus-routes/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/bus-routes/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;困难&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个数组 routes ，表示一系列公交线路，其中每个 routes[i] 表示一条公交线路，第 i 辆公交车将会在上面循环行驶。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;例如，路线 &lt;code&gt;routes[0] = [1, 5, 7]&lt;/code&gt; 表示第 &lt;code&gt;0&lt;/code&gt; 辆公交车会一直按序列 &lt;code&gt;1 -&amp;gt; 5 -&amp;gt; 7 -&amp;gt; 1 -&amp;gt; 5 -&amp;gt; 7 -&amp;gt; 1 -&amp;gt; ...&lt;/code&gt; 这样的车站路线行驶。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在从 &lt;code&gt;source&lt;/code&gt; 车站出发（初始时不在公交车上），要前往 &lt;code&gt;target&lt;/code&gt; 车站。 期间仅可乘坐公交车。&lt;/p&gt;

&lt;p&gt;求出 &lt;strong&gt;最少乘坐的公交车数量&lt;/strong&gt; 。如果不可能到达终点车站，返回 &lt;code&gt;-1&lt;/code&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;routes = [[1,2,7],[3,6,7]], source = 1, target = 6&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;最优策略是先乘坐第一辆公交车到达车站 7 , 然后换乘第二辆公交车到车站 6 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;-1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= routes.length &amp;lt;= 500.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= routes[i].length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;routes[i]&lt;/code&gt; 中的所有值 &lt;strong&gt;互不相同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum(routes[i].length) &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= routes[i][j] &amp;lt; 10&lt;sup&gt;6&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= source, target &amp;lt; 10&lt;sup&gt;6&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;广度优先搜索&#34;&gt;广度优先搜索&lt;/h4&gt;

&lt;p&gt;由于借助公交车进行移动，可以以公交车作为基本单位实行广度优先搜索，在每个站点搜索所有可乘坐公交车，直到某一条可以到达终点，或者乘坐过可乘坐的所有公交车均不能到达终点为止。&lt;/p&gt;

&lt;p&gt;需要对起点和终点相同的情况进行特判。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numBusesToDestination&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;routes&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Bus&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Step&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;buses&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;routes&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;station&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;buses&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;station&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;buses&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;station&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;routes&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;bus&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buses&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;] {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Bus&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;bus&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Step&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		})
		&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;bus&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;bus&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Bus&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Step&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buses&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bus&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;station&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;routes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;bus&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buses&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;station&lt;/span&gt;] {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;] {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;{
						&lt;span style=&#34;color:#a6e22e&#34;&gt;Bus&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;,
						&lt;span style=&#34;color:#a6e22e&#34;&gt;Step&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
					})
					&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
				}
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*M)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N*M)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 909. 蛇梯棋</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-909.-%E8%9B%87%E6%A2%AF%E6%A3%8B/</link>
        <pubDate>Sun, 27 Jun 2021 19:07:10 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-909.-%E8%9B%87%E6%A2%AF%E6%A3%8B/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/snakes-and-ladders/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/snakes-and-ladders/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;N x N 的棋盘 &lt;code&gt;board&lt;/code&gt; 上，按从 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;N*N&lt;/code&gt; 的数字给方格编号，编号 从左下角开始，每一行交替方向。&lt;/p&gt;

&lt;p&gt;例如，一块 6 x 6 大小的棋盘，编号如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/snakes.png&#34; width=&#34;254px&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;r&lt;/code&gt; 行 &lt;code&gt;c&lt;/code&gt; 列的棋盘，按前述方法编号，棋盘格中可能存在 “蛇” 或 “梯子”；如果 &lt;code&gt;board[r][c] != -1&lt;/code&gt;，那个蛇或梯子的目的地将会是 &lt;code&gt;board[r][c]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;玩家从棋盘上的方格 &lt;code&gt;1&lt;/code&gt; （总是在最后一行、第一列）开始出发。&lt;/p&gt;

&lt;p&gt;每一回合，玩家需要从当前方格 &lt;code&gt;x&lt;/code&gt; 开始出发，按下述要求前进：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;选定目标方格：选择从编号 &lt;code&gt;x+1&lt;/code&gt;，&lt;code&gt;x+2&lt;/code&gt;，&lt;code&gt;x+3&lt;/code&gt;，&lt;code&gt;x+4&lt;/code&gt;，&lt;code&gt;x+5&lt;/code&gt;，或者 &lt;code&gt;x+6&lt;/code&gt; 的方格中选出一个目标方格 &lt;code&gt;s&lt;/code&gt; ，目标方格的编号 &lt;code&gt;&amp;lt;= N*N&lt;/code&gt;。

&lt;ul&gt;
&lt;li&gt;该选择模拟了掷骰子的情景，无论棋盘大小如何，你的目的地范围也只能处于区间 [x+1, x+6] 之间。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;传送玩家：如果目标方格 &lt;code&gt;S&lt;/code&gt; 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 &lt;code&gt;S&lt;/code&gt;。
 
注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，你也不会继续移动。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;返回达到方格 N*N 所需的最少移动次数，如果不可能，则返回 &lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;

&lt;h5 id=&#34;示例&#34;&gt;示例：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;[&lt;br /&gt;
[-1,-1,-1,-1,-1,-1],&lt;br /&gt;
[-1,-1,-1,-1,-1,-1],&lt;br /&gt;
[-1,-1,-1,-1,-1,-1],&lt;br /&gt;
[-1,35,-1,-1,13,-1],&lt;br /&gt;
[-1,-1,-1,-1,-1,-1],&lt;br /&gt;
[-1,15,-1,-1,-1,-1]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;4&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
首先，从方格 1 [第 5 行，第 0 列] 开始。&lt;br /&gt;
你决定移动到方格 2，并必须爬过梯子移动到到方格 15。&lt;br /&gt;
然后你决定移动到方格 17 [第 3 行，第 5 列]，必须爬过蛇到方格 13。&lt;br /&gt;
然后你决定移动到方格 14，且必须通过梯子移动到方格 35。&lt;br /&gt;
然后你决定移动到方格 36, 游戏结束。&lt;br /&gt;
可以证明你需要至少 4 次移动才能到达第 N*N 个方格，所以答案是 4。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= board.length = board[0].length &amp;lt;= 20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;board[i][j]&lt;/code&gt; 介于 &lt;code&gt;1&lt;/code&gt; 和 &lt;code&gt;N*N&lt;/code&gt; 之间或者等于 &lt;code&gt;-1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;编号为 &lt;code&gt;1&lt;/code&gt; 的方格上没有蛇或梯子。&lt;/li&gt;
&lt;li&gt;编号为 &lt;code&gt;N*N&lt;/code&gt; 的方格上没有蛇或梯子。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;广度优先搜索&#34;&gt;广度优先搜索&lt;/h4&gt;

&lt;p&gt;每次搜索下 6 个格子，当碰到蛇或者梯子时，将跳转位置入队，否则将当前位置入队，步数加一，标记已访问，避免重复搜索。直到到达 &lt;code&gt;N*N&lt;/code&gt;返回步数；或队列为空，返回 &lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;snakesAndLadders&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;board&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Pos&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Step&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;board&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;len(&lt;span style=&#34;color:#a6e22e&#34;&gt;board&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Pos&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Step&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	})
	&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Pos&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Step&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;board&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;len(&lt;span style=&#34;color:#a6e22e&#34;&gt;board&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
			&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;board&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (len(&lt;span style=&#34;color:#a6e22e&#34;&gt;board&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; = len(&lt;span style=&#34;color:#a6e22e&#34;&gt;board&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cell&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;board&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cell&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
				}
				&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Pos&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;,
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Step&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
				})
				&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;cell&lt;/span&gt;] {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Pos&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;cell&lt;/span&gt;,
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Step&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
				})
				&lt;span style=&#34;color:#a6e22e&#34;&gt;isVisit&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;cell&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 752. 打开转盘锁</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-752.-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/</link>
        <pubDate>Fri, 25 Jun 2021 17:34:59 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-752.-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/open-the-lock/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/open-the-lock/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &lt;code&gt;&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;&lt;/code&gt; 。每个拨轮可以自由旋转：例如把 &lt;code&gt;&#39;9&#39;&lt;/code&gt; 变为 &lt;code&gt;&#39;0&#39;&lt;/code&gt;，&lt;code&gt;&#39;0&#39;&lt;/code&gt; 变为 &lt;code&gt;&#39;9&#39;&lt;/code&gt; 。每次旋转都只能旋转一个拨轮的一位数字。&lt;/p&gt;

&lt;p&gt;锁的初始数字为 &lt;code&gt;&#39;0000&#39;&lt;/code&gt; ，一个代表四个拨轮的数字的字符串。&lt;/p&gt;

&lt;p&gt;列表 &lt;code&gt;deadends&lt;/code&gt; 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。&lt;/p&gt;

&lt;p&gt;字符串 &lt;code&gt;target&lt;/code&gt; 代表可以解锁的数字，你需要给出解锁需要的最小旋转次数，如果无论如何不能解锁，返回 &lt;code&gt;-1&lt;/code&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;deadends = [&amp;ldquo;0201&amp;rdquo;,&amp;ldquo;0101&amp;rdquo;,&amp;ldquo;0102&amp;rdquo;,&amp;ldquo;1212&amp;rdquo;,&amp;ldquo;2002&amp;rdquo;], target = &amp;ldquo;0202&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;6&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
可能的移动序列为 &amp;ldquo;0000&amp;rdquo; -&amp;gt; &amp;ldquo;1000&amp;rdquo; -&amp;gt; &amp;ldquo;1100&amp;rdquo; -&amp;gt; &amp;ldquo;1200&amp;rdquo; -&amp;gt; &amp;ldquo;1201&amp;rdquo; -&amp;gt; &amp;ldquo;1202&amp;rdquo; -&amp;gt; &amp;ldquo;0202&amp;rdquo;。&lt;br /&gt;
注意 &amp;ldquo;0000&amp;rdquo; -&amp;gt; &amp;ldquo;0001&amp;rdquo; -&amp;gt; &amp;ldquo;0002&amp;rdquo; -&amp;gt; &amp;ldquo;0102&amp;rdquo; -&amp;gt; &amp;ldquo;0202&amp;rdquo; 这样的序列是不能解锁的，&lt;br /&gt;
因为当拨动到 &amp;ldquo;0102&amp;rdquo; 时这个锁就会被锁定。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; deadends = [&amp;ldquo;8888&amp;rdquo;], target = &amp;ldquo;0009&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
把最后一位反向旋转一次即可 &amp;ldquo;0000&amp;rdquo; -&amp;gt; &amp;ldquo;0009&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; deadends = [&amp;ldquo;8887&amp;rdquo;,&amp;ldquo;8889&amp;rdquo;,&amp;ldquo;8878&amp;rdquo;,&amp;ldquo;8898&amp;rdquo;,&amp;ldquo;8788&amp;rdquo;,&amp;ldquo;8988&amp;rdquo;,&amp;ldquo;7888&amp;rdquo;,&amp;ldquo;9888&amp;rdquo;], target = &amp;ldquo;8888&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;-1&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
无法旋转到目标数字且不被锁定。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例4&#34;&gt;示例4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; deadends = [&amp;ldquo;0000&amp;rdquo;], target = &amp;ldquo;8888&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;-1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= deadends.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deadends[i].length == 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target.length == 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt; 不在 &lt;code&gt;deadends&lt;/code&gt; 之中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt; 和 &lt;code&gt;deadends[i]&lt;/code&gt; 仅由若干位数字组成&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;广度优先搜索&#34;&gt;广度优先搜索&lt;/h4&gt;

&lt;p&gt;每次转动一个拨轮，记录转动后的锁状态，以及到目前为止转动的次数，如果未访问过，加入队列，直到首次与target匹配则返回。&lt;/p&gt;

&lt;p&gt;每次入队后将当前锁状态加入到 &lt;code&gt;deadends&lt;/code&gt; 中，防止重复搜索。&lt;/p&gt;

&lt;p&gt;需要对一开始即被锁的情况进行特判。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openLock&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;deadends&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Cur&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Cnt&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;deadendsMap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deadends&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;deadendsMap&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deadendsMap&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0000&amp;#34;&lt;/span&gt;] {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 广度优先搜索
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Cur&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0000&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Cnt&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	})
	&lt;span style=&#34;color:#a6e22e&#34;&gt;deadendsMap&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0000&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Cur&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Cnt&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// 向后旋转
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;deadendsMap&lt;/span&gt;[string(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)] {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Cur&lt;/span&gt;: string(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;),
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Cnt&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
				})
				&lt;span style=&#34;color:#a6e22e&#34;&gt;deadendsMap&lt;/span&gt;[string(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			}
			&lt;span style=&#34;color:#75715e&#34;&gt;// 向前旋转
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; = []byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;deadendsMap&lt;/span&gt;[string(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)] {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Pair&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Cur&lt;/span&gt;: string(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;),
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Cnt&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
				})
				&lt;span style=&#34;color:#a6e22e&#34;&gt;deadendsMap&lt;/span&gt;[string(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(b&lt;sup&gt;d&lt;/sup&gt;*d)，其中 b 是数字的进制，d 是转盘数字的位数，&lt;/li&gt;
&lt;li&gt;空间复杂度：O(b&lt;sup&gt;d&lt;/sup&gt;*d)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>剑指 Offer 15. 二进制中1的个数</title>
        <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-15.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
        <pubDate>Wed, 23 Jun 2021 21:39:35 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-15.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;00000000000000000000000000001011&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;输入的二进制串 00000000000000000000000000001011 中，共有三位为 &amp;lsquo;1&amp;rsquo;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;00000000000000000000000010000000&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;输入的二进制串 00000000000000000000000010000000 中，共有一位为 &amp;lsquo;1&amp;rsquo;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;11111111111111111111111111111101&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;31&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &amp;lsquo;1&amp;rsquo;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;输入必须是长度为 &lt;code&gt;32&lt;/code&gt; 的 二进制串 。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;计数&#34;&gt;计数&lt;/h4&gt;

&lt;p&gt;每次统计最右边的一位，并向右移动一位。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hammingWeight&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(logN)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;消除&#34;&gt;消除&lt;/h4&gt;

&lt;p&gt;使用lowbit算法，每次消除最右边的 1，直到该数为 0，消除次数即为1的个数
每次统计最右边的一位，并向右移动一位。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hammingWeight&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(logN)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>剑指 Offer 38. 字符串的排列</title>
        <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-38.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</link>
        <pubDate>Tue, 22 Jun 2021 21:43:40 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-38.-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;输入一个字符串，打印出该字符串中字符的所有排列。&lt;/p&gt;

&lt;p&gt;你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;s = &amp;ldquo;abc&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[&amp;ldquo;abc&amp;rdquo;,&amp;ldquo;acb&amp;rdquo;,&amp;ldquo;bac&amp;rdquo;,&amp;ldquo;bca&amp;rdquo;,&amp;ldquo;cab&amp;rdquo;,&amp;ldquo;cba&amp;rdquo;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s 的长度 &amp;lt;= 8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;回溯&#34;&gt;回溯&lt;/h4&gt;

&lt;p&gt;遍历未入栈字符列表，每次选取一个字符入栈，并标记此字符已经入栈，递归的寻找下一个字符，直到所有字符全部入栈，将结果加入集合中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;permutation&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;only&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;choice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backtrack&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;backtrack&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;only&lt;/span&gt;[string(&lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt;)] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;choice&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;choice&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;])
			&lt;span style=&#34;color:#a6e22e&#34;&gt;choice&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;backtrack&lt;/span&gt;()
			&lt;span style=&#34;color:#a6e22e&#34;&gt;choice&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt;[:len(&lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;backtrack&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;only&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*N!)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N*N!)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 401. 二进制手表</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-401.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8/</link>
        <pubDate>Mon, 21 Jun 2021 21:27:36 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-401.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/binary-watch/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/binary-watch/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;二进制手表顶部有 4 个 LED 代表 &lt;strong&gt;小时（0-11）&lt;/strong&gt;，底部的 6 个 LED 代表 &lt;strong&gt;分钟（0-59）&lt;/strong&gt;。每个 LED 代表一个 0 或 1，最低位在右侧。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;例如，下面的二进制手表读取 &lt;code&gt;&amp;quot;3:25&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://xianlianghe0123.github.io/img/binary_clock_samui_moon.jpeg&#34; height=&#34;300px&#34;&gt;&lt;/p&gt;

&lt;p&gt;给你一个整数 &lt;code&gt;turnedOn&lt;/code&gt; ，表示当前亮着的 LED 的数量，返回二进制手表可以表示的所有可能时间。你可以 &lt;strong&gt;按任意顺序&lt;/strong&gt; 返回答案。&lt;/p&gt;

&lt;p&gt;小时不会以零开头：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;例如，&lt;code&gt;&amp;quot;01:00&amp;quot;&lt;/code&gt; 是无效的时间，正确的写法应该是 &lt;code&gt;&amp;quot;1:00&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;分钟必须由两位数组成，可能会以零开头：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;例如，&lt;code&gt;&amp;quot;10:2&amp;quot;&lt;/code&gt; 是无效的时间，正确的写法应该是 &lt;code&gt;&amp;quot;10:02&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;turnedOn = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[&amp;ldquo;0:01&amp;rdquo;,&amp;ldquo;0:02&amp;rdquo;,&amp;ldquo;0:04&amp;rdquo;,&amp;ldquo;0:08&amp;rdquo;,&amp;ldquo;0:16&amp;rdquo;,&amp;ldquo;0:32&amp;rdquo;,&amp;ldquo;1:00&amp;rdquo;,&amp;ldquo;2:00&amp;rdquo;,&amp;ldquo;4:00&amp;rdquo;,&amp;ldquo;8:00&amp;rdquo;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;turnedOn = 9&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= turnedOn &amp;lt;= 10&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;穷举&#34;&gt;穷举&lt;/h4&gt;

&lt;p&gt;枚举出所有小时和分钟的合法数，将符合条件的加入到结果列表中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readBinaryWatch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;turnedOn&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;720&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bits&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OnesCount8&lt;/span&gt;(uint8(&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bits&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OnesCount8&lt;/span&gt;(uint8(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;turnedOn&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d:%02d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;))
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(1)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1600. 皇位继承顺序</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1600.-%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/</link>
        <pubDate>Sun, 20 Jun 2021 09:58:32 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1600.-%E7%9A%87%E4%BD%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/throne-inheritance/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/throne-inheritance/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;一个王国里住着国王、他的孩子们、他的孙子们等等。每一个时间点，这个家庭里有人出生也有人死亡。&lt;/p&gt;

&lt;p&gt;这个王国有一个明确规定的皇位继承顺序，第一继承人总是国王自己。我们定义递归函数 &lt;code&gt;Successor(x, curOrder)&lt;/code&gt; ，给定一个人 &lt;code&gt;x&lt;/code&gt; 和当前的继承顺序，该函数返回 &lt;code&gt;x&lt;/code&gt; 的下一继承人。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Successor(x, curOrder):&lt;br /&gt;
  如果 x 没有孩子或者所有 x 的孩子都在 curOrder 中：&lt;br /&gt;
        如果 x 是国王，那么返回 null&lt;br /&gt;
        否则，返回 Successor(x 的父亲, curOrder)&lt;br /&gt;
    否则，返回 x 不在 curOrder 中最年长的孩子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比方说，假设王国由国王，他的孩子 Alice 和 Bob （Alice 比 Bob 年长）和 Alice 的孩子 Jack 组成。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一开始， curOrder 为 [&amp;ldquo;king&amp;rdquo;].&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;Successor(king, curOrder)&lt;/code&gt; ，返回 Alice ，所以我们将 Alice 放入 &lt;code&gt;curOrder&lt;/code&gt; 中，得到 &lt;code&gt;[&amp;quot;king&amp;quot;, &amp;quot;Alice&amp;quot;]&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;Successor(Alice, curOrder)&lt;/code&gt; ，返回 Jack ，所以我们将 Jack 放入 &lt;code&gt;curOrder&lt;/code&gt; 中，得到 &lt;code&gt;[&amp;quot;king&amp;quot;, &amp;quot;Alice&amp;quot;, &amp;quot;Jack&amp;quot;]&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;Successor(Jack, curOrder)&lt;/code&gt; ，返回 Bob ，所以我们将 Bob 放入 &lt;code&gt;curOrder&lt;/code&gt; 中，得到 &lt;code&gt;[&amp;quot;king&amp;quot;, &amp;quot;Alice&amp;quot;, &amp;quot;Jack&amp;quot;, &amp;quot;Bob&amp;quot;]&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;Successor(Bob, curOrder)&lt;/code&gt; ，返回 &lt;code&gt;null&lt;/code&gt; 。最终得到继承顺序为 &lt;code&gt;[&amp;quot;king&amp;quot;, &amp;quot;Alice&amp;quot;, &amp;quot;Jack&amp;quot;, &amp;quot;Bob&amp;quot;]&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过以上的函数，我们总是能得到一个唯一的继承顺序。&lt;/p&gt;

&lt;p&gt;请你实现 &lt;code&gt;ThroneInheritance&lt;/code&gt; 类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ThroneInheritance(string kingName)&lt;/code&gt; 初始化一个 &lt;code&gt;ThroneInheritance&lt;/code&gt; 类的对象。国王的名字作为构造函数的参数传入。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void birth(string parentName, string childName)&lt;/code&gt; 表示 &lt;code&gt;parentName&lt;/code&gt; 新拥有了一个名为 &lt;code&gt;childName&lt;/code&gt; 的孩子。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void death(string name)&lt;/code&gt; 表示名为 &lt;code&gt;name&lt;/code&gt; 的人死亡。一个人的死亡不会影响 &lt;code&gt;Successor&lt;/code&gt; 函数，也不会影响当前的继承顺序。你可以只将这个人标记为死亡状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string[] getInheritanceOrder()&lt;/code&gt; 返回 &lt;strong&gt;除去&lt;/strong&gt; 死亡人员的当前继承顺序列表。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;示例&#34;&gt;示例：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;
[&amp;ldquo;ThroneInheritance&amp;rdquo;, &amp;ldquo;birth&amp;rdquo;, &amp;ldquo;birth&amp;rdquo;, &amp;ldquo;birth&amp;rdquo;, &amp;ldquo;birth&amp;rdquo;, &amp;ldquo;birth&amp;rdquo;, &amp;ldquo;birth&amp;rdquo;, &amp;ldquo;getInheritanceOrder&amp;rdquo;, &amp;ldquo;death&amp;rdquo;, &amp;ldquo;getInheritanceOrder&amp;rdquo;]&lt;br /&gt;
[[&amp;ldquo;king&amp;rdquo;], [&amp;ldquo;king&amp;rdquo;, &amp;ldquo;andy&amp;rdquo;], [&amp;ldquo;king&amp;rdquo;, &amp;ldquo;bob&amp;rdquo;], [&amp;ldquo;king&amp;rdquo;, &amp;ldquo;catherine&amp;rdquo;], [&amp;ldquo;andy&amp;rdquo;, &amp;ldquo;matthew&amp;rdquo;], [&amp;ldquo;bob&amp;rdquo;, &amp;ldquo;alex&amp;rdquo;], [&amp;ldquo;bob&amp;rdquo;, &amp;ldquo;asha&amp;rdquo;], [null], [&amp;ldquo;bob&amp;rdquo;], [null]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;
[null, null, null, null, null, null, null, [&amp;ldquo;king&amp;rdquo;, &amp;ldquo;andy&amp;rdquo;, &amp;ldquo;matthew&amp;rdquo;, &amp;ldquo;bob&amp;rdquo;, &amp;ldquo;alex&amp;rdquo;, &amp;ldquo;asha&amp;rdquo;, &amp;ldquo;catherine&amp;rdquo;], null, [&amp;ldquo;king&amp;rdquo;, &amp;ldquo;andy&amp;rdquo;, &amp;ldquo;matthew&amp;rdquo;, &amp;ldquo;alex&amp;rdquo;, &amp;ldquo;asha&amp;rdquo;, &amp;ldquo;catherine&amp;rdquo;]]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;
ThroneInheritance t= new ThroneInheritance(&amp;ldquo;king&amp;rdquo;); // 继承顺序：king&lt;br /&gt;
t.birth(&amp;ldquo;king&amp;rdquo;, &amp;ldquo;andy&amp;rdquo;); // 继承顺序：king &amp;gt; andy&lt;br /&gt;
t.birth(&amp;ldquo;king&amp;rdquo;, &amp;ldquo;bob&amp;rdquo;); // 继承顺序：king &amp;gt; andy &amp;gt; bob&lt;br /&gt;
t.birth(&amp;ldquo;king&amp;rdquo;, &amp;ldquo;catherine&amp;rdquo;); // 继承顺序：king &amp;gt; andy &amp;gt; bob &amp;gt; catherine&lt;br /&gt;
t.birth(&amp;ldquo;andy&amp;rdquo;, &amp;ldquo;matthew&amp;rdquo;); // 继承顺序：king &amp;gt; andy &amp;gt; matthew &amp;gt; bob &amp;gt; catherine&lt;br /&gt;
t.birth(&amp;ldquo;bob&amp;rdquo;, &amp;ldquo;alex&amp;rdquo;); // 继承顺序：king &amp;gt; andy &amp;gt; matthew &amp;gt; bob &amp;gt; alex &amp;gt; catherine&lt;br /&gt;
t.birth(&amp;ldquo;bob&amp;rdquo;, &amp;ldquo;asha&amp;rdquo;); // 继承顺序：king &amp;gt; andy &amp;gt; matthew &amp;gt; bob &amp;gt; alex &amp;gt; asha &amp;gt; catherine&lt;br /&gt;
t.getInheritanceOrder(); // 返回 [&amp;ldquo;king&amp;rdquo;, &amp;ldquo;andy&amp;rdquo;, &amp;ldquo;matthew&amp;rdquo;, &amp;ldquo;bob&amp;rdquo;, &amp;ldquo;alex&amp;rdquo;, &amp;ldquo;asha&amp;rdquo;, &amp;ldquo;catherine&amp;rdquo;]&lt;br /&gt;
t.death(&amp;ldquo;bob&amp;rdquo;); // 继承顺序：king &amp;gt; andy &amp;gt; matthew &amp;gt; bob（已经去世）&amp;gt; alex &amp;gt; asha &amp;gt; catherine&lt;br /&gt;
t.getInheritanceOrder(); // 返回 [&amp;ldquo;king&amp;rdquo;, &amp;ldquo;andy&amp;rdquo;, &amp;ldquo;matthew&amp;rdquo;, &amp;ldquo;alex&amp;rdquo;, &amp;ldquo;asha&amp;rdquo;, &amp;ldquo;catherine&amp;rdquo;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= kingName.length, parentName.length, childName.length, name.length &amp;lt;= 15&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kingName&lt;/code&gt;，&lt;code&gt;parentName&lt;/code&gt;， &lt;code&gt;childName&lt;/code&gt; 和 &lt;code&gt;name&lt;/code&gt; 仅包含小写英文字母。&lt;/li&gt;
&lt;li&gt;所有的参数 &lt;code&gt;childName&lt;/code&gt; 和 &lt;code&gt;kingName&lt;/code&gt; &lt;strong&gt;互不相同&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;所有 &lt;code&gt;death&lt;/code&gt; 函数中的死亡名字 &lt;code&gt;name&lt;/code&gt; 要么是国王，要么是已经出生了的人员名字。&lt;/li&gt;
&lt;li&gt;每次调用 &lt;code&gt;birth(parentName, childName)&lt;/code&gt; 时，测试用例都保证 &lt;code&gt;parentName&lt;/code&gt; 对应的人员是活着的。&lt;/li&gt;
&lt;li&gt;最多调用 &lt;code&gt;10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt; 次&lt;code&gt;birth&lt;/code&gt; 和 &lt;code&gt;death&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;最多调用 &lt;code&gt;10&lt;/code&gt; 次 &lt;code&gt;getInheritanceOrder&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;树&#34;&gt;树&lt;/h4&gt;

&lt;p&gt;整个家庭成员的关系显然是一个树状结构，用树来保存家庭成员关系信息，而继承的顺序则是数的前序遍历。&lt;/p&gt;

&lt;p&gt;另外，为快速定位到某个成员，使用一个 &lt;code&gt;map&lt;/code&gt; 记录代表每个成员的结点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;isLive&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ThroneInheritance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;kingName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ThroneInheritance&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;king&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;kingName&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;isLive&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ThroneInheritance&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;king&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;kingName&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;king&lt;/span&gt;,
		},
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ThroneInheritance&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Birth&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;parentName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;childName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;childName&lt;/span&gt;] = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;childName&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;isLive&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;parentName&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;parentName&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;childName&lt;/span&gt;])
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ThroneInheritance&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Death&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;isLive&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ThroneInheritance&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;GetInheritanceOrder&lt;/span&gt;() []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isLive&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Constructor&lt;/code&gt;: O(1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Birth&lt;/code&gt;: O(1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Death&lt;/code&gt;: O(1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetInheritanceOrder&lt;/code&gt;: O(N)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 852. 山脉数组的峰顶索引</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-852.-%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95/</link>
        <pubDate>Tue, 15 Jun 2021 20:49:55 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-852.-%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;符合下列属性的数组 &lt;code&gt;arr&lt;/code&gt; 称为 &lt;strong&gt;山脉数组&lt;/strong&gt; ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arr.length &amp;gt;= 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;存在 &lt;code&gt;i&lt;/code&gt;（&lt;code&gt;0 &amp;lt; i &amp;lt; arr.length - 1&lt;/code&gt;）使得：

&lt;ul&gt;
&lt;li&gt;arr[0] &amp;lt; arr[1] &amp;lt; &amp;hellip; arr[i-1] &amp;lt; arr[i]&lt;/li&gt;
&lt;li&gt;arr[i] &amp;gt; arr[i+1] &amp;gt; &amp;hellip; &amp;gt; arr[arr.length - 1]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;给你由整数组成的山脉数组 &lt;code&gt;arr&lt;/code&gt; ，返回任何满足 &lt;code&gt;arr[0] &amp;lt; arr[1] &amp;lt; ... arr[i - 1] &amp;lt; arr[i] &amp;gt; arr[i + 1] &amp;gt; ... &amp;gt; arr[arr.length - 1]&lt;/code&gt; 的下标 &lt;code&gt;i&lt;/code&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [0,1,0]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [0,2,1,0]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [0,10,5,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-4&#34;&gt;示例 4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [3,4,5,1]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-5&#34;&gt;示例 5：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [24,69,100,99,79,78,67,36,26,19]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2
 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;3 &amp;lt;= arr.length &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= arr[i] &amp;lt;= 10&lt;sup&gt;6&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;题目数据保证 arr 是一个山脉数组&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;暴力求解&#34;&gt;暴力求解&lt;/h4&gt;

&lt;p&gt;遍历数组，找出最大值，返回其下标。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;peakIndexInMountainArray&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;二分查找&#34;&gt;二分查找&lt;/h4&gt;

&lt;p&gt;每次获取数组中间的数，并与相邻的两个数做比较：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;均大于这两个数，说明该数为山顶，返回&lt;/li&gt;
&lt;li&gt;大于前一个数，说明左侧均小于该书数，右侧查找&lt;/li&gt;

&lt;li&gt;&lt;p&gt;同理，大于后一个数，左侧查找&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;peakIndexInMountainArray&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; ; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(logN)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 374. 猜数字大小</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-374.-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</link>
        <pubDate>Mon, 14 Jun 2021 10:50:24 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-374.-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/guess-number-higher-or-lower/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/guess-number-higher-or-lower/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;猜数字游戏的规则如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每轮游戏，我都会从 &lt;strong&gt;1&lt;/strong&gt; 到 &lt;strong&gt;n&lt;/strong&gt; 随机选择一个数字。 请你猜选出的是哪个数字。&lt;/li&gt;
&lt;li&gt;如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以通过调用一个预先定义好的接口 &lt;code&gt;int guess(int num)&lt;/code&gt; 来获取猜测结果，返回值一共有 3 种可能的情况（&lt;code&gt;-1&lt;/code&gt;，&lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;0&lt;/code&gt;）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-1：我选出的数字比你猜的数字小 &lt;code&gt;pick &amp;lt; num&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1：我选出的数字比你猜的数字大 &lt;code&gt;pick &amp;gt; num&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;0：我选出的数字和你猜的数字一样。恭喜！你猜对了！&lt;code&gt;pick == num&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;返回我选出的数字。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 10, pick = 6&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 1, pick = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 2, pick = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-4&#34;&gt;示例 4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 2, pick = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2
 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;coed&gt;1 &amp;lt;= n &amp;lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;coed&gt;1 &amp;lt;= pick &amp;lt;= n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;二分查找&#34;&gt;二分查找&lt;/h4&gt;

&lt;p&gt;每次选取中间的数字获取比较结果，等于返回，大于去左半边找，小于去右半边找。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guessNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;guess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(logN)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 278. 第一个错误的版本</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-278.-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/</link>
        <pubDate>Sun, 13 Jun 2021 10:25:24 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-278.-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/first-bad-version/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/first-bad-version/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。&lt;/p&gt;

&lt;p&gt;假设你有 &lt;code&gt;n&lt;/code&gt; 个版本 &lt;code&gt;[1, 2, ..., n]&lt;/code&gt;，你想找出导致之后所有版本出错的第一个错误的版本。&lt;/p&gt;

&lt;p&gt;你可以通过调用 &lt;code&gt;bool isBadVersion(version)&lt;/code&gt; 接口来判断版本号 &lt;code&gt;version&lt;/code&gt; 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;给定 n = 5，并且 version = 4 是第一个错误的版本。&lt;/p&gt;

&lt;p&gt;调用 isBadVersion(3) -&amp;gt; false&lt;br /&gt;
调用 isBadVersion(5) -&amp;gt; true&lt;br /&gt;
调用 isBadVersion(4) -&amp;gt; true&lt;/p&gt;

&lt;p&gt;所以，4 是第一个错误的版本。 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;二分查找&#34;&gt;二分查找&lt;/h4&gt;

&lt;p&gt;对于连续的版本号 &lt;code&gt;[i, j]&lt;/code&gt; 每次判断版本号 &lt;code&gt;(i+j)/2&lt;/code&gt; 是否出错，未出错查找范围缩小到 &lt;code&gt;[(i+j)/2+1, j]&lt;/code&gt;，出错缩小到 &lt;code&gt;[i, (i+j)/2]&lt;/code&gt;，直到 &lt;code&gt;i = j&lt;/code&gt; 即得到首个出错的版本号 &lt;code&gt;i&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firstBadVersion&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isBadVersion&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binSearch&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(logN)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 279. 完全平方数</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-279.-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</link>
        <pubDate>Fri, 11 Jun 2021 19:33:36 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-279.-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/perfect-squares/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/perfect-squares/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定正整数 *n*，找到若干个完全平方数（比如 &lt;code&gt;1, 4, 9, 16, ...&lt;/code&gt;）使得它们的和等于 *n*。你需要让组成和的完全平方数的个数最少。&lt;/p&gt;

&lt;p&gt;给你一个整数 &lt;code&gt;n&lt;/code&gt; ，返回和为 &lt;code&gt;n&lt;/code&gt; 的完全平方数的 &lt;strong&gt;最少数量&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;完全平方数&lt;/strong&gt; 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;4&lt;/code&gt;、&lt;code&gt;9&lt;/code&gt; 和 &lt;code&gt;16&lt;/code&gt; 都是完全平方数，而 &lt;code&gt;3&lt;/code&gt; 和 &lt;code&gt;11&lt;/code&gt; 不是。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 12&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;12 = 4 + 4 + 4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 13&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;13 = 4 + 9&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;注意&#34;&gt;注意：&lt;/h5&gt;

&lt;p&gt;你可以假设：
- &lt;code&gt;1 &amp;lt;= n &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dp[i]&lt;/code&gt; 表示组成数字 &lt;code&gt;i&lt;/code&gt; 的最少完全平方数，易得到状态转移方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[0] = 0&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dp[i] = min(dp[i-j]+1), j &amp;lt; i 且 j是完全平方数&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;change&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; = make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]]
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*√N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 518. 零钱兑换 II</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-518.-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii/</link>
        <pubDate>Thu, 10 Jun 2021 10:35:20 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-518.-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/coin-change-2/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/coin-change-2/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; amount = 5, coins = [1, 2, 5]&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; 4&lt;br /&gt;
&lt;strong&gt;解释:&lt;/strong&gt; 有四种方式可以凑成总金额:&lt;br /&gt;
5=5&lt;br /&gt;
5=2+2+1&lt;br /&gt;
5=2+1+1+1&lt;br /&gt;
5=1+1+1+1+1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; amount = 3, coins = [2]&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; 0&lt;br /&gt;
&lt;strong&gt;解释:&lt;/strong&gt; 只用面额2的硬币不能凑成总金额3。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; amount = 10, coins = [10]&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;注意&#34;&gt;注意：&lt;/h5&gt;

&lt;p&gt;你可以假设：
- &lt;code&gt;0 &amp;lt;= amount (总金额) &amp;lt;= 5000&lt;/code&gt;
- &lt;code&gt;1 &amp;lt;= coin (硬币面额) &amp;lt;= 5000&lt;/code&gt;
- 硬币种类不超过 500 种
- 结果符合 32 位符号整数&lt;/p&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;dp[i][j]&lt;/code&gt; 表示前 &lt;code&gt;i&lt;/code&gt; 种面额的硬币，组成总金额 &lt;code&gt;j&lt;/code&gt; 的方案数，则可以得到状态转移方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[0][0] = 1&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dp[i][j] = ∑dp[i-1][j-k*coins[i]], k∈N 且 k*coins[i] &amp;lt;= j&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;change&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; = make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]]
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*amount)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N*amount)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;优化&#34;&gt;优化&lt;/h4&gt;

&lt;p&gt;用 &lt;code&gt;dp[i]&lt;/code&gt; 记录组成总金额 &lt;code&gt;i&lt;/code&gt; 的方案数，则对于每个面额 &lt;code&gt;coin&lt;/code&gt; 的金币，都可以将其加进去，使得 &lt;code&gt;dp[i+coin]&lt;/code&gt; 的方案数增加 &lt;code&gt;dp[i]&lt;/code&gt; 。由此得到状态转移方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[0] = 1&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dp[i] = ∑dp[i-coin], coin∈coins&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;change&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;coin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coins&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coin&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;coin&lt;/span&gt;]
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;amount&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*amount)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(amount)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1049. 最后一块石头的重量 II</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1049.-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F-ii/</link>
        <pubDate>Tue, 08 Jun 2021 11:35:42 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1049.-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F-ii/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/last-stone-weight-ii/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/last-stone-weight-ii/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;有一堆石头，用整数数组 &lt;code&gt;stones&lt;/code&gt; 表示。其中 &lt;code&gt;stones[i]&lt;/code&gt; 表示第 &lt;code&gt;i&lt;/code&gt; 块石头的重量。&lt;/p&gt;

&lt;p&gt;每一回合，从中选出 &lt;strong&gt;任意两块石头&lt;/strong&gt;，然后将它们一起粉碎。假设石头的重量分别为 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt;，且 &lt;code&gt;x &amp;lt;= y&lt;/code&gt;。那么粉碎的可能结果如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;x == y&lt;/code&gt;，那么两块石头都会被完全粉碎；&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;x != y&lt;/code&gt;，那么重量为 &lt;code&gt;x&lt;/code&gt; 的石头将会完全粉碎，而重量为 &lt;code&gt;y&lt;/code&gt; 的石头新重量为 &lt;code&gt;y-x&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，&lt;strong&gt;最多只会剩下一块&lt;/strong&gt; 石头。返回此石头 &lt;strong&gt;最小的可能重量&lt;/strong&gt; 。如果没有石头剩下，就返回 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;stones = [2,7,4,1,8,1]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，&lt;br /&gt;
组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，&lt;br /&gt;
组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，&lt;br /&gt;
组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;stones = [31,26,33,21,40]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;stones = [1,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= stones.length &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= stones[i] &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;每次从石头堆中拿出两块石头 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;，不妨假设 &lt;code&gt;a &amp;lt; b&lt;/code&gt;，则放回石头堆的石头为 &lt;code&gt;b - a&lt;/code&gt;。所以最后的结果是 &lt;code&gt;∑k&lt;sub&gt;i&lt;/sub&gt;*stones&lt;sub&gt;i&lt;/sub&gt;, k&lt;sub&gt;i&lt;/sub&gt;=-1或1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为使得结果最小，要求系数为 &lt;code&gt;-1&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 的两堆石头的重量和要最接近，所以原问题转化 &lt;strong&gt;01背包问题&lt;/strong&gt;，背包容量为石头重量总和 &lt;code&gt;sum&lt;/code&gt; 的一半，要求从石头堆选取石头装到背包的最大值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lastStoneWeightII&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stone&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stone&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*sum(stones))&lt;/li&gt;
&lt;li&gt;空间复杂度：O(sum(stones))&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 494. 目标和</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-494.-%E7%9B%AE%E6%A0%87%E5%92%8C/</link>
        <pubDate>Mon, 07 Jun 2021 20:34:13 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-494.-%E7%9B%AE%E6%A0%87%E5%92%8C/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/target-sum/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/target-sum/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; 和一个整数 &lt;code&gt;target&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;向数组中的每个整数前添加 &lt;code&gt;&#39;+&#39;&lt;/code&gt; 或 &lt;code&gt;&#39;-&#39;&lt;/code&gt; ，然后串联起所有整数，可以构造一个 &lt;strong&gt;表达式&lt;/strong&gt; ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;例如，&lt;code&gt;nums = [2, 1]&lt;/code&gt; ，可以在 &lt;code&gt;2&lt;/code&gt; 之前添加 &lt;code&gt;&#39;+&#39;&lt;/code&gt; ，在 &lt;code&gt;1&lt;/code&gt; 之前添加 &lt;code&gt;&#39;-&#39;&lt;/code&gt; ，然后串联起来得到表达式 &lt;code&gt;&amp;quot;+2-1&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;返回可以通过上述方法构造的、运算结果等于 &lt;code&gt;target&lt;/code&gt; 的不同 &lt;strong&gt;表达式&lt;/strong&gt; 的数目。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [1,1,1,1,1], target = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;5&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;一共有 5 种方法让最终目标和为 3 。&lt;br /&gt;
-1 + 1 + 1 + 1 + 1 = 3&lt;br /&gt;
+1 - 1 + 1 + 1 + 1 = 3&lt;br /&gt;
+1 + 1 - 1 + 1 + 1 = 3&lt;br /&gt;
+1 + 1 + 1 - 1 + 1 = 3&lt;br /&gt;
+1 + 1 + 1 + 1 - 1 = 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [1], target = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;注意&#34;&gt;注意：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= sum(nums[i]) &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1000 &amp;lt;= target &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;暴力求解&#34;&gt;暴力求解&lt;/h4&gt;

&lt;p&gt;对于每个数字，可以有 &lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;-&lt;/code&gt; 两种符号，枚举出所有的情况，统计符合题意的数量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findTargetSumWays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findTargetSumWays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findTargetSumWays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(2&lt;sup&gt;N&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;用 &lt;code&gt;dp[i][j]&lt;/code&gt; 记录以 &lt;code&gt;i&lt;/code&gt; 为结尾的前缀数组，计算结果为 &lt;code&gt;j&lt;/code&gt; 的方案数量，很容易得到状态转移方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[i][j] = dp[i-1][j-num[i]] + dp[i-1][j+num[i]]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于计算结果可以为负值，故对其添加一个偏移量，使之全部为非负数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findTargetSumWays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;2002&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*scope)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N*scope)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 474. 一和零</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-474.-%E4%B8%80%E5%92%8C%E9%9B%B6/</link>
        <pubDate>Sun, 06 Jun 2021 10:08:43 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-474.-%E4%B8%80%E5%92%8C%E9%9B%B6/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/ones-and-zeroes/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/ones-and-zeroes/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个二进制字符串数组 &lt;code&gt;strs&lt;/code&gt; 和两个整数 &lt;code&gt;m&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;请你找出并返回 &lt;code&gt;strs&lt;/code&gt; 的最大子集的大小，该子集中 &lt;strong&gt;最多&lt;/strong&gt; 有 &lt;code&gt;m&lt;/code&gt; 个 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; 个 &lt;code&gt;1&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;如果 &lt;code&gt;x&lt;/code&gt; 的所有元素也是 &lt;code&gt;y&lt;/code&gt; 的元素，集合 &lt;code&gt;x&lt;/code&gt; 是集合 &lt;code&gt;y&lt;/code&gt; 的 &lt;strong&gt;子集&lt;/strong&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;strs = [&amp;ldquo;10&amp;rdquo;, &amp;ldquo;0001&amp;rdquo;, &amp;ldquo;111001&amp;rdquo;, &amp;ldquo;1&amp;rdquo;, &amp;ldquo;0&amp;rdquo;], m = 5, n = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;4&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;最多有 5 个 0 和 3 个 1 的最大子集是 {&amp;ldquo;10&amp;rdquo;,&amp;ldquo;0001&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;} ，因此答案是 4 。&lt;br /&gt;
其他满足题意但较小的子集包括 {&amp;ldquo;0001&amp;rdquo;,&amp;ldquo;1&amp;rdquo;} 和 {&amp;ldquo;10&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;0&amp;rdquo;} 。{&amp;ldquo;111001&amp;rdquo;} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;strs = [&amp;ldquo;10&amp;rdquo;, &amp;ldquo;0&amp;rdquo;, &amp;ldquo;1&amp;rdquo;], m = 1, n = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;最大的子集是 {&amp;ldquo;0&amp;rdquo;, &amp;ldquo;1&amp;rdquo;} ，所以答案是 2 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;注意&#34;&gt;注意：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= strs.length &amp;lt;= 600&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= strs[i].length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strs[i]&lt;/code&gt; 仅由 &lt;code&gt;&#39;0&#39;&lt;/code&gt; 和 &lt;code&gt;&#39;1&#39;&lt;/code&gt; 组成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m, n &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;对于数组中的每个元素，都有两种选择，要么其位于最大集合中，要么其不在最大子集中。所以该题为背包问题的一个变种，参考背包问题的求解思路，用动态规划求解。&lt;/p&gt;

&lt;p&gt;用 &lt;code&gt;dp[i][j][k]&lt;/code&gt; 表示当选择第 &lt;code&gt;i&lt;/code&gt; 个元素时，&lt;code&gt;0&lt;/code&gt; 的数量为 &lt;code&gt;j&lt;/code&gt;，而 &lt;code&gt;1&lt;/code&gt; 的数量为 &lt;code&gt;k&lt;/code&gt;，此时最大子集的大小。状态转移方程如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当前元素不可被选择时，即&lt;code&gt;j &amp;lt; zeros&lt;/code&gt; 或 &lt;code&gt;k &amp;lt; ones&lt;/code&gt;，&lt;code&gt;dp[i][j][k] = dp[i-1][j][k]&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;当当前元素可以被选择时，即&lt;code&gt;j &amp;gt;= zeros&lt;/code&gt; 且 &lt;code&gt;k &amp;gt;= ones&lt;/code&gt;，&lt;code&gt;dp[i][j][k] = max(dp[i-1][j-zeros][k-ones] + 1, dp[i-1][j][k])&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意到每次转移仅依赖与上一个元素选择的结果，可以缩减一维空间，降低空间复杂度，而依赖前值的问题可以通过倒序计算解决:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMaxForm&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strs&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strs&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;zeros&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ones&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;zeros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;ones&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zeros&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ones&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;zeros&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ones&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;] {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;zeros&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ones&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
				}
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*m*n)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(m*n)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 203. 移除链表元素</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-203.-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</link>
        <pubDate>Sat, 05 Jun 2021 22:26:23 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-203.-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/remove-linked-list-elements/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/remove-linked-list-elements/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个链表的头节点 &lt;code&gt;head&lt;/code&gt; 和一个整数 &lt;code&gt;val&lt;/code&gt; ，请你删除链表中所有满足 &lt;code&gt;Node.val == val&lt;/code&gt; 的节点，并返回 &lt;strong&gt;新的头节点&lt;/strong&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg&#34;, width=&#34;500px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;head = [1,2,6,3,4,5,6], val = 6&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[1,2,3,4,5]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;head = [], val = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;head = [7,7,7,7], val = 7&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;列表中的节点在范围 &lt;code&gt;[0, &lt;sup&gt;10&lt;/sup&gt;]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= Node.val &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= k &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;模拟&#34;&gt;模拟&lt;/h4&gt;

&lt;p&gt;遍历整个链表，遇到值为 &lt;code&gt;val&lt;/code&gt; 的结点，将其从链表中删除。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeElements&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;:  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
        }
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;head&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 160. 相交链表</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-160.-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link>
        <pubDate>Fri, 04 Jun 2021 17:53:32 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-160.-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/intersection-of-two-linked-lists/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你两个单链表的头节点 &lt;code&gt;headA&lt;/code&gt; 和 &lt;code&gt;headB&lt;/code&gt; ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 &lt;code&gt;null&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;图示两个链表在节点 &lt;code&gt;c1&lt;/code&gt; 开始相交：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;

&lt;p&gt;题目数据 &lt;strong&gt;保证&lt;/strong&gt; 整个链式结构中不存在环。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，函数返回结果后，链表必须 &lt;strong&gt;保持其原始结构&lt;/strong&gt;。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;Intersected at &amp;lsquo;8&amp;rsquo;&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。&lt;br /&gt;
从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。&lt;br /&gt;
在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png&#34;, width=&#34;350px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;Intersected at &amp;lsquo;2&amp;rsquo;&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。&lt;br /&gt;
从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。&lt;br /&gt;
在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png&#34;, width=&#34;200px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;null&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。&lt;br /&gt;
由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。&lt;br /&gt;
这两个链表不相交，因此返回 null 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;listA&lt;/code&gt; 中节点数目为 &lt;code&gt;m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listB&lt;/code&gt; 中节点数目为 &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= m, n &amp;lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= Node.val &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= skipA &amp;lt;= m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= skipB &amp;lt;= n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;listA&lt;/code&gt; 和 &lt;code&gt;listB&lt;/code&gt; 没有交点，&lt;code&gt;intersectVal&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;listA&lt;/code&gt; 和 &lt;code&gt;listB&lt;/code&gt; 有交点，&lt;code&gt;intersectVal == listA[skipA + 1] == listB[skipB + 1]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你能否设计一个时间复杂度 O(n) 、仅用 O(1) 内存的解决方案？&lt;/p&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希&#34;&gt;哈希&lt;/h4&gt;

&lt;p&gt;使用哈希表记录其中的一个链表结点，遍历另一个结点，在哈希表中查找该结点是否出现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getIntersectionNode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N+M)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;截断&#34;&gt;截断&lt;/h4&gt;

&lt;p&gt;两个链表相交，即尾部对齐，可以将较长的链表截断，使得两个链表的长度相同，就可以逐结点比较。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getIntersectionNode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ListNode&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 记长
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;lenA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;lenA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;lenB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;lenB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;nodeA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;headA&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;nodeB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;headB&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 对齐
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lenA&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lenB&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lenA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lenB&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;nodeA&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeA&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
		}
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lenB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lenA&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;nodeB&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeB&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 比较
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeA&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeB&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeA&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeB&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeB&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodeA&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N+M)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 525. 连续数组</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-525.-%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/</link>
        <pubDate>Thu, 03 Jun 2021 22:32:03 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-525.-%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/contiguous-array/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/contiguous-array/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定一个二进制数组 &lt;code&gt;nums&lt;/code&gt; , 找到含有相同数量的 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 的最长连续子数组，并返回该子数组的长度。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; nums = [0,1]&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; 2&lt;br /&gt;
&lt;strong&gt;说明:&lt;/strong&gt; [0, 1] 是具有相同数量0和1的最长连续子数组。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; nums = [0,1,0]&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; 2&lt;br /&gt;
&lt;strong&gt;说明:&lt;/strong&gt; &lt;a href=&#34;或 [1, 0]&#34; target=&#34;_blank&#34;&gt;0, 1&lt;/a&gt; 是具有相同数量0和1的最长连续子数组。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [23,2,6,4,7], k = 13&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums[i]&lt;/code&gt; 不是 &lt;code&gt;0&lt;/code&gt; 就是 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;前缀和-哈希&#34;&gt;前缀和+哈希&lt;/h4&gt;

&lt;p&gt;在一段区间内，对该段区间求和即可得出 &lt;code&gt;1&lt;/code&gt; 的数量，用区间长度减去 &lt;code&gt;1&lt;/code&gt; 的数量，就可以得到 &lt;code&gt;0&lt;/code&gt; 的数量，可以用前缀和降低时间复杂度。&lt;/p&gt;

&lt;p&gt;又结果要求对 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 的数量相等，所以前缀和可以只记录&lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 的数量差，当两个前缀数组的和相同时，表示该段数组中&lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 的数量相等。原问题转化为在一个数组中找到两个相同的数，且距离相差最大。&lt;/p&gt;

&lt;p&gt;可以利用哈希表保存每个数最早出现的位置，直到找到相同的数，其距离必然为最大，判断是否满足条件即可。&lt;/p&gt;

&lt;p&gt;注意，对 &lt;code&gt;0&lt;/code&gt; 需要特殊判断，可以预先在哈希表中存入其位置为 &lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMaxLength&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;) {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 523. 连续的子数组和</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-523.-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</link>
        <pubDate>Wed, 02 Jun 2021 22:51:40 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-523.-%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/continuous-subarray-sum/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/continuous-subarray-sum/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; 和一个整数 &lt;code&gt;k&lt;/code&gt; ，编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组：&lt;/p&gt;

&lt;p&gt;子数组大小 &lt;strong&gt;至少为 2&lt;/strong&gt; ，且
子数组元素总和为 &lt;code&gt;k&lt;/code&gt; 的倍数。
如果存在，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;如果存在一个整数 &lt;code&gt;n&lt;/code&gt; ，令整数 &lt;code&gt;x&lt;/code&gt; 符合 &lt;code&gt;x = n * k&lt;/code&gt; ，则称 &lt;code&gt;x&lt;/code&gt; 是 &lt;code&gt;k&lt;/code&gt; 的一个倍数。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [23,&lt;u&gt;2,4&lt;/u&gt;,6,7], k = 6&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;[2,4] 是一个大小为 2 的子数组，并且和为 6 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [&lt;u&gt;23,2,6,4,7&lt;/u&gt;], k = 6&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;[23, 2, 6, 4, 7] 是大小为 5 的子数组，并且和为 42 。&lt;br /&gt;
42 是 6 的倍数，因为 42 = 7 * 6 且 7 是一个整数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [23,2,6,4,7], k = 13&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= 10&lt;sup&gt;9&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= sum(nums[i]) &amp;lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= k &amp;lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;前缀和-哈希&#34;&gt;前缀和+哈希&lt;/h4&gt;

&lt;p&gt;要求解连续子区间的和，首先考虑利用前缀和来降低区间运算的复杂度，两个前缀数组和的差值是 &lt;code&gt;k&lt;/code&gt; 的倍数即可。&lt;/p&gt;

&lt;p&gt;又结果要求对 &lt;code&gt;k&lt;/code&gt; 取模为 &lt;code&gt;0&lt;/code&gt;，所以前缀和可以只需保留对 &lt;code&gt;k&lt;/code&gt; 取模的值，此时两个前缀数组的差值就变为了 &lt;code&gt;0&lt;/code&gt; ，原问题转化为在一个数组中找到两个相同的数，要求其距离大于 &lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;可以利用哈希表保存每个数最早出现的位置，直到找到相同的数，其距离必然为最大，判断是否满足条件即可。&lt;/p&gt;

&lt;p&gt;注意，对 &lt;code&gt;0&lt;/code&gt; 需要特殊判断，可以预先在哈希表中存入其位置为 &lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkSubarraySum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{
		&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pos&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(min(N,k))&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1744. 你能在你最喜欢的那天吃到你最喜欢的糖果吗？</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1744.-%E4%BD%A0%E8%83%BD%E5%9C%A8%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E9%82%A3%E5%A4%A9%E5%90%83%E5%88%B0%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%B3%96%E6%9E%9C%E5%90%97/</link>
        <pubDate>Tue, 01 Jun 2021 22:35:59 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1744.-%E4%BD%A0%E8%83%BD%E5%9C%A8%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E9%82%A3%E5%A4%A9%E5%90%83%E5%88%B0%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%B3%96%E6%9E%9C%E5%90%97/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个下标从 &lt;strong&gt;0&lt;/strong&gt; 开始的正整数数组 &lt;code&gt;candiesCount&lt;/code&gt; ，其中 &lt;code&gt;candiesCount[i]&lt;/code&gt; 表示你拥有的第 &lt;code&gt;i&lt;/code&gt; 类糖果的数目。同时给你一个二维数组 &lt;code&gt;queries&lt;/code&gt; ，其中 &lt;code&gt;queries[i] = [favoriteType&lt;sub&gt;i&lt;/sub&gt;, favoriteDay&lt;sub&gt;i&lt;/sub&gt;, dailyCap&lt;sub&gt;i&lt;/sub&gt;]&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;你按照如下规则进行一场游戏：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;你从第 &lt;code&gt;0&lt;/code&gt; 天开始吃糖果。&lt;/li&gt;
&lt;li&gt;你在吃完 &lt;strong&gt;所有&lt;/strong&gt; 第 &lt;code&gt;i - 1&lt;/code&gt; 类糖果之前，&lt;strong&gt;不能&lt;/strong&gt; 吃任何一颗第 &lt;code&gt;i&lt;/code&gt; 类糖果。&lt;/li&gt;
&lt;li&gt;在吃完所有糖果之前，你必须每天 &lt;strong&gt;至少&lt;/strong&gt; 吃 &lt;strong&gt;一颗&lt;/strong&gt; 糖果。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;请你构建一个布尔型数组 &lt;code&gt;answer&lt;/code&gt; ，满足 &lt;code&gt;answer.length == queries.length&lt;/code&gt; 。&lt;code&gt;answer[i]&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 的条件是：在每天吃 &lt;strong&gt;不超过&lt;/strong&gt; &lt;code&gt;dailyCap&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 颗糖果的前提下，你可以在第 &lt;code&gt;favoriteDay&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 天吃到第 &lt;code&gt;favoriteType&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 类糖果；否则 &lt;code&gt;answer[i]&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; 。注意，只要满足上面 3 条规则中的第二条规则，你就可以在同一天吃不同类型的糖果。&lt;/p&gt;

&lt;p&gt;请你返回得到的数组 &lt;code&gt;answer&lt;/code&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[true,false,true]&lt;br /&gt;
&lt;strong&gt;提示：&lt;/strong&gt;&lt;br /&gt;
1- 在第 0 天吃 2 颗糖果(类型 0），第 1 天吃 2 颗糖果（类型 0），第 2 天你可以吃到类型 0 的糖果。&lt;br /&gt;
2- 每天你最多吃 4 颗糖果。即使第 0 天吃 4 颗糖果（类型 0），第 1 天吃 4 颗糖果（类型 0 和类型 1），你也没办法在第 2 天吃到类型 4 的糖果。换言之，你没法在每天吃 4 颗糖果的限制下在第 2 天吃到第 4 类糖果。&lt;br /&gt;
3- 如果你每天吃 1 颗糖果，你可以在第 13 天吃到类型 2 的糖果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[false,true,true,false,false]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= candiesCount.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= candiesCount[i] &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= queries.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queries[i].length == 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= favoriteType&lt;sub&gt;i&lt;/sub&gt; &amp;lt; candiesCount.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= favoriteDay&lt;sub&gt;i&lt;/sub&gt; &amp;lt;= 10&lt;sup&gt;9&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= dailyCap&lt;sub&gt;i&lt;/sub&gt; &amp;lt;= 10&lt;sup&gt;9&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;前缀和&#34;&gt;前缀和&lt;/h4&gt;

&lt;p&gt;据题意可知，每天可以吃的糖果数量在 &lt;code&gt;1 ~ dailyCap&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 之间，若想在第 &lt;code&gt;favoriteDay&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 天可以吃到第 &lt;code&gt;favoriteType&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 类糖果，则必须将之前的类型全部吃完。&lt;/p&gt;

&lt;p&gt;从每天的可以吃的量可以推断出一个在第 &lt;code&gt;favoriteDay&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 天吃到糖果数量的一个范围，当该范围与小于等于第 &lt;code&gt;favoriteType&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 类糖果的总量的范围有交集时，则可以吃到；否则不能。&lt;/p&gt;

&lt;p&gt;因每次获取的是当前种类之前的糖果总量，采用前缀和降低时间复杂度。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canEat&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;candiesCount&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;candiesCount&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;candiesCount&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;candiesCount&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;canEat&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;EatMin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;EatMax&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
		&lt;span style=&#34;color:#75715e&#34;&gt;// 小于大的，大与小的有交集
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EatMin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EatMax&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;canEat&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;canEat&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;canEat&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;canEat&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canEat&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N+Q)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 342. 4的幂</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-342.-4%E7%9A%84%E5%B9%82/</link>
        <pubDate>Mon, 31 May 2021 22:42:12 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-342.-4%E7%9A%84%E5%B9%82/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/power-of-four/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/power-of-four/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定一个整数，写一个函数来判断它是否是 &lt;code&gt;4&lt;/code&gt; 的幂次方。如果是，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;整数 &lt;code&gt;n&lt;/code&gt; 是 &lt;code&gt;4&lt;/code&gt; 的幂次方需满足：存在整数 &lt;code&gt;x&lt;/code&gt; 使得 &lt;code&gt;n == 4x&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 16&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 5&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-2&lt;sup&gt;31&lt;/sup&gt; &amp;lt;= n &amp;lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;二进制&#34;&gt;二进制&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;2&lt;/code&gt; 的幂其二进制表示为最高位为 &lt;code&gt;1&lt;/code&gt;，后跟偶数个 &lt;code&gt;0&lt;/code&gt; 的数，每次向右移位两位，最终结果为 &lt;code&gt;1&lt;/code&gt;，即说明是 &lt;code&gt;4&lt;/code&gt; 的幂。&lt;/p&gt;

&lt;p&gt;另，&lt;code&gt;4&lt;/code&gt; 的幂为非负数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isPowerOfFour&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(logB)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 231. 2 的幂</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-231.-2-%E7%9A%84%E5%B9%82/</link>
        <pubDate>Sun, 30 May 2021 11:06:34 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-231.-2-%E7%9A%84%E5%B9%82/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/power-of-two/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/power-of-two/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个整数 &lt;code&gt;n&lt;/code&gt;，请你判断该整数是否是 &lt;code&gt;2&lt;/code&gt; 的幂次方。如果是，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;如果存在一个整数 &lt;code&gt;x&lt;/code&gt; 使得 &lt;code&gt;n == 2&lt;sup&gt;x&lt;/sup&gt;&lt;/code&gt; ，则认为 &lt;code&gt;n&lt;/code&gt; 是 &lt;code&gt;2&lt;/code&gt; 的幂次方。&lt;/p&gt;

&lt;h5 id=&#34;示例-1&#34;&gt;示例 1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;20 = 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 16&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;24 = 16&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-4&#34;&gt;示例 4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 4&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-5&#34;&gt;示例 5：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 5&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-2&lt;sup&gt;31&lt;/sup&gt; &amp;lt;= n &amp;lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;二进制&#34;&gt;二进制&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;2&lt;/code&gt; 的幂其二进制表示为最高位为 &lt;code&gt;1&lt;/code&gt;，其余位为 &lt;code&gt;0&lt;/code&gt; 的数，只有二进制位中 &lt;code&gt;1&lt;/code&gt; 的数量是 &lt;code&gt;1&lt;/code&gt;的数才满足条件。&lt;/p&gt;

&lt;p&gt;另，&lt;code&gt;2&lt;/code&gt; 的幂为非负数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isPowerOfTwo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(logB)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;优化&#34;&gt;优化&lt;/h5&gt;

&lt;p&gt;利用lowbit算法，消除最小为的 &lt;code&gt;1&lt;/code&gt; ，所得结果为 &lt;code&gt;0&lt;/code&gt; 即满足条件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isPowerOfTwo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(1)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 477. 汉明距离总和</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-477.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%80%BB%E5%92%8C/</link>
        <pubDate>Fri, 28 May 2021 17:37:15 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-477.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%80%BB%E5%92%8C/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/total-hamming-distance/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/total-hamming-distance/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;两个整数之间的&lt;font color=&#34;grey&#34;&gt;汉明距离&lt;/font&gt;指的是这两个数字对应二进制位不同的位置的数目。&lt;/p&gt;

&lt;p&gt;计算一个数组中，任意两个数之间汉明距离的总和。&lt;/p&gt;

&lt;h5 id=&#34;示例&#34;&gt;示例：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; x = 1, y = 4&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; 2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解释:&lt;/strong&gt; 在二进制表示中，4表示为0100，14表示为1110，2表示为0010。（这样表示是为了体现后四位之间关系）&lt;br /&gt;
所以答案为：&lt;br /&gt;
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;注意&#34;&gt;注意：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;数组中元素的范围为从 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;10&lt;sup&gt;9&lt;/sup&gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;数组的长度不超过 &lt;code&gt;10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;按位计数&#34;&gt;按位计数&lt;/h4&gt;

&lt;p&gt;当一对数字某一位上的两个数字不同时，汉明距离的总和才会加一。故可以统计数组中相同位的 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 的数量，相乘可统计当前位的汉明距离和。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;totalHammingDistance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;totalDistance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ones&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;zeros&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;zeros&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;ones&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;totalDistance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ones&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zeros&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;totalDistance&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*B)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 461. 汉明距离</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-461.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</link>
        <pubDate>Thu, 27 May 2021 23:17:23 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-461.-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/hamming-distance/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/hamming-distance/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;两个整数之间的&lt;font color=&#34;grey&#34;&gt;汉明距离&lt;/font&gt;指的是这两个数字对应二进制位不同的位置的数目。&lt;/p&gt;

&lt;p&gt;给出两个整数 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt;，计算它们之间的汉明距离。&lt;/p&gt;

&lt;h5 id=&#34;注意&#34;&gt;注意：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 ≤ x, y &amp;lt; 2&lt;sup&gt;31&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;示例&#34;&gt;示例：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; x = 1, y = 4&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; 2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解释:&lt;/strong&gt;&lt;br /&gt;
1   (0 0 0 1)&lt;br /&gt;
4   (0 1 0 0)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;↑&amp;nbsp;&amp;nbsp;&amp;nbsp;↑&lt;/p&gt;

&lt;p&gt;上面的箭头指出了对应二进制位不同的位置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;异或&#34;&gt;异或&lt;/h4&gt;

&lt;p&gt;异或操作可以得出标记出两个数二进制位不同的位置，然后统计数量即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hammingDistance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;distance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; ^ &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;distance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;distance&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(logB)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1190. 反转每对括号间的子串</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1190.-%E5%8F%8D%E8%BD%AC%E6%AF%8F%E5%AF%B9%E6%8B%AC%E5%8F%B7%E9%97%B4%E7%9A%84%E5%AD%90%E4%B8%B2/</link>
        <pubDate>Wed, 26 May 2021 23:59:13 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1190.-%E5%8F%8D%E8%BD%AC%E6%AF%8F%E5%AF%B9%E6%8B%AC%E5%8F%B7%E9%97%B4%E7%9A%84%E5%AD%90%E4%B8%B2/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给出一个字符串 &lt;code&gt;s&lt;/code&gt;（仅含有小写英文字母和括号）。&lt;/p&gt;

&lt;p&gt;请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。&lt;/p&gt;

&lt;p&gt;注意，您的结果中 &lt;strong&gt;不应&lt;/strong&gt; 包含任何括号。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;s = &amp;ldquo;(abcd)&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;&amp;ldquo;dcba&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;s = &amp;ldquo;(u(love)i)&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;&amp;ldquo;iloveu&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;s = &amp;ldquo;(ed(et(oc))el)&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;&amp;ldquo;leetcode&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-4&#34;&gt;示例 4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;s = &amp;ldquo;a(bcdefghijkl(mno)p)q&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;&amp;ldquo;apmnolkjihgfedcbq&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= s.length &amp;lt;= 2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 中只有小写英文字母和括号&lt;/li&gt;
&lt;li&gt;我们确保所有括号都是成对出现的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;栈&#34;&gt;栈&lt;/h4&gt;

&lt;p&gt;利用栈来进行每一次的反转：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当遇到非 &lt;code&gt;)&lt;/code&gt; 时，入栈；&lt;/li&gt;
&lt;li&gt;当遇到 &lt;code&gt;)&lt;/code&gt; 时，依次从栈中取出元素加入一个&lt;strong&gt;队列&lt;/strong&gt;，直到取出 &lt;code&gt;(&lt;/code&gt; 时为止，再将队列中的元素全部入栈，即先完成了内层括号的反转。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;依次执行上述逻辑，直到遍历到字符串结尾，栈中元素即为反转后的结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reverseParentheses&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;])
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;[:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;])
			&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[:len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[:len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
		&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;queue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;跳跃&#34;&gt;跳跃&lt;/h5&gt;

&lt;p&gt;通过模拟可以发现，每次奇数层的括号内元素需要反转，而偶数内不需要。&lt;/p&gt;

&lt;p&gt;当遇到一个括号时，可以跳转到其对应的另一个括号处，并改变遍历方向，即完成了反转。最终遍历的结果即是答案。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reverseParentheses&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:
			&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;:
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]] = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;[:len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;pair&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;])
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1707. 与数组中元素的最大异或值</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1707.-%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</link>
        <pubDate>Sun, 23 May 2021 09:17:20 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1707.-%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;困难&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个由非负整数组成的数组 &lt;code&gt;nums&lt;/code&gt; 。另有一个查询数组 &lt;code&gt;queries&lt;/code&gt; ，其中 &lt;code&gt;queries[i] = [x&lt;sub&gt;i&lt;/sub&gt;, m&lt;sub&gt;i&lt;/sub&gt;]&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;第 &lt;code&gt;i&lt;/code&gt; 个查询的答案是 &lt;code&gt;x&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 和任何 &lt;code&gt;nums&lt;/code&gt; 数组中不超过 &lt;code&gt;m&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 的元素按位异或（&lt;code&gt;XOR&lt;/code&gt;）得到的最大值。换句话说，答案是 &lt;code&gt;max(nums[j] XOR x&lt;sub&gt;i&lt;/sub&gt;)&lt;/code&gt; ，其中所有 &lt;code&gt;j&lt;/code&gt; 均满足 &lt;code&gt;nums[j] &amp;lt;= m&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 。如果 &lt;code&gt;nums&lt;/code&gt; 中的所有元素都大于 &lt;code&gt;m&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt;，最终答案就是 &lt;code&gt;-1&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;返回一个整数数组 &lt;code&gt;answer&lt;/code&gt; 作为查询的答案，其中 &lt;code&gt;answer.length == queries.length&lt;/code&gt; 且 &lt;code&gt;answer[i]&lt;/code&gt; 是第 &lt;code&gt;i&lt;/code&gt; 个查询的答案。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[3,3,7]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
1) 0 和 1 是仅有的两个不超过 1 的整数。0 XOR 3 = 3 而 1 XOR 3 = 2 。二者中的更大值是 3 。&lt;br /&gt;
2) 1 XOR 2 = 3.&lt;br /&gt;
3) 5 XOR 2 = 7.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[15,-1,5]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length, queries.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queries[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[j], x&lt;sub&gt;i&lt;/sub&gt;, m&lt;sub&gt;i&lt;/sub&gt; &amp;lt;= 10&lt;sup&gt;9&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;trie树&#34;&gt;Trie树&lt;/h4&gt;

&lt;p&gt;同421题的思路，采用二进制形的形式，生成一个包含数组中所有数字的Trie树，通过贪心策略求解满足条件的那个最大值。&lt;/p&gt;

&lt;p&gt;因为对元素的取值范围有限制，所以每次需要判断代表 &lt;code&gt;1&lt;/code&gt; 的路径能否可达，可以在每个节点记录通过当前路径的最小值，其与 &lt;code&gt;m&lt;sub&gt;i&lt;/sub&gt;&lt;/code&gt; 比较即可得到路径是否可达。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maximizeXor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 生成Trie数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;{
						&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
						&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
						&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;,
					}
				}
				&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;
				}
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;{
						&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
						&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
						&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;,
					}
				}
				&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;
				}
			}
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt;))
	&lt;span style=&#34;color:#75715e&#34;&gt;// 求最大值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 优先取1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
					&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt;
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
				}
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 优先取0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Min&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
					&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt;
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
				}
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]^&lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*logB)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N*logB)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1035. 不相交的线</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1035.-%E4%B8%8D%E7%9B%B8%E4%BA%A4%E7%9A%84%E7%BA%BF/</link>
        <pubDate>Fri, 21 May 2021 23:42:03 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1035.-%E4%B8%8D%E7%9B%B8%E4%BA%A4%E7%9A%84%E7%BA%BF/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/uncrossed-lines/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/uncrossed-lines/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;在两条独立的水平线上按给定的顺序写下 &lt;code&gt;nums1&lt;/code&gt; 和 &lt;code&gt;nums2&lt;/code&gt; 中的整数。&lt;/p&gt;

&lt;p&gt;现在，可以绘制一些连接两个数字 &lt;code&gt;nums1[i]&lt;/code&gt; 和 &lt;code&gt;nums2[j]&lt;/code&gt; 的直线，这些直线需要同时满足满足：&lt;/p&gt;

&lt;p&gt; &lt;code&gt;nums1[i] == nums2[j]&lt;/code&gt;
且绘制的直线不与任何其他连线（非水平线）相交。
请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。&lt;/p&gt;

&lt;p&gt;以这种方法绘制线条，并返回可以绘制的最大连线数。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/28/142.png&#34; width=&#34;100px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums1 = [1,4,2], nums2 = [1,2,4]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;可以画出两条不交叉的线，如上图所示。&lt;br /&gt;
但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3:&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums1.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums2.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums1[i], nums2[i] &amp;lt;= 2000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;最长公共子序列的变种题目，其思路也相同，用动态规划解决。用 &lt;code&gt;dp[i][j]&lt;/code&gt; 表示 &lt;code&gt;nums1[0:i]&lt;/code&gt; 和 &lt;code&gt;nums2[0:j]&lt;/code&gt; 两个子数组的最大连接数，状态转移方程如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;nums1[i] = nums2[j]&lt;/code&gt; 时，&lt;code&gt;dp[i][j] = dp[i-1][j-1] + 1&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当 &lt;code&gt;nums1[i] != nums2[j]&lt;/code&gt; 时， &lt;code&gt;dp[i][j] = max(dp[i-1][j], dp[i][j-1])&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxUncrossedLines&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;, make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;, make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
				}
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums1&lt;/span&gt;)][len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums2&lt;/span&gt;)]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(NM)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(NM)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 692. 前K个高频单词</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-692.-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%8D%95%E8%AF%8D/</link>
        <pubDate>Thu, 20 May 2021 21:45:44 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-692.-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%8D%95%E8%AF%8D/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/top-k-frequent-words/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/top-k-frequent-words/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给一非空的单词列表，返回前 &lt;em&gt;k&lt;/em&gt; 个出现次数最多的单词。&lt;/p&gt;

&lt;p&gt;返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; [&amp;ldquo;i&amp;rdquo;, &amp;ldquo;love&amp;rdquo;, &amp;ldquo;leetcode&amp;rdquo;, &amp;ldquo;i&amp;rdquo;, &amp;ldquo;love&amp;rdquo;, &amp;ldquo;coding&amp;rdquo;], k = 2&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; [&amp;ldquo;i&amp;rdquo;, &amp;ldquo;love&amp;rdquo;]&lt;br /&gt;
&lt;strong&gt;解析:&lt;/strong&gt; &amp;ldquo;i&amp;rdquo; 和 &amp;ldquo;love&amp;rdquo; 为出现次数最多的两个单词，均为2次。&lt;br /&gt;
     注意，按字母顺序 &amp;ldquo;i&amp;rdquo; 在 &amp;ldquo;love&amp;rdquo; 之前。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; [&amp;ldquo;the&amp;rdquo;, &amp;ldquo;day&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;sunny&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;sunny&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;is&amp;rdquo;], k = 4&lt;br /&gt;
&lt;strong&gt;输出:&lt;/strong&gt; [&amp;ldquo;the&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;sunny&amp;rdquo;, &amp;ldquo;day&amp;rdquo;]&lt;br /&gt;
&lt;strong&gt;解析:&lt;/strong&gt; &amp;ldquo;the&amp;rdquo;, &amp;ldquo;is&amp;rdquo;, &amp;ldquo;sunny&amp;rdquo; 和 &amp;ldquo;day&amp;rdquo; 是出现次数最多的四个单词，&lt;br /&gt;
    出现次数依次为 4, 3, 2 和 1 次。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;注意&#34;&gt;注意：&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;假定 &lt;em&gt;k&lt;/em&gt; 总为有效值， &lt;em&gt;1 ≤ k ≤&lt;/em&gt; 集合元素数。&lt;/li&gt;
&lt;li&gt;输入的单词均由小写字母组成。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;扩展联系&#34;&gt;扩展联系：&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;尝试以 &lt;em&gt;O(n log k)&lt;/em&gt; 时间复杂度和 &lt;em&gt;O(n)&lt;/em&gt; 空间复杂度解决。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希&#34;&gt;哈希&lt;/h4&gt;

&lt;p&gt;遍历单词列表，记录每个单词的频率，然后经一次排序即可找出结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;topKFrequent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;wordsCnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;words&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;wordsCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;wordsCnt&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wordsCnt&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Slice&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wordsCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wordsCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wordsCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wordsCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
		}
	})
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uniqWords&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(NlogN)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1442. 形成两个异或相等数组的三元组数目</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1442.-%E5%BD%A2%E6%88%90%E4%B8%A4%E4%B8%AA%E5%BC%82%E6%88%96%E7%9B%B8%E7%AD%89%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%89%E5%85%83%E7%BB%84%E6%95%B0%E7%9B%AE/</link>
        <pubDate>Tue, 18 May 2021 22:40:57 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1442.-%E5%BD%A2%E6%88%90%E4%B8%A4%E4%B8%AA%E5%BC%82%E6%88%96%E7%9B%B8%E7%AD%89%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%89%E5%85%83%E7%BB%84%E6%95%B0%E7%9B%AE/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;现需要从数组中取三个下标 &lt;code&gt;i&lt;/code&gt;、&lt;code&gt;j&lt;/code&gt; 和 &lt;code&gt;k&lt;/code&gt; ，其中 (&lt;code&gt;0 &amp;lt;= i &amp;lt; j &amp;lt;= k &amp;lt; arr.length)&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 定义如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]&lt;/code&gt;
注意：&lt;strong&gt;^&lt;/strong&gt; 表示 &lt;strong&gt;按位异或&lt;/strong&gt; 操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;请返回能够令 &lt;code&gt;a == b&lt;/code&gt; 成立的三元组 (&lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt; , &lt;code&gt;k&lt;/code&gt;) 的数目。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [2,3,1,6,7]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;4&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;满足题意的三元组分别是 (0,1,2), (0,2,2), (2,3,4) 以及 (2,4,4)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-2&#34;&gt;示例 2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [1,1,1,1,1]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-3&#34;&gt;示例 3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [2,3]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-4&#34;&gt;示例 4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [1,3,5,7,9]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例-5&#34;&gt;示例 5：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [7,11,12,9,5,2,7,17,22]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr.length &amp;lt;= 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr[i] &amp;lt;= 10&lt;sup&gt;8&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;暴力求解&#34;&gt;暴力求解&lt;/h4&gt;

&lt;p&gt;枚举所有可能的 &lt;code&gt;i&lt;/code&gt;、&lt;code&gt;j&lt;/code&gt; 和 &lt;code&gt;k&lt;/code&gt; ，求解所有符合条件的三元组数量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countTriplets&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; ^= &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
			&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; ^= &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;]
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
				}
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N&lt;sup&gt;3&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;异或性质&#34;&gt;异或性质&lt;/h4&gt;

&lt;p&gt;两个数异或为 &lt;code&gt;0&lt;/code&gt; ，则这两个数一定相等，反之亦然。&lt;/p&gt;

&lt;p&gt;可以利用此条性质，寻找一段异或为 &lt;code&gt;0&lt;/code&gt; 的子数组，则以其中任意一点分割得到的两个子数组，其异或结果必然相等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countTriplets&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; ^= &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Leetcode 993. 二叉树的堂兄弟节点</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-993.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%A0%82%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9/</link>
        <pubDate>Mon, 17 May 2021 09:29:10 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-993.-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%A0%82%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/cousins-in-binary-tree/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/cousins-in-binary-tree/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;在二叉树中，根节点位于深度 &lt;code&gt;0&lt;/code&gt; 处，每个深度为 &lt;code&gt;k&lt;/code&gt; 的节点的子节点位于深度 &lt;code&gt;k+1&lt;/code&gt; 处。&lt;/p&gt;

&lt;p&gt;如果二叉树的两个节点深度相同，但 &lt;strong&gt;父节点不同&lt;/strong&gt; ，则它们是一对堂兄弟节点。&lt;/p&gt;

&lt;p&gt;我们给出了具有唯一值的二叉树的根节点 &lt;code&gt;root&lt;/code&gt; ，以及树中两个不同节点的值 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;只有与值 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 对应的节点是堂兄弟节点时，才返回 &lt;code&gt;true&lt;/code&gt; 。否则，返回 &lt;code&gt;false。&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-01.png&#34;, width=&#34;180px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root = [1,2,3,4], x = 4, y = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-02.png&#34;, width=&#34;201px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root = [1,2,3,null,4,null,5], x = 5, y = 4&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-03.png&#34;, width=&#34;156px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root = [1,2,3,null,4], x = 2, y = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;二叉树的节点数介于 &lt;code&gt;2&lt;/code&gt; 到 &lt;code&gt;100&lt;/code&gt; 之间。&lt;/li&gt;
&lt;li&gt;每个节点的值都是唯一的、范围为 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;100&lt;/code&gt; 的整数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;搜索&#34;&gt;搜索&lt;/h4&gt;

&lt;p&gt;记录两个结点的父节点和高度，然后比较即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isCousins&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;parents&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;heights&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;heights&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;heights&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;parents&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;parents&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parents&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parents&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heights&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heights&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 421. 数组中两个数的最大异或值</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-421.-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</link>
        <pubDate>Sun, 16 May 2021 22:31:57 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-421.-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，返回 &lt;code&gt;nums[i] XOR nums[j]&lt;/code&gt; 的最大运算结果，其中 &lt;code&gt;0 ≤ i ≤ j &amp;lt; n&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你可以在 &lt;code&gt;O(n)&lt;/code&gt; 的时间解决这个问题吗？&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [3,10,5,25,2,8]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;28&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;最大运算结果是 5 XOR 25 = 28.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [0]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [2,4]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例4&#34;&gt;示例4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [8,10,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例5&#34;&gt;示例5：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [14,70,53,83,49,91,36,80,92,51,66,70]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;127&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 2 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= 2&lt;sup&gt;32&lt;/sup&gt; - 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;暴力求解&#34;&gt;暴力求解&lt;/h4&gt;

&lt;p&gt;枚举所有的 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt;，求解比较得出最大值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMaximumXOR&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] ^ &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;trie树&#34;&gt;Trie树&lt;/h4&gt;

&lt;p&gt;采用二进制形的形式，生成一个包含数组中所有数字的Trie树，通过贪心策略可以得到与某个数异或最大值。依次枚举每一个数，即可得到全局最大值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findMaximumXOR&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 生成Trie数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; = new(&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;)
				}
				&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; = new(&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;)
				}
				&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 求最大值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;localMax&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
					&lt;span style=&#34;color:#a6e22e&#34;&gt;localMax&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt;
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;
				}
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;
					&lt;span style=&#34;color:#a6e22e&#34;&gt;localMax&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bit&lt;/span&gt;
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
				}
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;localMax&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;localMax&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*logB)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N*logB)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1269. 停在原地的方案数</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1269.-%E5%81%9C%E5%9C%A8%E5%8E%9F%E5%9C%B0%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</link>
        <pubDate>Thu, 13 May 2021 23:12:12 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1269.-%E5%81%9C%E5%9C%A8%E5%8E%9F%E5%9C%B0%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;困难&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;有一个长度为 &lt;code&gt;arrLen&lt;/code&gt; 的数组，开始有一个指针在索引 &lt;code&gt;0&lt;/code&gt; 处。&lt;/p&gt;

&lt;p&gt;每一步操作中，你可以将指针向左或向右移动 &lt;code&gt;1&lt;/code&gt; 步，或者停在原地（指针不能被移动到数组范围外）。&lt;/p&gt;

&lt;p&gt;给你两个整数 &lt;code&gt;steps&lt;/code&gt; 和 &lt;code&gt;arrLen&lt;/code&gt; ，请你计算并返回：在恰好执行 &lt;code&gt;steps&lt;/code&gt; 次操作以后，指针仍然指向索引 &lt;code&gt;0&lt;/code&gt; 处的方案数。&lt;/p&gt;

&lt;p&gt;由于答案可能会很大，请返回方案数 模 &lt;code&gt;10^9 + 7&lt;/code&gt; 后的结果。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;steps = 3, arrLen = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;4&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;3 步后，总共有 4 种不同的方法可以停在索引 0 处。&lt;br /&gt;
向右，向左，不动&lt;br /&gt;
不动，向右，向左&lt;br /&gt;
向右，不动，向左&lt;br /&gt;
不动，不动，不动&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;steps = 2, arrLen = 4&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;2 步后，总共有 2 种不同的方法可以停在索引 0 处。&lt;br /&gt;
向右，向左&lt;br /&gt;
不动，不动&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2-1&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;steps = 4, arrLen = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= steps &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arrLen &amp;lt;= 10^6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;由于方案数量很多，记录中间结果并重复使用将有效的降低时间复杂度，考虑用动态规划求解。&lt;/p&gt;

&lt;p&gt;用 &lt;code&gt;dp[i][j]&lt;/code&gt; 表示指针移动 &lt;code&gt;i&lt;/code&gt; 次到达下标 &lt;code&gt;j&lt;/code&gt; 的方案数量，其来源分为三部分：
- 上一步到达下标 &lt;code&gt;j-1&lt;/code&gt; 处，此时移动了 &lt;code&gt;i-1&lt;/code&gt; 次，
- 上一步已经到达 &lt;code&gt;j&lt;/code&gt; 处，移动了 &lt;code&gt;i-1&lt;/code&gt; 次
- 上一步到达 &lt;code&gt;j+1&lt;/code&gt; 处，移动了 &lt;code&gt;i-1&lt;/code&gt; 次&lt;/p&gt;

&lt;p&gt;根据以上情况得到状态转移方程： &lt;code&gt;dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i-1][j+1]&lt;/code&gt;，随即可得出结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numWays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arrLen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_000_000_007&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrLen&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;arrLen&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 计算到i-1步为止
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;// 移动0次
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;// 初始在0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; cap(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 左边越界
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 右边越界
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; = ((&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrLen&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(steps*min(steps, arrLen))&lt;/li&gt;
&lt;li&gt;空间复杂度：O(steps*min(steps, arrLen))&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;优化&#34;&gt;优化&lt;/h5&gt;

&lt;p&gt;由于下一行的状态转移计算仅依赖于上一行，所以可以仅用一个数组，降低空间复杂度&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numWays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arrLen&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_000_000_007&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrLen&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;arrLen&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 移动0次
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;// 初始在0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;steps&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 左边越界
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;far&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 右边越界
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; = ((&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrLen&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MOD&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(steps*min(steps, arrLen))&lt;/li&gt;
&lt;li&gt;空间复杂度：O(min(steps, arrLen))&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1310. 子数组异或查询</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1310.-%E5%AD%90%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%9F%A5%E8%AF%A2/</link>
        <pubDate>Wed, 12 May 2021 23:14:18 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1310.-%E5%AD%90%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%9F%A5%E8%AF%A2/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/xor-queries-of-a-subarray/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/xor-queries-of-a-subarray/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;有一个正整数数组 &lt;code&gt;arr&lt;/code&gt;，现给你一个对应的查询数组 &lt;code&gt;queries&lt;/code&gt;，其中 &lt;code&gt;queries[i] = [Li, Ri]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;对于每个查询 &lt;code&gt;i&lt;/code&gt;，请你计算从 &lt;code&gt;Li&lt;/code&gt; 到 &lt;code&gt;Ri&lt;/code&gt; 的 &lt;strong&gt;XOR&lt;/strong&gt; 值（即 &lt;code&gt;arr[Li] xor arr[Li+1] xor ... xor arr[Ri]&lt;/code&gt;）作为本次查询的结果。&lt;/p&gt;

&lt;p&gt;并返回一个包含给定查询 &lt;code&gt;queries&lt;/code&gt; 所有结果的数组。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[2,7,14,8]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
数组中元素的二进制表示形式是：&lt;br /&gt;
1 = 0001&lt;br /&gt;
3 = 0011&lt;br /&gt;
4 = 0100&lt;br /&gt;
8 = 1000&lt;br /&gt;
查询的 XOR 值为：&lt;br /&gt;
[0,1] = 1 xor 3 = 2&lt;br /&gt;
[1,2] = 3 xor 4 = 7&lt;br /&gt;
[0,3] = 1 xor 3 xor 4 xor 8 = 14&lt;br /&gt;
[3,3] = 8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[8,0,4,4]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr.length &amp;lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= arr[i] &amp;lt;= 10&lt;sup&gt;9&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= queries.length &amp;lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queries[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= queries[i][0] &amp;lt;= queries[i][1] &amp;lt; arr.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;暴力&#34;&gt;暴力&lt;/h4&gt;

&lt;p&gt;依照题意，直接对查询下标范围内的所有数进行异或运算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xorQueries&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; ^= &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*M)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;消除&#34;&gt;消除&lt;/h4&gt;

&lt;p&gt;利用异或运算的 &lt;strong&gt;自反性&lt;/strong&gt;，记录前缀数组的异或值，然后通过异或操作对前缀数组的值进行消除，即可以 &lt;strong&gt;O(1)&lt;/strong&gt; 的时间求得结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xorQueries&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]^&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;])
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queries&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]^&lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N+M)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1734. 解码异或后的排列</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1734.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%8E%92%E5%88%97/</link>
        <pubDate>Tue, 11 May 2021 19:55:25 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1734.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%8E%92%E5%88%97/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/decode-xored-permutation/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/decode-xored-permutation/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个整数数组 &lt;code&gt;perm&lt;/code&gt; ，它是前 &lt;code&gt;n&lt;/code&gt; 个正整数的排列，且 &lt;code&gt;n&lt;/code&gt; 是个 &lt;strong&gt;奇数&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;它被加密成另一个长度为 &lt;code&gt;n - 1&lt;/code&gt; 的整数数组 &lt;code&gt;encoded&lt;/code&gt; ，满足 &lt;code&gt;encoded[i] = perm[i] XOR perm[i + 1]&lt;/code&gt; 。比方说，如果 &lt;code&gt;perm = [1,3,2]&lt;/code&gt; ，那么 &lt;code&gt;encoded = [2,1]&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;给你 &lt;code&gt;encoded&lt;/code&gt; 数组，请你返回原始数组 &lt;code&gt;perm&lt;/code&gt; 。题目保证答案存在且唯一。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;encoded = [3,1]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[1,2,3]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;如果 perm = [1,2,3] ，那么 encoded = [1 XOR 2,2 XOR 3] = [3,1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;encoded = [6,5,4,6]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[2,4,1,5,3]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;3 &amp;lt;= n &amp;lt; 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 是奇数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encoded.length == n - 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;消除&#34;&gt;消除&lt;/h4&gt;

&lt;p&gt;有题意可知，只要知道原数组 &lt;code&gt;perm&lt;/code&gt; 的一个元素，就可以推导得出整个数组，而原数组的所有元素均已知，所以可以求得所有元素的异或值 &lt;code&gt;1⊕2⊕…⊕n&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;由 &lt;code&gt;encoded[i] = perm[i]⊕[i+1]&lt;/code&gt; 且 &lt;code&gt;n&lt;/code&gt;为奇数，可以进一步得到 &lt;code&gt;perm[1]⊕perm[2]⊕…⊕perm[n-1] = encoded[1]⊕encoded[3]⊕...⊕encoded[n-2]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;将上述两个结果异或即可消除除 &lt;code&gt;perm[0]&lt;/code&gt; 外的所有值，然后就可以推导 &lt;code&gt;perm&lt;/code&gt; 了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;encoded&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;perm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;encoded&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; cap(&lt;span style=&#34;color:#a6e22e&#34;&gt;perm&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt; ^= &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;encoded&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt; ^= &lt;span style=&#34;color:#a6e22e&#34;&gt;encoded&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;perm&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;perm&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tmp&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encoded&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;perm&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;perm&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;perm&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]^&lt;span style=&#34;color:#a6e22e&#34;&gt;encoded&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;])
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;perm&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 872. 叶子相似的树</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-872.-%E5%8F%B6%E5%AD%90%E7%9B%B8%E4%BC%BC%E7%9A%84%E6%A0%91/</link>
        <pubDate>Mon, 10 May 2021 23:30:50 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-872.-%E5%8F%B6%E5%AD%90%E7%9B%B8%E4%BC%BC%E7%9A%84%E6%A0%91/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/leaf-similar-trees/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/leaf-similar-trees/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;请考虑一棵二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 &lt;em&gt;叶值序列&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png&#34; width=&#34;300px&#34;&gt;&lt;/p&gt;

&lt;p&gt;举个例子，如上图所示，给定一棵叶值序列为 &lt;code&gt;(6, 7, 4, 9, 8)&lt;/code&gt; 的树。&lt;/p&gt;

&lt;p&gt;如果有两棵二叉树的叶值序列是相同，那么我们就认为它们是 *叶相似* 的。&lt;/p&gt;

&lt;p&gt;如果给定的两个根结点分别为 &lt;code&gt;root1&lt;/code&gt; 和 &lt;code&gt;root2&lt;/code&gt; 的树是叶相似的，则返回 &lt;code&gt;true&lt;/code&gt;；否则返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg&#34; width=&#34;600px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root1 = [1], root2 = [1]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root1 = [1], root2 = [2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例4&#34;&gt;示例4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root1 = [1,2], root2 = [2,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例5&#34;&gt;示例5：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg&#34;, width=&#34;450px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root1 = [1,2,3], root2 = [1,3,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;给定的两棵树可能会有 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;200&lt;/code&gt; 个结点。&lt;/li&gt;
&lt;li&gt;给定的两棵树上的值介于 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;200&lt;/code&gt; 之间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;直接求解&#34;&gt;直接求解&lt;/h4&gt;

&lt;p&gt;分别求出两棵树的*叶值序列*，然后逐一进行比较即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leafSimilar&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;root2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;leafs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;leafs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leafs&lt;/span&gt; = append(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leafs&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;leafs&lt;/span&gt;)
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;leafs&lt;/span&gt;)
			}
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;leafs1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leafs1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;leafs2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leafs2&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;leafs1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;leafs2&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leafs1&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leafs1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leafs2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N&lt;sub&gt;1&lt;/sub&gt;+N&lt;sub&gt;2&lt;/sub&gt;)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N&lt;sub&gt;1&lt;/sub&gt;+N&lt;sub&gt;2&lt;/sub&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1486. 数组异或操作</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1486.-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Fri, 07 May 2021 17:05:42 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1486.-%E6%95%B0%E7%BB%84%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/xor-operation-in-an-array/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/xor-operation-in-an-array/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你两个整数，&lt;code&gt;n&lt;/code&gt; 和 &lt;code&gt;start&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;数组 &lt;code&gt;nums&lt;/code&gt; 定义为：&lt;code&gt;nums[i] = start + 2*i&lt;/code&gt;（下标从 &lt;code&gt;0&lt;/code&gt; 开始）且 &lt;code&gt;n == nums.length&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;请返回 &lt;code&gt;nums&lt;/code&gt; 中所有元素按位异或（&lt;strong&gt;XOR&lt;/strong&gt;）后得到的结果。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 5, start = 0&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;8&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。&lt;br /&gt;
     &amp;ldquo;^&amp;rdquo; 为按位异或 XOR 运算符。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 4, start = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;8&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 1, start = 7&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例4&#34;&gt;示例4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;n = 10, start = 5&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= start &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n == nums.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;模拟&#34;&gt;模拟&lt;/h4&gt;

&lt;p&gt;按照数组生成方式生成数组，然后依次异或求解，由于每个元素只用依次，所以可以省略掉数组空间&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xorOperation&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; ^= &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1720. 解码异或后的数组</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1720.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84/</link>
        <pubDate>Thu, 06 May 2021 23:09:07 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1720.-%E8%A7%A3%E7%A0%81%E5%BC%82%E6%88%96%E5%90%8E%E7%9A%84%E6%95%B0%E7%BB%84/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/decode-xored-array/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/decode-xored-array/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;未知&lt;/strong&gt; 整数数组 &lt;code&gt;arr&lt;/code&gt; 由 &lt;code&gt;n&lt;/code&gt; 个非负整数组成。&lt;/p&gt;

&lt;p&gt;经编码后变为长度为 &lt;code&gt;n - 1&lt;/code&gt; 的另一个整数数组 e&lt;code&gt;ncoded&lt;/code&gt; ，其中 &lt;code&gt;encoded[i] = arr[i] XOR arr[i + 1]&lt;/code&gt; 。例如，&lt;code&gt;arr = [1,0,2,1]&lt;/code&gt; 经编码后得到 &lt;code&gt;encoded = [1,2,3]&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;给你编码后的数组 &lt;code&gt;encoded&lt;/code&gt; 和原数组 &lt;code&gt;arr&lt;/code&gt; 的第一个元素 &lt;code&gt;first&lt;/code&gt;（&lt;code&gt;arr[0]&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;请解码返回原数组 &lt;code&gt;arr&lt;/code&gt; 。可以证明答案存在并且是唯一的。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;encoded = [1,2,3], first = 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[1,0,2,1]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;若 arr = [1,0,2,1] ，那么 first = 1 且 encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;encoded = [6,2,7,3], first = 4&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[4,2,0,7,4]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= n &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encoded.length == n - 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= encoded[i] &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= first &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;数学&#34;&gt;数学&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;b&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;a⊕b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;通过上表可以推出: &lt;code&gt;a = b ⊕ a⊕b&lt;/code&gt;，从而得到推导方程：&lt;code&gt;arr[i+1] = arr[i] ⊕ encoded[i]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;encoded&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;encoded&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encoded&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] ^ &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 740. 删除并获得点数</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-740.-%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/</link>
        <pubDate>Wed, 05 May 2021 23:47:15 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-740.-%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%82%B9%E6%95%B0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/delete-and-earn/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/delete-and-earn/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，你可以对它进行一些操作。&lt;/p&gt;

&lt;p&gt;每次操作中，选择任意一个 &lt;code&gt;nums[i]&lt;/code&gt; ，删除它并获得 &lt;code&gt;nums[i]&lt;/code&gt; 的点数。之后，你必须删除&lt;strong&gt;每个&lt;/strong&gt;等于 &lt;code&gt;nums[i] - 1&lt;/code&gt; 或 &lt;code&gt;nums[i] + 1&lt;/code&gt; 的元素。&lt;/p&gt;

&lt;p&gt;开始你拥有 &lt;code&gt;0&lt;/code&gt; 个点数。返回你能通过这些操作获得的最大点数。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [3,4,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;6&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;删除 4 获得 4 个点数，因此 3 也被删除。&lt;br /&gt;
之后，删除 2 获得 2 个点数。总共获得 6 个点数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [2,2,3,3,3,4]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;9&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;删除 3 获得 3 个点数，接着要删除两个 2 和 4 。&lt;br /&gt;
之后，再次删除 3 获得 3 个点数，再次删除 3 获得 3 个点数。&lt;br /&gt;
总共获得 9 个点数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 2 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums[i] &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;典型的求最优解的问题，考虑用动态规划求解。&lt;/p&gt;

&lt;p&gt;当要删除一个数字 &lt;code&gt;i&lt;/code&gt; 时，需将删除所有的 &lt;code&gt;i&lt;/code&gt; 全部从数组中删除，记其数量为 &lt;code&gt;cnt&lt;/code&gt;, 同时可以获得点数 &lt;code&gt;i * cnt&lt;/code&gt;，将删除每个数获得的点数用 &lt;code&gt;map&lt;/code&gt; 记录下来。&lt;br /&gt;
用 &lt;code&gt;dp[i]&lt;/code&gt; 表示在数组中，当前满足所有的数字均小于时的最大点数，则容易得到转移方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[0] = 0, dp[1] = map[i]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dp[i] = max(dp[i-1], dp[i-2]+map[i])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;执行到整个数组的最大值时为止，得到最大点数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deleteAndEarn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;maxNum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxNum&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;maxNum&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;maxNum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxNum&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;maxNum&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(max(num[i]))&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 7. 整数反转</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-7.-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</link>
        <pubDate>Mon, 03 May 2021 11:57:39 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-7.-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/reverse-integer/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/reverse-integer/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个 32 位的有符号整数 &lt;code&gt;x&lt;/code&gt; ，返回将 &lt;code&gt;x&lt;/code&gt; 中的数字部分反转后的结果。&lt;/p&gt;

&lt;p&gt;如果反转后整数超过 32 位的有符号整数的范围 &lt;code&gt;[−2&lt;sup&gt;31&lt;/sup&gt;,  2&lt;sup&gt;31&lt;/sup&gt; − 1]&lt;/code&gt; ，就返回 0。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;假设环境不允许存储 64 位整数（有符号或无符号）。&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;x = 123&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;321&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;x = -123&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;-321&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;x = 120&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;21&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例4&#34;&gt;示例4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;x = 0&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-231 &amp;lt;= x &amp;lt;= 231 - 1&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;双指针&#34;&gt;双指针&lt;/h4&gt;

&lt;p&gt;直接数字逐位反转，当数字为十位数时，32位整数无法存储，需要做一次溢位判断：&lt;br /&gt;
可以将数字分为&lt;strong&gt;前9位数&lt;/strong&gt;与&lt;strong&gt;第10位数&lt;/strong&gt;进行比较，不再临界值的范围内，说明溢出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reverse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxInt32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxInt32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxInt32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
			(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MinInt32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MinInt32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MinInt32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(logB)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 554. 砖墙</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-554.-%E7%A0%96%E5%A2%99/</link>
        <pubDate>Sun, 02 May 2021 10:03:17 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-554.-%E7%A0%96%E5%A2%99/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/brick-wall/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/brick-wall/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;你的面前有一堵矩形的、由 &lt;code&gt;n&lt;/code&gt; 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。&lt;/p&gt;

&lt;p&gt;你现在要画一条 &lt;strong&gt;自顶向下&lt;/strong&gt; 的、穿过 &lt;strong&gt;最少&lt;/strong&gt; 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。&lt;strong&gt;你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;给你一个二维数组 &lt;code&gt;wall&lt;/code&gt; ，该数组包含这堵墙的相关信息。其中，&lt;code&gt;wall[i]&lt;/code&gt; 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 &lt;strong&gt;穿过的砖块数量最少&lt;/strong&gt; ，并且返回 &lt;strong&gt;穿过的砖块数量&lt;/strong&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg&#34;, width=&#34;493px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;wall = [[1],[1],[1]]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == wall.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= wall[i].length &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= sum(wall[i].length) &amp;lt;= 2 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于每一行 &lt;code&gt;i&lt;/code&gt; ，&lt;code&gt;sum(wall[i])&lt;/code&gt; 应当是相同的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= wall[i][j] &amp;lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;计数&#34;&gt;计数&lt;/h4&gt;

&lt;p&gt;以每一行起点为 &lt;code&gt;0&lt;/code&gt; 坐标，可以使得同一列的缝隙唯一标识，从而标记出所有缝隙的列坐标。&lt;/p&gt;

&lt;p&gt;统计每一列的缝隙出现次数，找出出现最多的缝隙，即可求得最小穿过砖块数量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leastBricks&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;wall&lt;/span&gt; [][]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gapCnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;bricks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wall&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;bricks&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;gap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bricks&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
			&lt;span style=&#34;color:#a6e22e&#34;&gt;gapCnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;gap&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;maxGaps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gapCnt&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxGaps&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;maxGaps&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;wall&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxGaps&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(M*N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(M*N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 690. 员工的重要性</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-690.-%E5%91%98%E5%B7%A5%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</link>
        <pubDate>Sat, 01 May 2021 21:20:28 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-690.-%E5%91%98%E5%B7%A5%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/employee-importance/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/employee-importance/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定一个保存员工信息的数据结构，它包含了员工 &lt;strong&gt;唯一的 id&lt;/strong&gt; ，&lt;strong&gt;重要度&lt;/strong&gt; 和 &lt;strong&gt;直系下属的 id&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;比如，员工 1 是员工 2 的领导，员工 2 是员工 3 的领导。他们相应的重要度为 15 , 10 , 5 。那么员工 1 的数据结构是 [1, 15, [2]] ，员工 2的 数据结构是 [2, 10, [3]] ，员工 3 的数据结构是 [3, 5, []] 。注意虽然员工 3 也是员工 1 的一个下属，但是由于 &lt;strong&gt;并不是直系&lt;/strong&gt; 下属，因此没有体现在员工 1 的数据结构中。&lt;/p&gt;

&lt;p&gt;现在输入一个公司的所有员工信息，以及单个员工 id ，返回这个员工和他所有下属的重要度之和。&lt;/p&gt;

&lt;h5 id=&#34;示例&#34;&gt;示例：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;[[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;11&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;员工 1 自身的重要度是 5 ，他有两个直系下属 2 和 3 ，而且 2 和 3 的重要度均为 3 。因此员工 1 的总重要度是 5 + 3 + 3 = 11 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;一个员工最多有一个 &lt;strong&gt;直系&lt;/strong&gt; 领导，但是可以有多个 &lt;strong&gt;直系&lt;/strong&gt; 下属&lt;/li&gt;
&lt;li&gt;员工数量不超过 2000&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;深度优先搜素&#34;&gt;深度优先搜素&lt;/h4&gt;

&lt;p&gt;很容易可以看出整个的员工体系是一个树状结构，故可以采用深度优先搜索的策略，对某一员工及其下属逐一求和。&lt;/p&gt;

&lt;p&gt;为能快速定位到某一个员工，另使用一个 &lt;code&gt;map&lt;/code&gt; 维护&lt;strong&gt;员工id&lt;/strong&gt;到员工信息的映射。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getImportance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;employees&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;employees&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Id&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Importance&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Subordinates&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 137. 只出现一次的数字 II</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-137.-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii/</link>
        <pubDate>Fri, 30 Apr 2021 18:18:49 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-137.-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/single-number-ii/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/single-number-ii/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，除某个元素仅出现 &lt;strong&gt;一次&lt;/strong&gt; 外，其余每个元素都恰出现 &lt;strong&gt;三次&lt;/strong&gt; 。请你找出并返回那个只出现了一次的元素。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [2,2,3,2]
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [0,1,0,1,0,1,99]
&lt;strong&gt;输出：&lt;/strong&gt;99&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-2&lt;sup&gt;31&lt;/sup&gt; &amp;lt;= nums[i] &amp;lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 中，除某个元素仅出现 &lt;strong&gt;一次&lt;/strong&gt; 外，其余每个元素都恰出现 &lt;strong&gt;三次&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？&lt;/p&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;哈希&#34;&gt;哈希&lt;/h4&gt;

&lt;p&gt;统计每个数出现的次数，然后找出其中只出现一次的数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;singleNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;排序&#34;&gt;排序&lt;/h4&gt;

&lt;p&gt;将整个数组排序，没三个一组进行首尾比较，相同继续，不同返回。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;singleNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ints&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(NlogN)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;位运算&#34;&gt;位运算&lt;/h4&gt;

&lt;p&gt;统计每一位的数字总和，其必然是 &lt;code&gt;0&lt;/code&gt; 或者 &lt;code&gt;3n+1&lt;/code&gt;，在统计过程中就可以逢&lt;code&gt;3&lt;/code&gt;清零，依次求解下去即可。
考虑用两个位 &lt;code&gt;a, b&lt;/code&gt; 记录求和数据，表如下所示:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;cur&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;num&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;next&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;01&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;01&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;根据上表可推导出 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 的变换表：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;b&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;x&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;new_a&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;得到a的转移方程：
&lt;code&gt;new_a = a&#39;bx + ab&#39;x&#39;&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;b&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;a&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;x&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;new_b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;得到b的转移方程：
&lt;code&gt;new_b = a&#39;b&#39;x + a&#39;bx&#39; = a&#39;(b&#39;x+bx&#39;) = a&#39;(b⊕x)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;singleNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; ^&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; | &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;^&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;^&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; = ^&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; ^ &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Leetcode 403. 青蛙过河</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-403.-%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3/</link>
        <pubDate>Thu, 29 Apr 2021 14:21:06 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-403.-%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/frog-jump/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/frog-jump/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;困难&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。&lt;br /&gt;
给你石子的位置列表 &lt;code&gt;stones&lt;/code&gt;（用单元格序号 &lt;strong&gt;升序&lt;/strong&gt; 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。&lt;br /&gt;
开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格 1 跳至单元格 2 ）。&lt;br /&gt;
如果青蛙上一步跳跃了 &lt;code&gt;k&lt;/code&gt; 个单位，那么它接下来的跳跃距离只能选择为 &lt;code&gt;k - 1&lt;/code&gt;、&lt;code&gt;k&lt;/code&gt; 或 &lt;code&gt;k + 1&lt;/code&gt; 个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;stones = [0,1,3,5,6,8,12,17]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;青蛙可以成功过河，按照如下方案跳跃：跳 1 个单位到第 2 块石子, 然后跳 2 个单位到第 3 块石子, 接着 跳 2 个单位到第 4 块石子, 然后跳 3 个单位到第 6 块石子, 跳 4 个单位到第 7 块石子, 最后，跳 5 个单位到第 8 个石子（即最后一块石子）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;stones = [0,1,2,3,4,8,9,11]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;这是因为第 5 和第 6 个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= stones.length &amp;lt;= 2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= stones[i] &amp;lt;= 2&lt;sup&gt;31&lt;/sup&gt;-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stones[0] == 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;从题意可以看出，青蛙每次从某块石头开始起跳，可以降落到一个范围 &lt;code&gt;[k-1 k+1]&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt; 表示上一次的跳跃步长。由于每次跳跃都依赖于前一次跳跃的步长，考虑用动态规划实现。
&lt;code&gt;dp[i]&lt;/code&gt; 记录所有可以跳跃到第 &lt;code&gt;i&lt;/code&gt; 个石头上面的步长集合，之后就可以根据该集合，向后推导下一跳：&lt;/p&gt;

&lt;p&gt;针对 &lt;code&gt;dp[i]&lt;/code&gt; 的每一个步长 &lt;code&gt;step&lt;/code&gt;，当 &lt;code&gt;step-1 &amp;lt;= stones[j]-stones[i] &amp;lt;= step+1, (j &amp;gt; i, k∈dp[i])&lt;/code&gt; 时，将步长 &lt;code&gt;stones[j]-stones[i]&lt;/code&gt; 添加进 &lt;code&gt;dp[j]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dp[len-1]&lt;/code&gt; 不是空集合，说明能找到，返回 &lt;code&gt;true&lt;/code&gt;；否则找不到返回 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;canCross&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;step&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
						&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] = make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)
					}
					&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;][&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
				}
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;stones&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 633. 平方数之和</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-633.-%E5%B9%B3%E6%96%B9%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
        <pubDate>Wed, 28 Apr 2021 22:46:56 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-633.-%E5%B9%B3%E6%96%B9%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/sum-of-square-numbers/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/sum-of-square-numbers/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定一个非负整数 &lt;code&gt;c&lt;/code&gt; ，你要判断是否存在两个整数 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;，使得 &lt;code&gt;a2 + b2 = c&lt;/code&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;c = 5&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;1 * 1 + 2 * 2 = 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;c = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;false&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;c = 4&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例4&#34;&gt;示例4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;c = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例5&#34;&gt;示例5：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;c = 1
&lt;strong&gt;输出：&lt;/strong&gt;true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= c &amp;lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;打表&#34;&gt;打表&lt;/h4&gt;

&lt;p&gt;维护一个保存所有平方数的 &lt;code&gt;map&lt;/code&gt;，然后从0开始枚举所有可能是 &lt;code&gt;a&lt;/code&gt; 的情况，寻找 &lt;code&gt;b = c-a&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt; 是否存在于 &lt;code&gt;map&lt;/code&gt; 中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; = make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MaxInt32&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;judgeSquareSum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(√c)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(√N)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;开方&#34;&gt;开方&lt;/h4&gt;

&lt;p&gt;枚举所有可能是 &lt;code&gt;a&lt;/code&gt; 的情况，然后对 &lt;code&gt;b = c-a&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt; 开放，判断开方后的结果是否为整数即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;judgeSquareSum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sqrt&lt;/span&gt;(float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;int(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;int(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(√c)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;双指针&#34;&gt;双指针&lt;/h4&gt;

&lt;p&gt;用 &lt;code&gt;i, j(i &amp;lt; j)&lt;/code&gt; 表示两个指针，向中间遍历，初始 &lt;code&gt;i = 0, j = √c&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;i*i + j*j == c&lt;/code&gt; 时，返回 &lt;code&gt;true&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;i*i + j*j &amp;lt; c&lt;/code&gt; 时， &lt;code&gt;i++&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;i*i + j*j &amp;gt; c&lt;/code&gt; 时， &lt;code&gt;j--&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直到 &lt;code&gt;i &amp;gt; j&lt;/code&gt; 时，依然未能找到 &lt;code&gt;a, b&lt;/code&gt;，返回 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;judgeSquareSum&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; int(); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sqrt&lt;/span&gt;(float64(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;))
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;int(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;int(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-2&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(√c)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 938. 二叉搜索树的范围和</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-938.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C/</link>
        <pubDate>Tue, 27 Apr 2021 10:31:11 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-938.-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/range-sum-of-bst/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/range-sum-of-bst/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给定二叉搜索树的根结点 &lt;code&gt;root&lt;/code&gt;，返回值位于范围 &lt;code&gt;[low, high]&lt;/code&gt; 之间的所有结点的值的和。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root = [10,5,15,3,7,null,18], low = 7, high = 15&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;32&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;23&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;树中节点数目在范围 &lt;code&gt;[1, 2 * 10&lt;sup&gt;4&lt;/sup&gt;]&lt;/code&gt; 内&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= Node.val &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= low &amp;lt;= high &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有 &lt;code&gt;Node.val&lt;/code&gt; 互不相同&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;深度优先搜索&#34;&gt;深度优先搜索&lt;/h4&gt;

&lt;p&gt;不同于一般搜索树的搜索，该搜索需要遍历整颗树，以累计求和，必要部分需要剪枝加快遍历速度。&lt;br /&gt;
搜索时需要区分三种情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当前结点值 &lt;code&gt;val &amp;lt; low&lt;/code&gt; 时，左子树均不满足条件，继续搜索右子树；&lt;/li&gt;
&lt;li&gt;当前结点值 &lt;code&gt;val &amp;gt; high&lt;/code&gt; 时，右子树均不满足条件，继续搜索左子树；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其余情况，累加当前结点值，无法剪枝，左右子树都需要继续搜索。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rangeSumBST&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;low&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;high&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;low&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;high&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 1011. 在 D 天内送达包裹的能力</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-1011.-%E5%9C%A8-d-%E5%A4%A9%E5%86%85%E9%80%81%E8%BE%BE%E5%8C%85%E8%A3%B9%E7%9A%84%E8%83%BD%E5%8A%9B/</link>
        <pubDate>Mon, 26 Apr 2021 11:10:26 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-1011.-%E5%9C%A8-d-%E5%A4%A9%E5%86%85%E9%80%81%E8%BE%BE%E5%8C%85%E8%A3%B9%E7%9A%84%E8%83%BD%E5%8A%9B/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;传送带上的包裹必须在 &lt;code&gt;D&lt;/code&gt; 天内从一个港口运送到另一个港口。&lt;br /&gt;
传送带上的第 &lt;code&gt;i&lt;/code&gt; 个包裹的重量为 &lt;code&gt;weights[i]&lt;/code&gt;。每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。&lt;br /&gt;
返回能在 &lt;code&gt;D&lt;/code&gt; 天内将传送带上的所有包裹送达的船的最低运载能力。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;weights = [1,2,3,4,5,6,7,8,9,10], D = 5&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;15&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：&lt;br /&gt;
第 1 天：1, 2, 3, 4, 5&lt;br /&gt;
第 2 天：6, 7&lt;br /&gt;
第 3 天：8&lt;br /&gt;
第 4 天：9&lt;br /&gt;
第 5 天：10&lt;/p&gt;

&lt;p&gt;请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;weights = [3,2,2,4,1,4], D = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;6&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
船舶最低载重 6 就能够在 3 天内送达所有包裹，如下所示：&lt;br /&gt;
第 1 天：3, 2&lt;br /&gt;
第 2 天：2, 4&lt;br /&gt;
第 3 天：1, 4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;weights = [1,2,3,1,1], D = 4&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
第 1 天：1&lt;br /&gt;
第 2 天：2&lt;br /&gt;
第 3 天：3&lt;br /&gt;
第 4 天：1, 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= D &amp;lt;= weights.length &amp;lt;= 50000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= weights[i] &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;暴力求解&#34;&gt;暴力求解&lt;/h4&gt;

&lt;p&gt;将货物总重量的 &lt;strong&gt;平均数&lt;/strong&gt; 和 &lt;strong&gt;最重货物&lt;/strong&gt; 较大的一个重量作为初始的载重量，逐一向上累加，求得首次符合条件的结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shipWithinDays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;minCap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;len(&lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;minCap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minCap&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;minCap&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;max&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;curCap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minCap&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 当前容量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// 第几天
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// 装到第几箱货物
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// 能装入，继续
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;curCap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;curCap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
				&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
			}
			&lt;span style=&#34;color:#75715e&#34;&gt;// 不能装入，等第二天
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;curCap&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;minCap&lt;/span&gt;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// 装完
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minCap&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;minCap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*∑weight)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;二分查找&#34;&gt;二分查找&lt;/h4&gt;

&lt;p&gt;将 &lt;strong&gt;最重货物重量&lt;/strong&gt; &lt;code&gt;l&lt;/code&gt; 和 &lt;strong&gt;货物的总重量&lt;/strong&gt; &lt;code&gt;r&lt;/code&gt; 作为二分查找的两端起始点，进行二分查找，每次求得完成送达的天数 &lt;code&gt;d&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;d &amp;lt;= D&lt;/code&gt; 时，载重量偏大，需要从左半部分 &lt;code&gt;[l,mid]&lt;/code&gt; 查找&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当 &lt;code&gt;d &amp;gt; D&lt;/code&gt; 时，载重量偏小，需要从右半部分 &lt;code&gt;(mid, r]&lt;/code&gt; 查找&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shipWithinDays&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;weight&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binarySearch&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;binarySearch&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;curCap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;); {
			&lt;span style=&#34;color:#75715e&#34;&gt;// 能装入，继续
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;curCap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;curCap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
				&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
			}
			&lt;span style=&#34;color:#75715e&#34;&gt;// 不能装入，等第二天
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;curCap&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cnt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;D&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binarySearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binarySearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binarySearch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*log(∑weight))&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 897. 递增顺序搜索树</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-897.-%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
        <pubDate>Sun, 25 Apr 2021 11:41:33 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-897.-%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/increasing-order-search-tree/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/increasing-order-search-tree/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一棵二叉搜索树，请你 &lt;strong&gt;按中序遍历&lt;/strong&gt; 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg&#34; width=&#34;600px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root = [5,3,6,2,4,null,8,1,null,null,null,7,9]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg&#34; width=&#34;300px&#34;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;root = [5,1,7]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;[1,null,5,null,7]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;树中节点数的取值范围是 &lt;code&gt;[1, 100]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= Node.val &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;新建树&#34;&gt;新建树&lt;/h4&gt;

&lt;p&gt;重新构造一棵树，中序遍历原树的每个结点，将其加入到新树的右结点中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increasingBST&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InorderTraversal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;InorderTraversal&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;InorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Val&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;,
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newNode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;InorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;InorderTraversal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;就地改指针&#34;&gt;就地改指针&lt;/h4&gt;

&lt;p&gt;维护一个叶结点指针，中序遍历整棵树，每当遇到一个新结点时，该结点 &lt;code&gt;left&lt;/code&gt; 置为空，叶结点 &lt;code&gt;right&lt;/code&gt; 修改为该结点，叶结点修正为该结点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increasingBST&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newLeaf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LDR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;LDR&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TreeNode&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;LDR&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;newLeaf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;newLeaf&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newLeaf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;LDR&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;LDR&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;root&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Right&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newRoot&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 377. 组合总和 Ⅳ</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-377.-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</link>
        <pubDate>Sat, 24 Apr 2021 21:50:28 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-377.-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/combination-sum-iv/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/combination-sum-iv/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个由 &lt;strong&gt;不同&lt;/strong&gt; 整数组成的数组 &lt;code&gt;nums&lt;/code&gt; ，和一个目标整数 &lt;code&gt;target&lt;/code&gt; 。请你从 &lt;code&gt;nums&lt;/code&gt; 中找出并返回总和为 &lt;code&gt;target&lt;/code&gt; 的元素组合的个数。&lt;br /&gt;
题目数据保证答案符合 32 位整数范围。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [1,2,3], target = 4&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;7&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&lt;br /&gt;
所有可能的组合为：&lt;br /&gt;
(1, 1, 1, 1)&lt;br /&gt;
(1, 1, 2)&lt;br /&gt;
(1, 2, 1)&lt;br /&gt;
(1, 3)&lt;br /&gt;
(2, 1, 1)&lt;br /&gt;
(2, 2)&lt;br /&gt;
(3, 1)&lt;br /&gt;
请注意，顺序不同的序列被视作不同的组合。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [9], target = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums[i] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 中的所有元素 &lt;strong&gt;互不相同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;用 &lt;code&gt;dp[i]&lt;/code&gt; 表示当 &lt;code&gt;i&lt;/code&gt; 作为 &lt;code&gt;target&lt;/code&gt; 时，排列方案的数量。当 &lt;code&gt;dp[i]&lt;/code&gt; 不为 &lt;code&gt;0&lt;/code&gt; 时，不妨假设排列的做后一位数字为 &lt;code&gt;num&lt;/code&gt;，则 &lt;code&gt;i-num&lt;/code&gt; 的排列数为 &lt;code&gt;dp[i-num]&lt;/code&gt; ，容易得知状态转移方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;i = 0&lt;/code&gt; 时，&lt;code&gt;dp[i] = 1&lt;/code&gt;，表示没有元素被选中；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当 &lt;code&gt;0 &amp;lt; i &amp;lt;= target&lt;/code&gt; 时，&lt;code&gt;dp[i] = ∑dp[i-num],(num &amp;lt;= i)&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;combinationSum4&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;]
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*T)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 91. 解码方式</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-91.-%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F/</link>
        <pubDate>Wed, 21 Apr 2021 10:35:45 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-91.-%E8%A7%A3%E7%A0%81%E6%96%B9%E5%BC%8F/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/decode-ways/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/decode-ways/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;A&amp;#39; -&amp;gt; 1
&amp;#39;B&amp;#39; -&amp;gt; 2
...
&amp;#39;Z&amp;#39; -&amp;gt; 26&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要 &lt;strong&gt;解码&lt;/strong&gt; 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，&lt;code&gt;&amp;quot;11106&amp;quot;&lt;/code&gt; 可以映射为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;AAJF&amp;quot;&lt;/code&gt; ，将消息分组为 &lt;code&gt;(1 1 10 6)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;KJF&amp;quot;&lt;/code&gt; ，将消息分组为 &lt;code&gt;(11 10 6)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意，消息不能分组为 &lt;code&gt;(1 11 06)&lt;/code&gt; ，因为 &lt;code&gt;&amp;quot;06&amp;quot;&lt;/code&gt; 不能映射为 &lt;code&gt;&amp;quot;F&amp;quot;&lt;/code&gt; ，这是由于 &lt;code&gt;&amp;quot;6&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;06&amp;quot;&lt;/code&gt; 在映射中并不等价。&lt;br /&gt;
给你一个只含数字的 &lt;strong&gt;非空&lt;/strong&gt; 字符串 &lt;code&gt;s&lt;/code&gt; ，请计算并返回 &lt;strong&gt;解码&lt;/strong&gt; 方法的 &lt;strong&gt;总数&lt;/strong&gt; 。&lt;br /&gt;
题目数据保证答案肯定是一个 &lt;strong&gt;32 位&lt;/strong&gt; 的整数。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;s = &amp;ldquo;12&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;它可以解码为 &amp;ldquo;AB&amp;rdquo;（1 2）或者 &amp;ldquo;L&amp;rdquo;（12）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;s = &amp;ldquo;226&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;3&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;它可以解码为 &amp;ldquo;BZ&amp;rdquo; (2 26), &amp;ldquo;VF&amp;rdquo; (22 6), 或者 &amp;ldquo;BBF&amp;rdquo; (2 2 6) 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;s = &amp;ldquo;0&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;没有字符映射到以 0 开头的数字。&lt;br /&gt;
含有 0 的有效映射是 &amp;lsquo;J&amp;rsquo; -&amp;gt; &amp;ldquo;10&amp;rdquo; 和 &amp;rsquo;T&amp;rsquo;-&amp;gt; &amp;ldquo;20&amp;rdquo; 。&lt;br /&gt;
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例4&#34;&gt;示例4:&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;s = &amp;ldquo;06&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;&amp;ldquo;06&amp;rdquo; 不能映射到 &amp;ldquo;F&amp;rdquo; ，因为字符串含有前导 0（&amp;rdquo;6&amp;rdquo; 和 &amp;ldquo;06&amp;rdquo; 在映射中并不等价）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 只包含数字，并且可能包含前导零。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;动态规划&#34;&gt;动态规划&lt;/h4&gt;

&lt;p&gt;使用数组 &lt;code&gt;dp&lt;/code&gt; 保存解码的总数， &lt;code&gt;dp[i]&lt;/code&gt; 表示截止到长度为 &lt;code&gt;i&lt;/code&gt; 的字串可以解码的总数，转移时有两种情况需要考虑：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一种情况，对 &lt;code&gt;s[i]&lt;/code&gt; 进行解码，要求 &lt;code&gt;s[i] != 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二种情况，对 &lt;code&gt;s[i-1]s[i]&lt;/code&gt; 解码, 要求 &lt;code&gt;&amp;quot;00&amp;quot; &amp;lt; s[i-1]s[i] &amp;lt;= &amp;quot;26&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后就可以推导出状态转移方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;初始时，&lt;code&gt;dp[0] = 0&lt;/code&gt;, 表示空字符串有一种解法 - 空串&lt;/li&gt;
&lt;li&gt;仅满足情况一， &lt;code&gt;dp[i+1] = dp[i]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;经满足情况二， &lt;code&gt;dp[i+1] = dp[i-1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同时满足情况一和二， &lt;code&gt;dp[i+1] = dp[i] + dp[i-1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;情况一和二均不满足，说明该字符串不能解码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;求解到 &lt;code&gt;s&lt;/code&gt; 尾，即可求解得所有解码总数 &lt;code&gt;dp[len(s)]&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numDecodings&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 标记是否可以解码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 情况一
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
			&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// 情况二
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;int(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
				&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;优化&#34;&gt;优化&lt;/h5&gt;

&lt;p&gt;每次迭代只涉及到三个变量，故可以用三个变量代替数组，进一步降低空间复杂度&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numDecodings&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 标记是否可以解码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;// 情况一
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
			&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// 情况二
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;int(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
				&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;exist&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：优化前：O(N)，优化后O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 165. 比较版本号</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-165.-%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/</link>
        <pubDate>Tue, 20 Apr 2021 20:33:19 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-165.-%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/compare-version-numbers/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/compare-version-numbers/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;orange&#34;&gt;中等&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你两个版本号 &lt;code&gt;version1&lt;/code&gt; 和 &lt;code&gt;version2&lt;/code&gt; ，请你比较它们。&lt;br /&gt;
版本号由一个或多个修订号组成，各修订号由一个 &lt;code&gt;&#39;.&#39;&lt;/code&gt; 连接。每个修订号由 &lt;strong&gt;多位数字&lt;/strong&gt; 组成，可能包含 &lt;strong&gt;前导零&lt;/strong&gt; 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。&lt;br /&gt;
比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 &lt;strong&gt;忽略任何前导零后的整数值&lt;/strong&gt; 。也就是说，修订号 &lt;code&gt;1&lt;/code&gt; 和修订号 &lt;code&gt;001&lt;/code&gt; 相等 。如果版本号没有指定某个下标处的修订号，则该修订号视为 &lt;code&gt;0&lt;/code&gt; 。例如，版本 &lt;code&gt;1.0&lt;/code&gt; 小于版本 &lt;code&gt;1.1&lt;/code&gt; ，因为它们下标为 &lt;code&gt;0&lt;/code&gt; 的修订号相同，而下标为 &lt;code&gt;1&lt;/code&gt; 的修订号分别为 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; ，&lt;code&gt;0 &amp;lt; 1&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;返回规则如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;version1&lt;/code&gt; &amp;gt; &lt;code&gt;version2&lt;/code&gt; 返回 &lt;code&gt;1&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;version1&lt;/code&gt; &amp;lt; &lt;code&gt;version2&lt;/code&gt; 返回 &lt;code&gt;-1&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;除此之外返回 &lt;code&gt;0&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;version1 = &amp;ldquo;1.01&amp;rdquo;, version2 = &amp;ldquo;1.001&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;忽略前导零，&amp;rdquo;01&amp;rdquo; 和 &amp;ldquo;001&amp;rdquo; 都表示相同的整数 &amp;ldquo;1&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;version1 = &amp;ldquo;1.0&amp;rdquo;, version2 = &amp;ldquo;1.0.0&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;version1 没有指定下标为 2 的修订号，即视为 &amp;ldquo;0&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;version1 = &amp;ldquo;0.1&amp;rdquo;, version2 = &amp;ldquo;1.1&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;-1&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;version1 中下标为 0 的修订号是 &amp;ldquo;0&amp;rdquo;，version2 中下标为 0 的修订号是 &amp;ldquo;1&amp;rdquo; 。0 &amp;lt; 1，所以 version1 &amp;lt; version2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例4&#34;&gt;示例4：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;version1 = &amp;ldquo;1.0.1&amp;rdquo;, version2 = &amp;ldquo;1&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例5&#34;&gt;示例5：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;version1 = &amp;ldquo;7.5.2.4&amp;rdquo;, version2 = &amp;ldquo;7.5.3&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;-1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= version1.length, version2.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version1&lt;/code&gt; 和 &lt;code&gt;version2&lt;/code&gt; 仅包含数字和 &lt;code&gt;&#39;.&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version1&lt;/code&gt; 和 &lt;code&gt;version2&lt;/code&gt; 都是 &lt;strong&gt;有效版本号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version1&lt;/code&gt; 和 &lt;code&gt;version2&lt;/code&gt; 的所有修订号都可以存储在 &lt;strong&gt;32 位整数&lt;/strong&gt; 中&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;分割&#34;&gt;分割&lt;/h4&gt;

&lt;p&gt;将两个版本号以 &lt;code&gt;&#39;.&#39;&lt;/code&gt; 为分割符进行分割，之后注意比较各个部分，较短的版本号，后续缺失的部分用 &lt;code&gt;0&lt;/code&gt; 进行代替。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compareVersion&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;version1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;version2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Split&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;version1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Split&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;version2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ParseInt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ParseInt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N+N+max(N, M))&lt;/li&gt;
&lt;li&gt;空间复杂度：O(N+M)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;双指针&#34;&gt;双指针&lt;/h4&gt;

&lt;p&gt;指针 &lt;code&gt;i&lt;/code&gt; , &lt;code&gt;j&lt;/code&gt; 分别指向 &lt;code&gt;version1&lt;/code&gt; 和 &lt;code&gt;version2&lt;/code&gt; , 每次分别从两个版本号中获取一个有效数字进行比较：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; 指向的数字大，返回 &lt;code&gt;1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j&lt;/code&gt; 指向的数字大，返回 &lt;code&gt;-1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;两个数字相同，继续向后遍历。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;遍历结束，仍未比较得出大小，说明两个版本号相同，返回 &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compareVersion&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;version1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;version2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;version1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;version2&lt;/span&gt;); {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;version1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;version1&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;version2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;version2&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N+M)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 28. 实现 strStr()</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-28.-%E5%AE%9E%E7%8E%B0-strstr/</link>
        <pubDate>Tue, 20 Apr 2021 17:21:05 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-28.-%E5%AE%9E%E7%8E%B0-strstr/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/implement-strstr/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/implement-strstr/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;实现 &lt;code&gt;strStr()&lt;/code&gt; 函数。&lt;br /&gt;
给你两个字符串 &lt;code&gt;haystack&lt;/code&gt; 和 &lt;code&gt;needle&lt;/code&gt; ，请你在 &lt;code&gt;haystack&lt;/code&gt; 字符串中找出 &lt;code&gt;needle&lt;/code&gt; 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  &lt;code&gt;-1&lt;/code&gt; 。&lt;/p&gt;

&lt;h5 id=&#34;说明&#34;&gt;说明：&lt;/h5&gt;

&lt;p&gt;当 &lt;code&gt;needle&lt;/code&gt; 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。&lt;br /&gt;
对于本题而言，当 &lt;code&gt;needle&lt;/code&gt; 是空字符串时我们应当返回 &lt;code&gt;0&lt;/code&gt; 。这与 C 语言的 &lt;code&gt;strstr()&lt;/code&gt; 以及 Java 的 &lt;code&gt;indexOf()&lt;/code&gt; 定义相符。&lt;/p&gt;

&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;haystack = &amp;ldquo;hello&amp;rdquo;, needle = &amp;ldquo;ll&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;haystack = &amp;ldquo;aaaaa&amp;rdquo;, needle = &amp;ldquo;bba&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;-1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例3&#34;&gt;示例3：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;haystack = &amp;ldquo;&amp;rdquo;, needle = &amp;ldquo;&amp;rdquo;&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= haystack.length, needle.length &amp;lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;haystack&lt;/code&gt; 和 &lt;code&gt;needle&lt;/code&gt; 仅由小写英文字符组成&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;暴力匹配&#34;&gt;暴力匹配&lt;/h4&gt;

&lt;p&gt;从 &lt;code&gt;haystack&lt;/code&gt; 的每个字符开始，依次向后和 &lt;code&gt;needle&lt;/code&gt; 中的字符逐个匹配：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;匹配成功，继续向后匹配；&lt;/li&gt;
&lt;li&gt;匹配失败，从 &lt;code&gt;haystack&lt;/code&gt; 的下个字符重新进行匹配；&lt;/li&gt;
&lt;li&gt;匹配到 &lt;code&gt;needle&lt;/code&gt; 结束，说明完成了查找，返回 &lt;code&gt;haystack&lt;/code&gt; 初始匹配的下标。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;遍历结束，都未完成匹配，表示无法找到，返回 &lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strStr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;haystack&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;maxIdx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;haystack&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxIdx&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;haystack&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N*M)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;kmp算法&#34;&gt;KMP算法&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strStr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;haystack&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 求解next数组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 匹配
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;haystack&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;haystack&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;needle&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度-1&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N+M)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 27. 移除元素</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-27.-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
        <pubDate>Mon, 19 Apr 2021 10:34:28 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-27.-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/remove-element/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/remove-element/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个数组 &lt;code&gt;nums&lt;/code&gt; 和一个值 &lt;code&gt;val&lt;/code&gt;，你需要 &lt;font color=&#34;grey&#34;&gt;原地&lt;/font&gt; 移除所有数值等于 &lt;code&gt;val&lt;/code&gt; 的元素，并返回移除后数组的新长度。&lt;br /&gt;
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 &lt;font color=&#34;grey&#34;&gt;原地&lt;/font&gt; &lt;strong&gt;修改输入数组&lt;/strong&gt;。&lt;br /&gt;
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。&lt;/p&gt;

&lt;h5 id=&#34;说明&#34;&gt;说明：&lt;/h5&gt;

&lt;p&gt;为什么返回数值是整数，但输出的答案是数组呢?&lt;br /&gt;
请注意，输入数组是以&lt;strong&gt;「引用」&lt;/strong&gt;方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。&lt;br /&gt;
你可以想象内部操作如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; removeDuplicates(nums);

&lt;span style=&#34;color:#75715e&#34;&gt;// 在函数里修改输入数组对于调用者是可见的。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
	print(nums[i]);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [3,2,2,3], val = 3&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2, nums = [2,2]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;函数应该返回新的长度 &lt;strong&gt;2&lt;/strong&gt;, 并且 nums 中的前两个元素均为 &lt;strong&gt;2&lt;/strong&gt;。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [0,1,2,2,3,0,4,2], val = 2&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;5, nums = [0,1,4,0,3]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;函数应该返回新的长度 &lt;strong&gt;5&lt;/strong&gt;, 并且 nums 中的前五个元素为 &lt;strong&gt;0&lt;/strong&gt;, &lt;strong&gt;1&lt;/strong&gt;, &lt;strong&gt;3&lt;/strong&gt;, &lt;strong&gt;0&lt;/strong&gt;, &lt;strong&gt;4&lt;/strong&gt;。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums[i] &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;双指针&#34;&gt;双指针&lt;/h4&gt;

&lt;p&gt;用两个指针分别指向 待返回的结果数组 和 待遍历的原数组
第一个指针 &lt;code&gt;i&lt;/code&gt; 表示当前已删除 &lt;code&gt;val&lt;/code&gt; 的结果数组的下一个可赋值的位置，也即结果数组的长度；第二个指针 &lt;code&gt;j&lt;/code&gt; 表示当前遍历到的元素下标。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;nums[i] == val&lt;/code&gt; 时，继续向后遍历；&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;nums[j] != val&lt;/code&gt; 时，表示该数毋需删除，将其加入到结果数组，遍历下一个元素。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;遍历结束，返回数组长度 &lt;code&gt;i&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeElement&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Leetcode 26. 删除有序数组中的重复项</title>
        <link>https://xianlianghe0123.github.io/p/leetcode-26.-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
        <pubDate>Sun, 18 Apr 2021 10:52:18 +0800</pubDate>
        
        <guid>https://xianlianghe0123.github.io/p/leetcode-26.-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
        <description>

&lt;p&gt;&lt;strong&gt;链接：&lt;/strong&gt; &lt;a href=&#34;https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/&#34; target=&#34;_blank&#34;&gt;https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;难度：&lt;/strong&gt; &lt;font color=&#34;green&#34;&gt;简单&lt;/font&gt;&lt;/p&gt;

&lt;h4 id=&#34;题目描述&#34;&gt;题目描述&lt;/h4&gt;

&lt;p&gt;给你一个有序数组 &lt;code&gt;nums&lt;/code&gt; ，请你 &lt;font color=&#34;grey&#34;&gt;原地&lt;/font&gt; 删除重复出现的元素，使每个元素 &lt;strong&gt;只出现一次&lt;/strong&gt; ，返回删除后数组的新长度。&lt;br /&gt;
不要使用额外的数组空间，你必须在 &lt;font color=&#34;grey&#34;&gt;原地&lt;/font&gt; &lt;strong&gt;修改输入数组&lt;/strong&gt; 并在使用 O(1) 额外空间的条件下完成。&lt;/p&gt;

&lt;h5 id=&#34;说明&#34;&gt;说明：&lt;/h5&gt;

&lt;p&gt;为什么返回数值是整数，但输出的答案是数组呢?&lt;br /&gt;
请注意，输入数组是以&lt;strong&gt;「引用」&lt;/strong&gt;方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。&lt;br /&gt;
你可以想象内部操作如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; removeDuplicates(nums);

&lt;span style=&#34;color:#75715e&#34;&gt;// 在函数里修改输入数组对于调用者是可见的。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
	print(nums[i]);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;示例1&#34;&gt;示例1：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [1,1,2]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;2, nums = [1,2]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;函数应该返回新的长度 &lt;strong&gt;2&lt;/strong&gt; ，并且原数组 nums 的前两个元素被修改为 &lt;strong&gt;1&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt; 。不需要考虑数组中超出新长度后面的元素。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;示例2&#34;&gt;示例2：&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;nums = [0,0,1,1,1,2,2,3,3,4]&lt;br /&gt;
&lt;strong&gt;输出：&lt;/strong&gt;5, nums = [0,1,2,3,4]&lt;br /&gt;
&lt;strong&gt;解释：&lt;/strong&gt;函数应该返回新的长度 &lt;strong&gt;5&lt;/strong&gt; ， 并且原数组 nums 的前五个元素被修改为 &lt;strong&gt;0&lt;/strong&gt;, &lt;strong&gt;1&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt;, &lt;strong&gt;3&lt;/strong&gt;, &lt;strong&gt;4&lt;/strong&gt; 。不需要考虑数组中超出新长度后面的元素。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;提示&#34;&gt;提示：&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= nums.length &amp;lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10&lt;sup&gt;4&lt;/sup&gt; &amp;lt;= nums[i] &amp;lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums&lt;/code&gt; 已按升序排列&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;解题思路&#34;&gt;解题思路&lt;/h3&gt;

&lt;h4 id=&#34;双指针&#34;&gt;双指针&lt;/h4&gt;

&lt;p&gt;由于整个数组已经过排序，排在某个数之前的数不会在其后重复出现，所以可以简单的用双指针实现。&lt;br /&gt;
第一个指针 &lt;code&gt;i&lt;/code&gt; 表示当前不重复的数组最后一个数的下标，第二个指针 &lt;code&gt;j&lt;/code&gt; 表示当前遍历到的元素下标。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;nums[i] == nums[j]&lt;/code&gt; 时，表示该数已加入结果中，继续向后遍历；&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;nums[i] != nums[j]&lt;/code&gt; 时，表示该数是一个新的不重复数，将其填入 &lt;code&gt;nums[i+1]&lt;/code&gt; 中，&lt;code&gt;i&lt;/code&gt;指针向后移动一位。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;遍历结束，返回数组长度 &lt;code&gt;i+1&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeDuplicates&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;nums&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;]
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;复杂度&#34;&gt;复杂度&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
