<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on 贺贤良</title>
    <link>https://xianlianghe0123.github.io/categories/algorithms/</link>
    <description>Recent content in Algorithms on 贺贤良</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <lastBuildDate>Fri, 03 Sep 2021 16:15:57 +0800</lastBuildDate><atom:link href="https://xianlianghe0123.github.io/categories/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>排序</title>
      <link>https://xianlianghe0123.github.io/p/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 03 Sep 2021 16:15:57 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E6%8E%92%E5%BA%8F/</guid>
      <description>冒泡排序 func BubbleSort(arr []int) { for i := 0; i &amp;lt; len(arr); i++ { for j := 0; j &amp;lt; len(arr)-1-i; j++ { if arr[j] &amp;gt; arr[j+1] { arr[j], arr[j+1] = arr[j+1], arr[j] } } } } 复杂度  时间复杂度：$ O(N^2) $ 空间复杂度：$ O(1) $  选择排序 func ChoiceSort(arr []int) { for i := 0; i &amp;lt; len(arr); i++ { minPos := i for j := i + 1; j &amp;lt; len(arr); j++ { if arr[minPos] &amp;gt; arr[j] { minPos = j } } arr[i], arr[minPos] = arr[minPos], arr[i] } } 复杂度  时间复杂度：$ O(N^2) $ 空间复杂度：$ O(1) $  插入排序 func InsertSort(arr []int) { for i := 1; i &amp;lt; len(arr); i++ { num := arr[i] j := i - 1 for ; j &amp;gt;= 0; j-- { if num &amp;lt; arr[j] { arr[j+1] = arr[j] } else { break } } arr[j+1] = num } } 复杂度  时间复杂度：$ O(N^2) $ 空间复杂度：$ O(1) $  归并排序 func MergeSort(arr []int) { var mergeSort func(l, r int) mergeSort = func(l, r int) { if r-l &amp;lt;= 1 { return } mid := (l + r) / 2 mergeSort(l, mid) mergeSort(mid, r) mergeSlice := make([]int, 0, r-l) j := mid for i := l; i &amp;lt; mid; { if j &amp;lt; r &amp;amp;&amp;amp; arr[j] &amp;lt; arr[i] { mergeSlice = append(mergeSlice, arr[j]) j++ } else { mergeSlice = append(mergeSlice, arr[i]) i++ } } for ; j &amp;lt; r; j++ { mergeSlice = append(mergeSlice, arr[j]) } copy(arr[l:], mergeSlice) } mergeSort(0, len(arr)) } 复杂度  时间复杂度：$ O(N\log N) $ 空间复杂度：$ O(N) $  堆排序 func HeapSort(arr []int) { // 建堆 	for i := len(arr)/2 - 1; i &amp;gt;= 0; i-- { for father := i; ; { greater := father&amp;lt;&amp;lt;1 + 1 if greater &amp;gt;= len(arr) { break } if greater+1 &amp;lt; len(arr) &amp;amp;&amp;amp; arr[greater+1] &amp;gt; arr[greater] { greater += 1 } if arr[father] &amp;lt; arr[greater] { arr[father], arr[greater] = arr[greater], arr[father] } father = greater } } // 排序 	for i := len(arr) - 1; i &amp;gt; 0; i-- { arr[0], arr[i] = arr[i], arr[0] for father := 0; ; { greater := father&amp;lt;&amp;lt;1 + 1 if greater &amp;gt;= i { break } if greater+1 &amp;lt; i &amp;amp;&amp;amp; arr[greater+1] &amp;gt; arr[greater] { greater += 1 } if arr[father] &amp;lt; arr[greater] { arr[father], arr[greater] = arr[greater], arr[father] } father = greater } } } 复杂度  时间复杂度：$ O(N\log N) $ 空间复杂度：$ O(1) $  快速排序 func QuickSort(arr []int) { var quickSort func(l, r int) quickSort = func(l, r int) { if l &amp;gt;= r { return } i := l for j := l; j &amp;lt; r; j++ { if arr[j] &amp;lt;= arr[r-1] { arr[i], arr[j] = arr[j], arr[i] i++ } } quickSort(l, i-1) quickSort(i, r) } quickSort(0, len(arr)) } 复杂度  时间复杂度：$ O(N\log N) $ 空间复杂度：$ O(\log N) $  </description>
    </item>
    
  </channel>
</rss>
