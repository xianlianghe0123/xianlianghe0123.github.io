<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>slide window on 贺贤良</title>
    <link>https://xianlianghe0123.github.io/tags/slide-window/</link>
    <description>Recent content in slide window on 贺贤良</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <lastBuildDate>Mon, 17 Oct 2022 10:14:22 +0800</lastBuildDate><atom:link href="https://xianlianghe0123.github.io/tags/slide-window/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 904. 水果成篮</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-904.-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</link>
      <pubDate>Mon, 17 Oct 2022 10:14:22 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-904.-%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE/</guid>
      <description>链接： https://leetcode.cn/problems/fruit-into-baskets/
难度： 中等
题目描述 你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。
你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：
你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。 你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。 一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。 给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。
示例 1： 输入： fruits = [1,2,1]
输出： 3
解释： 可以采摘全部 3 棵树。
示例 2： 输入： fruits = [0,1,2,2]
输出： 3
解释： 可以采摘 [1,2,2] 这三棵树。
如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。
示例 3： 输入： fruits = [1,2,3,2,2]
输出： 4
解释： 可以采摘 [2,3,2,2] 这四棵树。</description>
    </item>
    
    <item>
      <title>Leetcode 1652. 拆炸弹</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1652.-%E6%8B%86%E7%82%B8%E5%BC%B9/</link>
      <pubDate>Sat, 24 Sep 2022 06:58:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1652.-%E6%8B%86%E7%82%B8%E5%BC%B9/</guid>
      <description>链接： https://leetcode.cn/problems/defuse-the-bomb/
难度： 简单
题目描述 你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。
为了获得正确的密码，你需要替换掉每一个数字。所有数字会 同时 被替换。
如果 k &amp;gt; 0 ，将第 i 个数字用 接下来 k 个数字之和替换。 如果 k &amp;lt; 0 ，将第 i 个数字用 之前 k 个数字之和替换。 如果 k == 0 ，将第 i 个数字用 0 替换。 由于 code 是循环的， code[n-1] 下一个元素是 code[0] ，且 code[0] 前一个元素是 code[n-1] 。
给你 循环 数组 code 和整数密钥 k ，请你返回解密后的结果来拆除炸弹！
示例 1： 输入： code = [5,7,1,4], k = 3</description>
    </item>
    
    <item>
      <title>Leetcode 713. 乘积小于 K 的子数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-713.-%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8E-k-%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 05 May 2022 10:25:13 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-713.-%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8E-k-%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/subarray-product-less-than-k/
难度： 中等
题目描述 给你一个整数数组 nums 和一个整数 k ，请你返回子数组内所有元素的乘积严格小于 k 的连续子数组的数目。
示例 1： 输入： nums = [10,5,2,6], k = 100
输出： 8
解释： 8 个乘积小于 100 的子数组分别为：[10]、[5]、[2],、[6]、[10,5]、[5,2]、[2,6]、[5,2,6]。
需要注意的是 [10,5,2] 并不是乘积小于 100 的子数组。
示例 2： 输入： nums = [1,2,3], k = 0
输出： 0
提示： 1 &amp;lt;= nums.length &amp;lt;= 3 * 104 1 &amp;lt;= nums[i] &amp;lt;= 1000 0 &amp;lt;= k &amp;lt;= 106 解题思路 枚举 枚举每个子数组的起始点，向后遍历并不断累乘。
每次类乘后的积 &amp;lt; k，即找到了一个子数组；当积 ≥ k 时，则该起始点相关的符合要求的子数组已查找完，继续从下一个起始点开始。</description>
    </item>
    
    <item>
      <title>Leetcode 821. 字符的最短距离</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-821.-%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/</link>
      <pubDate>Tue, 19 Apr 2022 10:08:56 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-821.-%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/</guid>
      <description>链接： https://leetcode-cn.com/problems/shortest-distance-to-a-character/
难度： 简单
题目描述 给你一个字符串 s 和一个字符 c ，且 c 是 s 中出现过的字符。
返回一个整数数组 answer ，其中 answer.length == s.length 且 answer[i] 是 s 中从下标 i 到离它 最近 的字符 c 的 距离 。
两个下标 i 和 j 之间的 距离 为 abs(i - j) ，其中 abs 是绝对值函数。
示例 1： 输入： s = &amp;ldquo;loveleetcode&amp;rdquo;, c = &amp;ldquo;e&amp;rdquo;
输出： [3,2,1,0,1,0,0,1,2,2,1,0]
解释： 字符 &amp;rsquo;e&amp;rsquo; 出现在下标 3、5、6 和 11 处（下标从 0 开始计数）。
距下标 0 最近的 &amp;rsquo;e&amp;rsquo; 出现在下标 3 ，所以距离为 abs(0 - 3) = 3 。</description>
    </item>
    
    <item>
      <title>Leetcode 2024. 考试的最大困扰度</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-2024.-%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9B%B0%E6%89%B0%E5%BA%A6/</link>
      <pubDate>Tue, 29 Mar 2022 11:40:26 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-2024.-%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9B%B0%E6%89%B0%E5%BA%A6/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam/
难度： 中等
题目描述 一位老师正在出一场由 n 道判断题构成的考试，每道题的答案为 true （用 &#39;T&#39; 表示）或者 false （用 &#39;F&#39; 表示）。老师想增加学生对自己做出答案的不确定性，方法是 最大化 有 连续相同 结果的题数。（也就是连续出现 true 或者连续出现 false）。
给你一个字符串 answerKey ，其中 answerKey[i] 是第 i 个问题的正确结果。除此以外，还给你一个整数 k ，表示你能进行以下操作的最多次数：
每次操作中，将问题的正确答案改为 &#39;T&#39; 或者 &#39;F&#39; （也就是将 answerKey[i] 改为 &#39;T&#39; 或者 &#39;F&#39; ）。 请你返回在不超过 k 次操作的情况下，最大 连续 &#39;T&#39; 或者 &#39;F&#39; 的数目。
示例 1： 输入： answerKey = &amp;ldquo;TTFF&amp;rdquo;, k = 2
输出： 4
解释： 我们可以将两个 &amp;lsquo;F&amp;rsquo; 都变为 &amp;lsquo;T&amp;rsquo; ，得到 answerKey = &amp;ldquo;TTTT&amp;rdquo; 。</description>
    </item>
    
    <item>
      <title>Leetcode 219. 存在重复元素 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-219.-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii/</link>
      <pubDate>Wed, 19 Jan 2022 09:31:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-219.-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii/</guid>
      <description>链接： https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/
难度： 中等
题目描述 给你一个整数数组 nums 和一个整数 k ，判断数组中是否存在两个 不同的索引 i 和 j ，满足 nums[i] == nums[j] 且 abs(i - j) &amp;lt;= k 。如果存在，返回 true ；否则，返回 false 。
示例 1： 输入：nums = [1,2,3,1], k = 3 输出：true
示例 2： 输入：nums = [1,0,1,1], k = 1 输出：true
示例 3： 输入：nums = [1,2,3,1,2,3], k = 2 输出：false
提示： 1 &amp;lt;= nums.length &amp;lt;= 105 -109 &amp;lt;= nums[i] &amp;lt;= 109 0 &amp;lt;= k &amp;lt;= 105 解题思路 暴力求解 对于每个 i，枚举满足 abs(i - j) &amp;lt;= k 的所有 j，判断是否存在与 nums[i] 相等的数。</description>
    </item>
    
    <item>
      <title>Leetcode 438. 找到字符串中所有字母异位词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-438.-%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</link>
      <pubDate>Sun, 28 Nov 2021 10:03:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-438.-%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/
难度： 中等
题目描述 给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。
异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。
示例 1： 输入： s = &amp;ldquo;cbaebabacd&amp;rdquo;, p = &amp;ldquo;abc&amp;rdquo;
输出： [0,6]
解释：
起始索引等于 0 的子串是 &amp;ldquo;cba&amp;rdquo;, 它是 &amp;ldquo;abc&amp;rdquo; 的异位词。
起始索引等于 6 的子串是 &amp;ldquo;bac&amp;rdquo;, 它是 &amp;ldquo;abc&amp;rdquo; 的异位词。
示例 2： 输入： s = &amp;ldquo;abab&amp;rdquo;, p = &amp;ldquo;ab&amp;rdquo;
输出： [0,1,2]
解释：
起始索引等于 0 的子串是 &amp;ldquo;ab&amp;rdquo;, 它是 &amp;ldquo;ab&amp;rdquo; 的异位词。
起始索引等于 1 的子串是 &amp;ldquo;ba&amp;rdquo;, 它是 &amp;ldquo;ab&amp;rdquo; 的异位词。
起始索引等于 2 的子串是 &amp;ldquo;ab&amp;rdquo;, 它是 &amp;ldquo;ab&amp;rdquo; 的异位词。</description>
    </item>
    
    <item>
      <title>Leetcode 594. 最长和谐子序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-594.-%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sat, 20 Nov 2021 23:59:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-594.-%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-harmonious-subsequence/
难度： 简单
题目描述 和谐数组是指一个数组里元素的最大值和最小值之间的差别 正好是 1 。
现在，给你一个整数数组 nums ，请你在所有可能的子序列中找到最长的和谐子序列的长度。
数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。
示例 1： 输入： nums = [1,3,2,2,5,2,3,7]
输出： 5
解释： 最长的和谐子序列是 [3,2,2,2,3]
示例 2： 输入： nums = [1,2,3,4]
输出： 2
示例 3： 输入： nums = [1,1,1,1]
输出： 0
提示： 1 &amp;lt;= nums.length &amp;lt;= 2 * 104 -109 &amp;lt;= nums[i] &amp;lt;= 109 解题思路 排序 + 滑动窗口 将整个数组排序，两段相邻的元素相同的子数组，并且差值为 1 时，在原数组中可以构成和谐数组，记录最大值。
func findLHS(nums []int) int { sort.Ints(nums) max := 0 begin := 0 for i, num := range nums { // 无法构成和谐数组，当前窗口向右滑动 if num-nums[begin] &amp;gt; 1 { begin++ } if num-nums[begin] == 1 &amp;amp;&amp;amp; max &amp;lt; i-begin+1 { max = i - begin + 1 } } return max } 复杂度 时间复杂度：$ O(N\log{N}), N = len(nums) $ 空间复杂度：$ O(\log{N}) $ 哈希 使用哈希表记录每个数字出现的次数。</description>
    </item>
    
    <item>
      <title>Leetcode 1838. 最高频元素的频数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1838.-%E6%9C%80%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0%E7%9A%84%E9%A2%91%E6%95%B0/</link>
      <pubDate>Mon, 19 Jul 2021 10:31:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1838.-%E6%9C%80%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0%E7%9A%84%E9%A2%91%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/
难度： 中等
题目描述 元素的 频数 是该元素在一个数组中出现的次数。
给你一个整数数组 nums 和一个整数 k 。在一步操作中，你可以选择 nums 的一个下标，并将该下标对应元素的值增加 1 。
执行最多 k 次操作后，返回数组中最高频元素的 最大可能频数 。
示例 1： 输入： nums = [1,2,4], k = 5
输出： 3
解释： 对第一个元素执行 3 次递增操作，对第二个元素执 2 次递增操作，此时 nums = [4,4,4] 。
4 是数组中最高频元素，频数是 3 。
示例 2： 输入： nums = [1,4,8,13], k = 5
输出： 2
解释： 存在多种最优解决方案：
对第一个元素执行 3 次递增操作，此时 nums = [4,4,8,13] 。4 是数组中最高频元素，频数是 2 。 对第二个元素执行 4 次递增操作，此时 nums = [1,8,8,13] 。8 是数组中最高频元素，频数是 2 。 对第三个元素执行 5 次递增操作，此时 nums = [1,4,13,13] 。13 是数组中最高频元素，频数是 2 。 示例 3： 输入： nums = [3,9,6], k = 2</description>
    </item>
    
  </channel>
</rss>
