<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sort on 贺贤良</title>
    <link>https://xianlianghe0123.github.io/tags/sort/</link>
    <description>Recent content in sort on 贺贤良</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <lastBuildDate>Thu, 28 Jul 2022 09:45:01 +0800</lastBuildDate><atom:link href="https://xianlianghe0123.github.io/tags/sort/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 1331. 数组序号转换</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1331.-%E6%95%B0%E7%BB%84%E5%BA%8F%E5%8F%B7%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Thu, 28 Jul 2022 09:45:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1331.-%E6%95%B0%E7%BB%84%E5%BA%8F%E5%8F%B7%E8%BD%AC%E6%8D%A2/</guid>
      <description>链接： https://leetcode.cn/problems/rank-transform-of-an-array/
难度： 简单
题目描述 给你一个整数数组 arr ，请你将数组中的每个元素替换为它们排序后的序号。
序号代表了一个元素有多大。序号编号的规则如下：
序号从 1 开始编号。 一个元素越大，那么序号越大。如果两个元素相等，那么它们的序号相同。 每个数字的序号都应该尽可能地小。 示例 1： 输入： arr = [40,10,20,30]
输出： [4,1,2,3]
解释： 40 是最大的元素。 10 是最小的元素。 20 是第二小的数字。 30 是第三小的数字。
示例 2： 输入： arr = [100,100,100]
输出： [1,1,1]
解释： 所有元素有相同的序号。
示例 3： 输入： arr = [37,12,28,9,100,56,80,5,12]
输出： [5,3,4,2,8,6,7,1,3]
提示： 0 &amp;lt;= arr.length &amp;lt;= 105 -109 &amp;lt;= arr[i] &amp;lt;= 109 解题思路 排序 &amp;amp; 哈希 按照元素大小进行一轮排序，然后使用哈希表去重并记录元素的序号。
最后按照原来的元素顺序查表得到结果。
func arrayRankTransform(arr []int) []int { ans := make([]int, len(arr)) copy(ans, arr) sort.</description>
    </item>
    
    <item>
      <title>Leetcode 1206. 设计跳表</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1206.-%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8/</link>
      <pubDate>Tue, 26 Jul 2022 20:06:39 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1206.-%E8%AE%BE%E8%AE%A1%E8%B7%B3%E8%A1%A8/</guid>
      <description>链接： https://leetcode.cn/problems/design-skiplist/
难度： 困难
题目描述 不使用任何库函数，设计一个 跳表 。
跳表 是在 O(log(n)) 时间内完成增加、删除、搜索操作的数据结构。跳表相比于树堆与红黑树，其功能与性能相当，并且跳表的代码长度相较下更短，其设计思想与链表相似。
例如，一个跳表包含 [30, 40, 50, 60, 70, 90] ，然后增加 80、45 到跳表中，以下图的方式操作：
Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons
跳表中有很多层，每一层是一个短的链表。在第一层的作用下，增加、删除和搜索操作的时间复杂度不超过 O(n)。跳表的每一个操作的平均时间复杂度是 O(log(n))，空间复杂度是 O(n)。
了解更多 : https://en.wikipedia.org/wiki/Skip_list
在本题中，你的设计应该要包含这些函数：
bool search(int target): 返回 target 是否存在于跳表中。 void add(int num): 插入一个元素到跳表。 bool erase(int num): 在跳表中删除一个值，如果 num 不存在，直接返回 false. 如果存在多个 num ，删除其中任意一个即可。 注意，跳表中可能存在多个相同的值，你的代码需要处理这种情况。
示例： 输入
[&amp;ldquo;Skiplist&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;search&amp;rdquo;, &amp;ldquo;add&amp;rdquo;, &amp;ldquo;search&amp;rdquo;, &amp;ldquo;erase&amp;rdquo;, &amp;ldquo;erase&amp;rdquo;, &amp;ldquo;search&amp;rdquo;]</description>
    </item>
    
    <item>
      <title>Leetcode 1200. 最小绝对差</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1200.-%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/</link>
      <pubDate>Mon, 04 Jul 2022 10:17:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1200.-%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/</guid>
      <description>链接： https://leetcode.cn/problems/minimum-absolute-difference/
难度： 简单
题目描述 给你个整数数组 arr，其中每个元素都 不相同。
请你找到所有具有最小绝对差的元素对，并且按升序的顺序返回。
示例 1： 输入： arr = [4,2,1,3]
输出： [[1,2],[2,3],[3,4]]
示例 2： 输入： arr = [1,3,6,10,15]
输出： [[1,3]]
示例 3： 输入： arr = [3,8,-10,23,19,-4,-14,27]
输出： [[-14,-10],[19,23],[23,27]]
提示： 2 &amp;lt;= arr.length &amp;lt;= 105 -106 &amp;lt;= arr[i] &amp;lt;= 106 解题思路 排序 将原数组从小到大排序，则最小差值一定出现在两个相邻的元素之间，依次遍历判断寻找：
当当前差值大于最小差值时，忽略； 当当前差值等于最小差值时，加入到结果数组中； 当当前差值小于最小差值时，之前保留的结果无效，进行清空，并将当前元素对加入到结果数组中； func minimumAbsDifference(arr []int) [][]int { sort.Ints(arr) ans := make([][]int, 0, len(arr)) minDiff := math.MaxInt for i := 1; i &amp;lt; len(arr); i++ { diff := arr[i] - arr[i-1] if minDiff &amp;lt; diff { continue } if minDiff &amp;gt; diff { minDiff = diff ans = ans[:0] } ans = append(ans, []int{arr[i-1], arr[i]}) } return ans } 复杂度 时间复杂度：$ O(N\log{N}), N = len(arr) $ 空间复杂度：$ O(\log{N}) $ </description>
    </item>
    
    <item>
      <title>Leetcode 1051. 高度检查器</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1051.-%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8/</link>
      <pubDate>Mon, 13 Jun 2022 10:52:02 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1051.-%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8/</guid>
      <description>链接： https://leetcode.cn/problems/height-checker/
难度： 简单
题目描述 学校打算为全体学生拍一张年度纪念照。根据要求，学生需要按照 非递减 的高度顺序排成一行。
排序后的高度情况用整数数组 expected 表示，其中 expected[i] 是预计排在这一行中第 i 位的学生的高度（下标从 0 开始）。
给你一个整数数组 heights ，表示 当前学生站位 的高度情况。heights[i] 是这一行中第 i 位学生的高度（下标从 0 开始）。
返回满足 heights[i] != expected[i] 的 下标数量 。
示例 1： 输入： heights = [1,1,4,2,1,3]
输出： 3
解释：
高度：[1,1,4,2,1,3]
预期：[1,1,1,2,3,4]
下标 2 、4 、5 处的学生高度不匹配。
示例 2： 输入： heights = [5,1,2,3,4]
输出： 5
解释：
高度：[5,1,2,3,4]
预期：[1,2,3,4,5]
所有下标的对应学生高度都不匹配。
示例 3： 输入： heights = [1,2,3,4,5]
输出： 0</description>
    </item>
    
    <item>
      <title>Leetcode 436. 寻找右区间</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-436.-%E5%AF%BB%E6%89%BE%E5%8F%B3%E5%8C%BA%E9%97%B4/</link>
      <pubDate>Fri, 20 May 2022 10:31:43 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-436.-%E5%AF%BB%E6%89%BE%E5%8F%B3%E5%8C%BA%E9%97%B4/</guid>
      <description>链接： https://leetcode.cn/problems/find-right-interval/
难度： 中等
题目描述 给你一个区间数组 intervals ，其中 intervals[i] = [starti, endi] ，且每个 starti 都 不同 。
区间 i 的 右侧区间 可以记作区间 j ，并满足 startj &amp;gt;= endi ，且 startj 最小化 。
返回一个由每个区间 i 的 右侧区间 的最小起始位置组成的数组。如果某个区间 i 不存在对应的 右侧区间 ，则下标 i 处的值设为 -1 。
示例 1： 输入： intervals = [[1,2]]
输出： [-1]
解释： 集合中只有一个区间，所以输出-1。
示例 2： 输入： intervals = [[3,4],[2,3],[1,2]]
输出： [-1,0,1]
解释： 对于 [3,4] ，没有满足条件的“右侧”区间。
对于 [2,3] ，区间[3,4]具有最小的“右”起点;
对于 [1,2] ，区间[2,3]具有最小的“右”起点。</description>
    </item>
    
    <item>
      <title>Leetcode 462. 最少移动次数使数组元素相等 II</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-462.-%E6%9C%80%E5%B0%91%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89-ii/</link>
      <pubDate>Thu, 19 May 2022 10:27:46 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-462.-%E6%9C%80%E5%B0%91%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89-ii/</guid>
      <description>链接： https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/
难度： 简单
题目描述 给你一个长度为 n 的整数数组 nums ，返回使所有数组元素相等需要的最少移动数。
在一步操作中，你可以使数组中的一个元素加 1 或者减 1 。
示例 1： 输入： nums = [1,2,3]
输出： 2
解释：
只需要两步操作（每步操作指南使一个元素加 1 或减 1）：
[1,2,3] =&amp;gt; [2,2,3] =&amp;gt; [2,2,2]
示例 2： 输入： nums = [1,10,2,9]
输出： 16
提示： n == nums.length 1 &amp;lt;= nums.length &amp;lt;= 105 -109 &amp;lt;= nums[i] &amp;lt;= 109 解题思路 排序 将数组排序，首先计算出全部变换为最小数的移动次数。
然后向后遍历，依次计算变换为每一个数的移动次数，从中找出最小值。
设当前要变换的数下标为 i，则之前元素从 nums[i-1] 变换为 nums[i] 的变换次数 (nums[i] - nums[i-1]) * i 需要加上，之后多余计算的变换次数 (nums[i] - nums[i-1]) * (len(nums) - i) 需要减去。</description>
    </item>
    
    <item>
      <title>Leetcode 1305. 两棵二叉搜索树中的所有元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1305.-%E4%B8%A4%E6%A3%B5%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sun, 01 May 2022 09:22:48 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1305.-%E4%B8%A4%E6%A3%B5%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees/
难度： 中等
题目描述 给你 root1 和 root2 这两棵二叉搜索树。请你返回一个列表，其中包含 两棵树 中的所有整数并按 升序 排序。
示例 1： 输入： root1 = [2,1,4], root2 = [1,0,3]
输出： [0,1,1,2,3,4]
示例 2： 输入： root1 = [1,null,8], root2 = [8,1]
输出： [1,1,8,8]
提示： 每棵树的节点数在 [0, 5000] 范围内 -105 &amp;lt;= Node.val &amp;lt;= 105 解题思路 中序遍历 + 归并排序 两颗树都是二叉搜索树，所以分别对齐进行中序遍历，将得到两个有序的数组。
最后将这两个有序数组合并为一个有序数组，采用归并排序。
func getAllElements(root1 *TreeNode, root2 *TreeNode) []int { // 中序遍历 var dfs func(node *TreeNode, nums *[]int) dfs = func(node *TreeNode, nums *[]int) { if node == nil { return } dfs(node.</description>
    </item>
    
    <item>
      <title>Leetcode 386. 字典序排数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-386.-%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E6%95%B0/</link>
      <pubDate>Mon, 18 Apr 2022 09:33:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-386.-%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/lexicographical-numbers/
难度： 中等
题目描述 给你一个整数 n ，按字典序返回范围 [1, n] 内所有整数。
你必须设计一个时间复杂度为 $ O(n) $ 且使用 $ O(1) $ 额外空间的算法。
示例 1： 输入： n = 13
输出： [1,10,11,12,13,2,3,4,5,6,7,8,9]
示例 2： 输入： n = 2
输出： [1,2]
提示： 1 &amp;lt;= n &amp;lt;= 5 * 104 解题思路 自定义排序 生成 [1, n] 的数组，自定义排序规则：将两个数转化为字符串进行比较。完成一轮排序返回即可。
func lexicalOrder(n int) []int { nums := make([]int, 0, n) for i := 1; i &amp;lt;= n; i++ { nums = append(nums, i) } sort.</description>
    </item>
    
    <item>
      <title>Leetcode 954. 二倍数对数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-954.-%E4%BA%8C%E5%80%8D%E6%95%B0%E5%AF%B9%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 01 Apr 2022 10:21:31 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-954.-%E4%BA%8C%E5%80%8D%E6%95%B0%E5%AF%B9%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/range-sum-of-bst/
难度： 中等
题目描述 给定一个长度为偶数的整数数组 arr，只有对 arr 进行重组后可以满足 “对于每个 0 &amp;lt;= i &amp;lt; len(arr) / 2，都有 arr[2 * i + 1] = 2 * arr[2 * i]” 时，返回 true；否则，返回 false。
示例 1： 输入： arr = [3,1,3,6]
输出： false
示例 2： 输入： arr = [2,1,2,6]
输出： false
示例 3： 输入： arr = [4,-2,2,-4]
输出： true
解释： 可以用 [-2,-4] 和 [2,4] 这两组组成 [-2,-4,2,4] 或是 [2,4,-2,-4]
提示： 0 &amp;lt;= arr.length &amp;lt;= 3 * 104 arr.</description>
    </item>
    
    <item>
      <title>Leetcode 1984. 学生分数的最小差值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1984.-%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/</link>
      <pubDate>Fri, 11 Feb 2022 18:09:21 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1984.-%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/
难度： 简单
题目描述 给你一个 下标从 0 开始 的整数数组 nums ，其中 nums[i] 表示第 i 名学生的分数。另给你一个整数 k 。
从数组中选出任意 k 名学生的分数，使这 k 个分数间 最高分 和 最低分 的 差值 达到 最小化 。
返回可能的 最小差值 。
示例 1： 输入： nums = [90], k = 1
输出： 0
解释： 选出 1 名学生的分数，仅有 1 种方法：
[90] 最高分和最低分之间的差值是 90 - 90 = 0
可能的最小差值是 0 示例 2： 输入：nums = [9,4,1,7], k = 2
输出：2
解释：选出 2 名学生的分数，有 6 种方法：</description>
    </item>
    
    <item>
      <title>Leetcode 507. 完美数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-507.-%E5%AE%8C%E7%BE%8E%E6%95%B0/</link>
      <pubDate>Fri, 31 Dec 2021 10:19:45 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-507.-%E5%AE%8C%E7%BE%8E%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/perfect-number/
难度： 简单
题目描述 对于一个 正整数，如果它和除了它自身以外的所有 正因子 之和相等，我们称它为 「完美数」。
给定一个 整数 n， 如果是完美数，返回 true，否则返回 false
示例 1： 输入： num = 28
输出： true
解释： 28 = 1 + 2 + 4 + 7 + 14
1, 2, 4, 7, 和 14 是 28 的所有正因子。
示例 2： 输入： num = 6
输出： true
示例 3： 输入： num = 496
输出： true
示例 4： 输入： num = 8128
输出： true
示例 5： 输入： num = 2</description>
    </item>
    
    <item>
      <title>Leetcode 472. 连接词</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-472.-%E8%BF%9E%E6%8E%A5%E8%AF%8D/</link>
      <pubDate>Tue, 28 Dec 2021 11:53:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-472.-%E8%BF%9E%E6%8E%A5%E8%AF%8D/</guid>
      <description>链接： https://leetcode-cn.com/problems/concatenated-words/
难度： 困难
题目描述 给你一个 不含重复 单词的字符串数组 words ，请你找出并返回 words 中的所有 连接词 。
连接词 定义为：一个完全由给定数组中的至少两个较短单词组成的字符串。
示例 1： 输入： words = [&amp;ldquo;cat&amp;rdquo;,&amp;ldquo;cats&amp;rdquo;,&amp;ldquo;catsdogcats&amp;rdquo;,&amp;ldquo;dog&amp;rdquo;,&amp;ldquo;dogcatsdog&amp;rdquo;,&amp;ldquo;hippopotamuses&amp;rdquo;,&amp;ldquo;rat&amp;rdquo;,&amp;ldquo;ratcatdogcat&amp;rdquo;]
输出： [&amp;ldquo;catsdogcats&amp;rdquo;,&amp;ldquo;dogcatsdog&amp;rdquo;,&amp;ldquo;ratcatdogcat&amp;rdquo;]
解释： &amp;ldquo;catsdogcats&amp;rdquo; 由 &amp;ldquo;cats&amp;rdquo;, &amp;ldquo;dog&amp;rdquo; 和 &amp;ldquo;cats&amp;rdquo; 组成;
&amp;ldquo;dogcatsdog&amp;rdquo; 由 &amp;ldquo;dog&amp;rdquo;, &amp;ldquo;cats&amp;rdquo; 和 &amp;ldquo;dog&amp;rdquo; 组成;
&amp;ldquo;ratcatdogcat&amp;rdquo; 由 &amp;ldquo;rat&amp;rdquo;, &amp;ldquo;cat&amp;rdquo;, &amp;ldquo;dog&amp;rdquo; 和 &amp;ldquo;cat&amp;rdquo; 组成。
示例 2： 输入： words = [&amp;ldquo;cat&amp;rdquo;,&amp;ldquo;dog&amp;rdquo;,&amp;ldquo;catdog&amp;rdquo;]
输出： [&amp;ldquo;catdog&amp;rdquo;]
提示： 1 &amp;lt;= words.length &amp;lt;= 104 0 &amp;lt;= words[i].length &amp;lt;= 1000 words[i] 仅由小写字母组成 0 &amp;lt;= sum(words[i].</description>
    </item>
    
    <item>
      <title>Leetcode 825. 适龄的朋友</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-825.-%E9%80%82%E9%BE%84%E7%9A%84%E6%9C%8B%E5%8F%8B/</link>
      <pubDate>Mon, 27 Dec 2021 10:14:24 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-825.-%E9%80%82%E9%BE%84%E7%9A%84%E6%9C%8B%E5%8F%8B/</guid>
      <description>链接： https://leetcode-cn.com/problems/friends-of-appropriate-ages/
难度： 中等
题目描述 在社交媒体网站上有 n 个用户。给你一个整数数组 ages ，其中 ages[i] 是第 i 个用户的年龄。
如果下述任意一个条件为真，那么用户 x 将不会向用户 y（x != y）发送好友请求：
age[y] &amp;lt;= 0.5 * age[x] + 7 age[y] &amp;gt; age[x] age[y] &amp;gt; 100 &amp;amp;&amp;amp; age[x] &amp;lt; 100 否则，x 将会向 y 发送一条好友请求。
注意，如果 x 向 y 发送一条好友请求，y 不必也向 x 发送一条好友请求。另外，用户不会向自己发送好友请求。
返回在该社交媒体网站上产生的好友请求总数。
示例 1： 输入： ages = [16,16]
输出： 2
解释： 2 人互发好友请求。
示例 2： 输入： ages = [16,17,18]
输出： 2
解释： 产生的好友请求为 17 -&amp;gt; 16 ，18 -&amp;gt; 17 。</description>
    </item>
    
    <item>
      <title>Leetcode 1005. K 次取反后最大化的数组和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1005.-k-%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/</link>
      <pubDate>Fri, 03 Dec 2021 10:16:51 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1005.-k-%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/
难度： 简单
题目描述 给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组：
选择某个下标 i 并将 nums[i] 替换为 -nums[i] 。 重复这个过程恰好 k 次。可以多次选择同一个下标 i 。
以这种方式修改数组后，返回数组 可能的最大和 。
示例 1： 输入： nums = [4,2,3], k = 1
输出： 5
解释： 选择下标 1 ，nums 变为 [4,-2,3] 。
示例 2： 输入： nums = [3,-1,0,2], k = 3
输出： 6
解释： 选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。
示例 3： 输入： nums = [2,-3,-1,5,-4], k = 2</description>
    </item>
    
    <item>
      <title>Leetcode 506. 相对名次</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-506.-%E7%9B%B8%E5%AF%B9%E5%90%8D%E6%AC%A1/</link>
      <pubDate>Thu, 02 Dec 2021 19:55:32 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-506.-%E7%9B%B8%E5%AF%B9%E5%90%8D%E6%AC%A1/</guid>
      <description>链接： https://leetcode-cn.com/problems/relative-ranks/
难度： 简单
题目描述 给你一个长度为 n 的整数数组 score ，其中 score[i] 是第 i 位运动员在比赛中的得分。所有得分都 互不相同 。
运动员将根据得分 决定名次 ，其中名次第 1 的运动员得分最高，名次第 2 的运动员得分第 2 高，依此类推。运动员的名次决定了他们的获奖情况：
名次第 1 的运动员获金牌 &amp;quot;Gold Medal&amp;quot; 。 名次第 2 的运动员获银牌 &amp;quot;Silver Medal&amp;quot; 。 名次第 3 的运动员获铜牌 &amp;quot;Bronze Medal&amp;quot; 。 从名次第 4 到第 n 的运动员，只能获得他们的名次编号（即，名次第 x 的运动员获得编号 &amp;quot;x&amp;quot;）。 使用长度为 n 的数组 answer 返回获奖，其中 answer[i] 是第 i 位运动员的获奖情况。
示例 1： 输入： score = [5,4,3,2,1]
输出： [&amp;ldquo;Gold Medal&amp;rdquo;,&amp;ldquo;Silver Medal&amp;rdquo;,&amp;ldquo;Bronze Medal&amp;rdquo;,&amp;ldquo;4&amp;rdquo;,&amp;ldquo;5&amp;rdquo;]</description>
    </item>
    
    <item>
      <title>Leetcode 786. 第 K 个最小的素数分数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-786.-%E7%AC%AC-k-%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/</link>
      <pubDate>Mon, 29 Nov 2021 10:26:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-786.-%E7%AC%AC-k-%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%86%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/k-th-smallest-prime-fraction/
难度： 困难
题目描述 给你一个按递增顺序排序的数组 arr 和一个整数 k 。数组 arr 由 1 和若干 素数 组成，且其中所有整数互不相同。
对于每对满足 0 &amp;lt; i &amp;lt; j &amp;lt; arr.length 的 i 和 j ，可以得到分数 arr[i] / arr[j] 。
那么第 k 个最小的分数是多少呢? 以长度为 2 的整数数组返回你的答案, 这里 answer[0] == arr[i] 且 answer[1] == arr[j] 。
示例 1： 输入： arr = [1,2,3,5], k = 3
输出： [2,5]
解释： 已构造好的分数,排序后如下所示:
1/5, 1/3, 2/5, 1/2, 3/5, 2/3
很明显第三个最小的分数是 2/5
示例 2： 输入： arr = [1,7], k = 1</description>
    </item>
    
    <item>
      <title>Leetcode 594. 最长和谐子序列</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-594.-%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sat, 20 Nov 2021 23:59:35 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-594.-%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/longest-harmonious-subsequence/
难度： 简单
题目描述 和谐数组是指一个数组里元素的最大值和最小值之间的差别 正好是 1 。
现在，给你一个整数数组 nums ，请你在所有可能的子序列中找到最长的和谐子序列的长度。
数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。
示例 1： 输入： nums = [1,3,2,2,5,2,3,7]
输出： 5
解释： 最长的和谐子序列是 [3,2,2,2,3]
示例 2： 输入： nums = [1,2,3,4]
输出： 2
示例 3： 输入： nums = [1,1,1,1]
输出： 0
提示： 1 &amp;lt;= nums.length &amp;lt;= 2 * 104 -109 &amp;lt;= nums[i] &amp;lt;= 109 解题思路 排序 + 滑动窗口 将整个数组排序，两段相邻的元素相同的子数组，并且差值为 1 时，在原数组中可以构成和谐数组，记录最大值。
func findLHS(nums []int) int { sort.Ints(nums) max := 0 begin := 0 for i, num := range nums { // 无法构成和谐数组，当前窗口向右滑动 if num-nums[begin] &amp;gt; 1 { begin++ } if num-nums[begin] == 1 &amp;amp;&amp;amp; max &amp;lt; i-begin+1 { max = i - begin + 1 } } return max } 复杂度 时间复杂度：$ O(N\log{N}), N = len(nums) $ 空间复杂度：$ O(\log{N}) $ 哈希 使用哈希表记录每个数字出现的次数。</description>
    </item>
    
    <item>
      <title>Leetcode 268. 丢失的数字</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-268.-%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sat, 06 Nov 2021 12:14:29 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-268.-%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/missing-number/
难度： 简单
题目描述 给定一个包含 [0, n] 中 n 个数的数组 nums ，找出 [0, n] 这个范围内没有出现在数组中的那个数。
示例 1： 输入： nums = [3,0,1]
输出： 2
解释： n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。
示例 2： 输入： nums = [0,1]
输出： 2
解释： n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。
示例 3： 输入： nums = [9,6,4,2,3,5,7,0,1]
输出： 8
解释： n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。</description>
    </item>
    
    <item>
      <title>剑指 Offer 61. 扑克牌中的顺子</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-61.-%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/</link>
      <pubDate>Fri, 01 Oct 2021 14:17:17 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-61.-%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/</guid>
      <description>链接： https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/
难度： 简单
题目描述 从若干副扑克牌中随机抽 5 张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。
示例 1： 输入: [1,2,3,4,5]
输出: True
示例 2： 输入: [0,0,1,2,5]
输出: True
限制： 数组长度为 5 数组的数取值为 [0, 13] . 解题思路 排序 排序，统计大小王的数量，判断其余相邻牌的差值：
当差值为 0 时，不构成顺子，返回 false； 当差值不为 0 时，使用大小王去补。 最后，当大小王数量不为负时，返回 true，否则返回 false 。 func isStraight(nums []int) bool { sort.Ints(nums) cnt := 0 for i := 0; i &amp;lt; len(nums); i++ { if nums[i] == 0 { cnt++ continue } if i-1 &amp;gt;= 0 &amp;amp;&amp;amp; nums[i-1] !</description>
    </item>
    
    <item>
      <title>剑指 Offer 45. 把数组排成最小的数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-45.-%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</link>
      <pubDate>Mon, 20 Sep 2021 19:50:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-45.-%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/
难度： 中等
题目描述 输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。
示例 1： 输入: [10,2]
输出: &amp;ldquo;102&amp;rdquo;
示例 2： 输入: [3,30,34,5,9]
输出: &amp;ldquo;3033459&amp;rdquo;
提示： 0 &amp;lt; nums.length &amp;lt;= 100 说明： 输出结果可能非常大，所以你需要返回一个字符串而不是整数 拼接起来的数字可能会有前导 0，最后结果不需要去掉前导 0 解题思路 排序 对于两个数 x、y，若 xy &amp;lt; yx，则 x 必然在 y 的前面，证明如下：
当这两个数相邻，则成立 两数不相邻，不妨设 xzy，则有 xz &amp;lt; zx，zy &amp;lt; yz，需要证明 xzy &amp;lt; yzx xz &amp;lt; zx =&amp;gt; x * 10^len(x) + z &amp;lt; z * 10^len(z) + x zy &amp;lt; yz =&amp;gt; z * 10^len(z) + y &amp;lt; y * 10^len(y) + z 相加得到 x * 10^len(x) + y &amp;lt; y * 10^len(y) + z，即 xy &amp;lt; yx，所以 xzy &amp;lt; yzx成立。 按照上述方案自定义排序规则排序，之后按顺序拼接起来返回。</description>
    </item>
    
    <item>
      <title>剑指 Offer 40. 最小的k个数</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-40.-%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Mon, 20 Sep 2021 16:17:39 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-40.-%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/
难度： 简单
题目描述 输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。
示例 1： 输入： arr = [3,2,1], k = 2
输出： [1,2] 或者 [2,1]
示例 2： 输入： arr = [0,1,2,1], k = 1
输出： [0]
限制： 0 &amp;lt;= k &amp;lt;= arr.length &amp;lt;= 10000 0 &amp;lt;= arr[i] &amp;lt;= 10000 解题思路 排序 对数组进行排序，返回前 k 个数。
func getLeastNumbers(arr []int, k int) []int { sort.Ints(arr) return arr[:k] } 复杂度 时间复杂度：$ O(N\log{N}), N = len(arr) $ 空间复杂度：$ O(\log{N}) $ 堆 使用大顶堆维护最小的 k 个数。遍历数组，当堆不满 k 时，入堆；否则，当前元素小于堆顶元素时，弹出最大元素，当前元素入堆。</description>
    </item>
    
    <item>
      <title>剑指 Offer 39. 数组中出现次数超过一半的数字</title>
      <link>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-39.-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 20 Sep 2021 16:00:42 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E5%89%91%E6%8C%87-offer-39.-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>链接： https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/
难度： 简单
题目描述 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。
你可以假设数组是非空的，并且给定的数组总是存在多数元素。
示例： 输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]
输出: 2
提示： 1 &amp;lt;= 数组长度 &amp;lt;= 50000 解题思路 哈希 遍历数组，用哈希表记录每个元素的出现次数，当超过半数时返回。
func majorityElement(nums []int) int { cnt := make(map[int]int) for _, num := range nums { cnt[num]++ if cnt[num] &amp;gt; len(nums)/2 { return num } } return 0 } 复杂度 时间复杂度：$ O(N), N = len(nums) $ 空间复杂度：$ O(N) $ 排序 对数组排序，位于中间位置对必为多数元素。
func majorityElement(nums []int) int { sort.</description>
    </item>
    
    <item>
      <title>面试题 17.14. 最小K个数</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.14.-%E6%9C%80%E5%B0%8Fk%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Fri, 03 Sep 2021 11:30:22 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.14.-%E6%9C%80%E5%B0%8Fk%E4%B8%AA%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/smallest-k-lcci/
难度： 中等
题目描述 设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。
示例： 输入： arr = [1,3,5,7,2,4,6,8], k = 4
输出： [1,2,3,4]
提示： 0 &amp;lt;= len(arr) &amp;lt;= 100000 0 &amp;lt;= k &amp;lt;= min(100000, len(arr)) 解题思路 排序 对原数组排序，返回前 k 个元素。
func smallestK(arr []int, k int) []int { sort.Ints(arr) return arr[:k] } 复杂度 时间复杂度：$ O(N\log N), N = len(arr) $ 空间复杂度：$ O(\log N) $ 堆 构建一个大顶堆，保存前 k 个最小的数。遍历 arr 数组
当堆中元素数量不足 k 时，入堆； 当堆中元素书数量为 k 时，与堆顶元素比较 当堆顶元素为较大时，弹出队顶元素，当前元素入堆 否则，忽略当前元素 遍历结束，返回堆中所有元素。</description>
    </item>
    
    <item>
      <title>Leetcode 611. 有效三角形的个数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-611.-%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Wed, 04 Aug 2021 10:42:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-611.-%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/valid-triangle-number/
难度： 中等
题目描述 给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。
示例： 输入: [2,2,3,4]
输出: 3
解释:
有效的组合是:
2,3,4 (使用第一个 2)
2,3,4 (使用第二个 2)
2,2,3
注意： 数组长度不超过1000。 数组里整数的范围为 [0, 1000]。 解题思路 排序 + 二分查找 构成三角形的前提条件是两边之和小于第三边，也就是说，两个小边之和大于最长的那条边。
故，首先对数组进行排序，然后依次枚举两条小边 x 和 y ，其下标为 i 和 j (不妨假设 i ≤ i，则 x ≤ y)，即得到最大边的取值范围 x+y-1， 通过二分查找，找到其最大值的位置，与 j 相减即得到可取值的数量，求和。
func triangleNumber(nums []int) int { sort.Ints(nums) res := 0 for i := 0; i &amp;lt; len(nums)-2; i++ { if nums[i] == 0 { continue } for j := i + 1; j &amp;lt; len(nums)-1; j++ { pos := sort.</description>
    </item>
    
    <item>
      <title>Leetcode 581. 最短无序连续子数组</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-581.-%E6%9C%80%E7%9F%AD%E6%97%A0%E5%BA%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 03 Aug 2021 14:28:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-581.-%E6%9C%80%E7%9F%AD%E6%97%A0%E5%BA%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/
难度： 中等
题目描述 给你一个整数数组 nums ，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。
请你找出符合题意的 最短 子数组，并输出它的长度。
示例 1： 输入： nums = [2,6,4,8,10,9,15]
输出： 5
解释： 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。
示例 2： 输入： nums = [1,2,3,4]
输出： 0
示例 3： 输入： nums = [1]
输出： 0
提示： 1 &amp;lt;= nums.length &amp;lt;= 104 -105 &amp;lt;= nums[i] &amp;lt;= 105 进阶： 你可以设计一个时间复杂度为 $O(n)$ 的解决方案吗？
解题思路 排序 对于连续子数组以外的元素，其在排序前后位置不会改变，故可以将整个数组排序后，从头和尾开始，依次找到不变的元素加以排除，剩余元素就是 最短 连续子数组。
func findUnsortedSubarray(nums []int) int { sortedNum := make([]int, len(nums)) copy(sortedNum, nums) sort.</description>
    </item>
    
    <item>
      <title>Leetcode 1337. 矩阵中战斗力最弱的 K 行</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1337.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E6%88%98%E6%96%97%E5%8A%9B%E6%9C%80%E5%BC%B1%E7%9A%84-k-%E8%A1%8C/</link>
      <pubDate>Sun, 01 Aug 2021 09:54:54 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1337.-%E7%9F%A9%E9%98%B5%E4%B8%AD%E6%88%98%E6%96%97%E5%8A%9B%E6%9C%80%E5%BC%B1%E7%9A%84-k-%E8%A1%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/
难度： 简单
题目描述 给你一个大小为 m * n 的矩阵 mat，矩阵由若干军人和平民组成，分别用 1 和 0 表示。
请你返回矩阵中战斗力最弱的 k 行的索引，按从最弱到最强排序。
如果第 i 行的军人数量少于第 j 行，或者两行军人数量相同但 i 小于 j，那么我们认为第 i 行的战斗力比第 j 行弱。
军人 总是 排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。
示例 1： 输入： mat =
[[1,1,0,0,0],
[1,1,1,1,0],
[1,0,0,0,0],
[1,1,0,0,0],
[1,1,1,1,1]],
k = 3
输出： [2,0,3]
解释：
每行中的军人数目： 行 0 -&amp;gt; 2
行 1 -&amp;gt; 4
行 2 -&amp;gt; 1
行 3 -&amp;gt; 2</description>
    </item>
    
    <item>
      <title>Leetcode 1877. 数组中最大数对和的最小值</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1877.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AF%B9%E5%92%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</link>
      <pubDate>Tue, 20 Jul 2021 09:55:22 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1877.-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AF%B9%E5%92%8C%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</guid>
      <description>链接： https://leetcode-cn.com/problems/minimize-maximum-pair-sum-in-array/
难度： 中等
题目描述 一个数对 (a,b) 的 数对和 等于 a + b 。最大数对和 是一个数对数组中最大的 数对和 。
比方说，如果我们有数对 (1,5) ，(2,3) 和 (4,4)，最大数对和 为 max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8 。 给你一个长度为 偶数 n 的数组 nums ，请你将 nums 中的元素分成 n / 2 个数对，使得：
nums 中每个元素 恰好 在 一个 数对中，且 最大数对和 的值 最小 。 请你在最优数对划分的方案下，返回最小的 最大数对和 。
示例 1： 输入： nums = [3,5,2,3]
输出： 7
解释： 数组中的元素可以分为数对 (3,3) 和 (5,2) 。</description>
    </item>
    
    <item>
      <title>Leetcode 1838. 最高频元素的频数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1838.-%E6%9C%80%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0%E7%9A%84%E9%A2%91%E6%95%B0/</link>
      <pubDate>Mon, 19 Jul 2021 10:31:28 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1838.-%E6%9C%80%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0%E7%9A%84%E9%A2%91%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/frequency-of-the-most-frequent-element/
难度： 中等
题目描述 元素的 频数 是该元素在一个数组中出现的次数。
给你一个整数数组 nums 和一个整数 k 。在一步操作中，你可以选择 nums 的一个下标，并将该下标对应元素的值增加 1 。
执行最多 k 次操作后，返回数组中最高频元素的 最大可能频数 。
示例 1： 输入： nums = [1,2,4], k = 5
输出： 3
解释： 对第一个元素执行 3 次递增操作，对第二个元素执 2 次递增操作，此时 nums = [4,4,4] 。
4 是数组中最高频元素，频数是 3 。
示例 2： 输入： nums = [1,4,8,13], k = 5
输出： 2
解释： 存在多种最优解决方案：
对第一个元素执行 3 次递增操作，此时 nums = [4,4,8,13] 。4 是数组中最高频元素，频数是 2 。 对第二个元素执行 4 次递增操作，此时 nums = [1,8,8,13] 。8 是数组中最高频元素，频数是 2 。 对第三个元素执行 5 次递增操作，此时 nums = [1,4,13,13] 。13 是数组中最高频元素，频数是 2 。 示例 3： 输入： nums = [3,9,6], k = 2</description>
    </item>
    
    <item>
      <title>面试题 10.02. 变位词组</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-10.02.-%E5%8F%98%E4%BD%8D%E8%AF%8D%E7%BB%84/</link>
      <pubDate>Sun, 18 Jul 2021 11:32:11 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-10.02.-%E5%8F%98%E4%BD%8D%E8%AF%8D%E7%BB%84/</guid>
      <description>链接： https://leetcode-cn.com/problems/group-anagrams-lcci/
难度： 中等
题目描述 编写一种方法，对字符串数组进行排序，将所有变位词组合在一起。变位词是指字母相同，但排列不同的字符串。
**注意：**本题相对原题稍作修改
示例： 输入: [&amp;ldquo;eat&amp;rdquo;, &amp;ldquo;tea&amp;rdquo;, &amp;ldquo;tan&amp;rdquo;, &amp;ldquo;ate&amp;rdquo;, &amp;ldquo;nat&amp;rdquo;, &amp;ldquo;bat&amp;rdquo;],
输出:
[
[&amp;ldquo;ate&amp;rdquo;,&amp;ldquo;eat&amp;rdquo;,&amp;ldquo;tea&amp;rdquo;],
[&amp;ldquo;nat&amp;rdquo;,&amp;ldquo;tan&amp;rdquo;],
[&amp;ldquo;bat&amp;rdquo;]
]
解题思路 哈希 &amp;amp; 计数 对于每个字符串，使用数组统计每个字母出现的数字，两个同位词得出的统计数组必然相同，故用该数组作为 key
func groupAnagrams(strs []string) [][]string { cnt := func(s string) (cnt [26]int) { for i := range s { cnt[s[i]-&amp;#39;a&amp;#39;]++ } return } hash := make(map[[26]int][]string) for _, str := range strs { key := cnt(str) hash[key] = append(hash[key], str) } res := make([][]string, 0, len(hash)) for _, v := range hash { res = append(res, v) } return res } 复杂度 时间复杂度：$ O(NL), N = len(strs), L = max(len(str)) $ 空间复杂度：$ O(NL) $ 哈希 &amp;amp; 排序 不同变位词中字母相同，所以将字符串按照字母排序后，其值也一定相同。故可以将其排序后的值作为哈希表的 key，并将其添加进 value 数组中。</description>
    </item>
    
    <item>
      <title>Leetcode 1846. 减小和重新排列数组后的最大元素</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1846.-%E5%87%8F%E5%B0%8F%E5%92%8C%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</link>
      <pubDate>Thu, 15 Jul 2021 10:33:47 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1846.-%E5%87%8F%E5%B0%8F%E5%92%8C%E9%87%8D%E6%96%B0%E6%8E%92%E5%88%97%E6%95%B0%E7%BB%84%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/
难度： 中等
题目描述 给你一个正整数数组 arr 。请你对 arr 执行一些操作（也可以不进行任何操作），使得数组满足以下条件：
arr 中 第一个 元素必须为 1 。 任意相邻两个元素的差的绝对值 小于等于 1 ，也就是说，对于任意的 1 &amp;lt;= i &amp;lt; arr.length （数组下标从 0 开始），都满足 abs(arr[i] - arr[i - 1]) &amp;lt;= 1 。abs(x) 为 x 的绝对值。 你可以执行以下 2 种操作任意次：
减小 arr 中任意元素的值，使其变为一个 更小的正整数 。 重新排列 arr 中的元素，你可以以任意顺序重新排列。 请你返回执行以上操作后，在满足前文所述的条件下，arr 中可能的 最大值 。
示例 1： 输入： arr = [2,2,1,2,1]
输出： 2
解释：
我们可以重新排列 arr 得到 [1,2,2,2,1] ，该数组满足所有条件。
arr 中最大元素为 2 。</description>
    </item>
    
    <item>
      <title>Leetcode 1818. 绝对差值和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-1818.-%E7%BB%9D%E5%AF%B9%E5%B7%AE%E5%80%BC%E5%92%8C/</link>
      <pubDate>Wed, 14 Jul 2021 10:34:23 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-1818.-%E7%BB%9D%E5%AF%B9%E5%B7%AE%E5%80%BC%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/minimum-absolute-sum-difference/
难度： 中等
题目描述 给你两个正整数数组 nums1 和 nums2 ，数组的长度都是 n 。
数组 nums1 和 nums2 的 绝对差值和 定义为所有 |nums1[i] - nums2[i]|（0 &amp;lt;= i &amp;lt; n）的 总和（下标从 0 开始）。
你可以选用 nums1 中的 任意一个 元素来替换 nums1 中的 至多 一个元素，以 最小化 绝对差值和。
在替换数组 nums1 中最多一个元素 之后 ，返回最小绝对差值和。因为答案可能很大，所以需要对 109 + 7 取余 后返回。
|x| 定义为：
如果 x &amp;gt;= 0 ，值为 x ，或者 如果 x &amp;lt;= 0 ，值为 -x 示例 1： 输入： nums1 = [1,7,5], nums2 = [2,3,5]</description>
    </item>
    
    <item>
      <title>Leetcode 274. H 指数</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-274.-h-%E6%8C%87%E6%95%B0/</link>
      <pubDate>Sun, 11 Jul 2021 12:04:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-274.-h-%E6%8C%87%E6%95%B0/</guid>
      <description>链接： https://leetcode-cn.com/problems/h-index/
难度： 中等
题目描述 给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。
h 指数的定义：h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）总共 有 h 篇论文分别被引用了至少 h 次。且其余的 $N - h$ 篇论文每篇被引用次数 不超过 h 次。
例如：某人的 h 指数是 20，这表示他已发表的论文中，每篇被引用了至少 20 次的论文总共有 20 篇。
示例： 输入： citations = [3,0,6,1,5]
输出： 3
解释： 给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。
由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。
**提示：**如果 h 有多种可能的值，h 指数是其中最大的那个。</description>
    </item>
    
    <item>
      <title>面试题 17.10. 主要元素</title>
      <link>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.10.-%E4%B8%BB%E8%A6%81%E5%85%83%E7%B4%A0/</link>
      <pubDate>Fri, 09 Jul 2021 10:46:07 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/%E9%9D%A2%E8%AF%95%E9%A2%98-17.10.-%E4%B8%BB%E8%A6%81%E5%85%83%E7%B4%A0/</guid>
      <description>链接： https://leetcode-cn.com/problems/find-majority-element-lcci/
难度： 简单
题目描述 数组中占比超过一半的元素称之为主要元素。给你一个 整数 数组，找出其中的主要元素。若没有，返回 -1 。请设计时间复杂度为 $O(N)$ 、空间复杂度为 $O(1)$ 的解决方案。
示例 1： 输入： [1,2,5,9,5,9,5,5,5]
输出： 5
示例 2： 输入： [3,2]
输出： -1
示例 3： 输入： [2,2,1,1,1,2,2]
输出： 2
解题思路 哈希计数 遍历数组，记录每个数出现的次数，直到某个数 num 出现的次数大于数组长度的一半则返回 num，否则返回 -1
func majorityElement(nums []int) int { cnt := make(map[int]int) for _, num := range nums { cnt[num]++ if cnt[num] &amp;gt; len(nums)/2 { return num } } return -1 } 复杂度 时间复杂度：$ O(N) $ 空间复杂度：$ O(N) $ 排序 将数组排序，依次统计连续相同数字的数量，直到满足条件为止。</description>
    </item>
    
  </channel>
</rss>
