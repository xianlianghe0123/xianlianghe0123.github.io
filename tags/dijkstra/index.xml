<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dijkstra on 贺贤良</title>
    <link>https://xianlianghe0123.github.io/tags/dijkstra/</link>
    <description>Recent content in Dijkstra on 贺贤良</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <lastBuildDate>Sat, 26 Nov 2022 13:20:59 +0800</lastBuildDate><atom:link href="https://xianlianghe0123.github.io/tags/dijkstra/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 882. 细分图中的可到达节点</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-882.-%E7%BB%86%E5%88%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sat, 26 Nov 2022 13:20:59 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-882.-%E7%BB%86%E5%88%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%88%B0%E8%BE%BE%E8%8A%82%E7%82%B9/</guid>
      <description>链接： https://leetcode.cn/problems/reachable-nodes-in-subdivided-graph/description/
难度： 中等
题目描述 给你一个无向图（原始图），图中有 n 个节点，编号从 0 到 n - 1 。你决定将图中的每条边 细分 为一条节点链，每条边之间的新节点数各不相同。
图用由边组成的二维数组 edges 表示，其中 edges[i] = [ui, vi, cnti] 表示原始图中节点 ui 和 vi 之间存在一条边，cnti 是将边 细分 后的新节点总数。注意，cnti == 0 表示边不可细分。
要 细分 边 [ui, vi] ，需要将其替换为 (cnti + 1) 条新边，和 cnti 个新节点。新节点为 x1, x2, &amp;hellip;, xcnti ，新边为 [ui, x1], [x1, x2], [x2, x3], &amp;hellip;, [xcnti-1, xcnti], [xcnti, vi] 。
现在得到一个 新的细分图 ，请你计算从节点 0 出发，可以到达多少个节点？如果节点间距离是 maxMoves 或更少，则视为 可以到达 。</description>
    </item>
    
    <item>
      <title>Leetcode 743. 网络延迟时间</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-743.-%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4/</link>
      <pubDate>Tue, 03 Aug 2021 20:16:01 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-743.-%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4/</guid>
      <description>链接： https://leetcode-cn.com/problems/network-delay-time/
难度： 中等
题目描述 有 n 个网络节点，标记为 1 到 n 。
给你一个列表 times，表示信号经过 有向 边的传递时间。 times[i] = (ui, vi, wi)，其中 ui 是源节点，vi 是目标节点， wi 是一个信号从源节点传递到目标节点的时间。
现在，从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 -1 。
示例 1： 输入： times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
输出： 2
示例 2： 输入： times = [[1,2,1]], n = 2, k = 1
输出： 1
示例 3： 输入： times = [[1,2,1]], n = 2, k = 2</description>
    </item>
    
  </channel>
</rss>
