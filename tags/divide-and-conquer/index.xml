<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>divide and conquer on 贺贤良</title>
    <link>https://xianlianghe0123.github.io/tags/divide-and-conquer/</link>
    <description>Recent content in divide and conquer on 贺贤良</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <lastBuildDate>Fri, 15 Jul 2022 10:17:00 +0800</lastBuildDate><atom:link href="https://xianlianghe0123.github.io/tags/divide-and-conquer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 558. 四叉树交集</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-558.-%E5%9B%9B%E5%8F%89%E6%A0%91%E4%BA%A4%E9%9B%86/</link>
      <pubDate>Fri, 15 Jul 2022 10:17:00 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-558.-%E5%9B%9B%E5%8F%89%E6%A0%91%E4%BA%A4%E9%9B%86/</guid>
      <description>链接： https://leetcode.cn/problems/logical-or-of-two-binary-grids-represented-as-quad-trees/
难度： 中等
题目描述 二进制矩阵中的所有元素不是 0 就是 1 。
给你两个四叉树，quadTree1 和 quadTree2。其中 quadTree1 表示一个 n * n 二进制矩阵，而 quadTree2 表示另一个 n * n 二进制矩阵。
请你返回一个表示 n * n 二进制矩阵的四叉树，它是 quadTree1 和 quadTree2 所表示的两个二进制矩阵进行 按位逻辑或运算 的结果。
注意，当 isLeaf 为 False 时，你可以把 True 或者 False 赋值给节点，两种值都会被判题机制 接受 。
四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：
val：储存叶子结点所代表的区域的值。1 对应 True，0 对应 False； isLeaf: 当这个节点是一个叶子结点时为 True，如果它有 4 个子节点则为 False 。 class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; } 我们可以按以下步骤为二维区域构建四叉树：</description>
    </item>
    
    <item>
      <title>Leetcode 241. 为运算表达式设计优先级</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-241.-%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/</link>
      <pubDate>Fri, 01 Jul 2022 10:16:30 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-241.-%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/</guid>
      <description>链接： https://leetcode.cn/problems/different-ways-to-add-parentheses/
难度： 中等
题目描述 给你一个由数字和运算符组成的字符串 expression ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 按任意顺序 返回答案。
生成的测试用例满足其对应输出值符合 32 位整数范围，不同结果的数量不超过 104 。
示例 1： 输入： expression = &amp;ldquo;2-1-1&amp;rdquo;
输出： [0,2]
解释：
((2-1)-1) = 0
(2-(1-1)) = 2
示例 2： 输入： expression = &amp;ldquo;2*3-4*5&amp;rdquo;
输出： [-34,-14,-10,-10,10]
解释：
(2*(3-(45))) = -34
((23)-(45)) = -14
((2(3-4))5) = -10
(2((3-4)5)) = -10
(((23)-4)*5) = 10
提示： 1 &amp;lt;= expression.length &amp;lt;= 20 expression 由数字和算符 &#39;+&#39;、&#39;-&#39; 和 &#39;*&#39; 组成。 输入表达式中的所有整数值在范围 [0, 99] 解题思路 分治 两个表达式进行运算，若其计算结果分别有 x 和 y 种，则最终的计算结果将 x 和 y 中所有结果的两两组合进行运算即可。</description>
    </item>
    
    <item>
      <title>Leetcode 53. 最大子序和</title>
      <link>https://xianlianghe0123.github.io/p/leetcode-53.-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</link>
      <pubDate>Thu, 14 Oct 2021 13:28:41 +0800</pubDate>
      
      <guid>https://xianlianghe0123.github.io/p/leetcode-53.-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</guid>
      <description>链接： https://leetcode-cn.com/problems/maximum-subarray/
难度： 简单
题目描述 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
示例 1： 输入： nums = [-2,1,-3,4,-1,2,1,-5,4]
输出： 6
解释： 连续子数组 [4,-1,2,1] 的和最大，为 6 。
示例 2： 输入： nums = [1]
输出： 1
示例 3： 输入： nums = [0]
输出： 0
示例 4： 输入： nums = [-1]
输出： -1
示例 5： 输入： nums = [-100000]
输出： -100000
提示： 1 &amp;lt;= nums.length &amp;lt;= 105 -104 &amp;lt;= nums[i] &amp;lt;= 104 进阶： 如果你已经实现复杂度为 $O(n)$ 的解法，尝试使用更为精妙的 分治法 求解。</description>
    </item>
    
  </channel>
</rss>
